{
    "actions": [
        {
            "type": "@comment",
            "parameters": {
                "text": {
                    "value": "GitHub: https://github.com/ipuppet/CAIO"
                }
            }
        },
        {
            "type": "@flow.javascript",
            "parameters": {
                "script": {
                    "value": "(() => {\nvar $parcel$global =\ntypeof globalThis !== 'undefined'\n  ? globalThis\n  : typeof self !== 'undefined'\n  ? self\n  : typeof window !== 'undefined'\n  ? window\n  : typeof global !== 'undefined'\n  ? global\n  : {};\nvar $parcel$modules = {};\nvar $parcel$inits = {};\n\nvar parcelRequire = $parcel$global[\"parcelRequire94c2\"];\nif (parcelRequire == null) {\n  parcelRequire = function(id) {\n    if (id in $parcel$modules) {\n      return $parcel$modules[id].exports;\n    }\n    if (id in $parcel$inits) {\n      var init = $parcel$inits[id];\n      delete $parcel$inits[id];\n      var module = {id: id, exports: {}};\n      $parcel$modules[id] = module;\n      init.call(module.exports, module, module.exports);\n      return module.exports;\n    }\n    var err = new Error(\"Cannot find module '\" + id + \"'\");\n    err.code = 'MODULE_NOT_FOUND';\n    throw err;\n  };\n\n  parcelRequire.register = function register(id, init) {\n    $parcel$inits[id] = init;\n  };\n\n  $parcel$global[\"parcelRequire94c2\"] = parcelRequire;\n}\nparcelRequire.register(\"l35Ko\", function(module, exports) {\n\nvar $1cJLV = parcelRequire(\"1cJLV\");\nvar $f52e560de5bdadbc$require$UIKit = $1cJLV.UIKit;\nvar $f52e560de5bdadbc$require$TabBarController = $1cJLV.TabBarController;\nvar $f52e560de5bdadbc$require$Kernel = $1cJLV.Kernel;\nvar $f52e560de5bdadbc$require$FileStorage = $1cJLV.FileStorage;\nvar $f52e560de5bdadbc$require$Setting = $1cJLV.Setting;\n\nvar $6QERS = parcelRequire(\"6QERS\");\n\nvar $2Ygkq = parcelRequire(\"2Ygkq\");\n\nvar $cMkik = parcelRequire(\"cMkik\");\n\nvar $4lgvP = parcelRequire(\"4lgvP\");\nconst $f52e560de5bdadbc$var$fileStorage = new $f52e560de5bdadbc$require$FileStorage();\n/**\r\n * @typedef {AppKernel} AppKernel\r\n */ class $f52e560de5bdadbc$var$AppKernel extends $f52e560de5bdadbc$require$Kernel {\n    constructor(){\n        super();\n        this.query = $context.query;\n        // FileStorage\n        this.fileStorage = $f52e560de5bdadbc$var$fileStorage;\n        // Setting\n        let structure;\n        try {\n            structure = __SETTING__;\n        } catch  {\n        }\n        this.setting = new $f52e560de5bdadbc$require$Setting({\n            fileStorage: this.fileStorage,\n            structure: structure\n        });\n        this.setting.loadConfig();\n        // Storage\n        this.storage = new $6QERS(this.setting.get(\"clipboard.autoSync\"), this);\n        this.initComponents();\n        $4lgvP(this);\n    }\n    initComponents() {\n        // Clipboard\n        this.clipboard = new $2Ygkq(this);\n        // ActionManager\n        this.actionManager = new $cMkik(this);\n    }\n    deleteConfirm(message, conformAction) {\n        $ui.alert({\n            title: message,\n            actions: [\n                {\n                    title: $l10n(\"DELETE\"),\n                    style: $alertActionType.destructive,\n                    handler: ()=>{\n                        conformAction();\n                    }\n                },\n                {\n                    title: $l10n(\"CANCEL\")\n                }\n            ]\n        });\n    }\n}\n\n\nclass $f52e560de5bdadbc$var$AppUI {\n    static renderMainUI() {\n        const kernel = new $f52e560de5bdadbc$var$AppKernel();\n        const buttons = {\n            clipboard: {\n                icon: \"doc.on.clipboard\",\n                title: $l10n(\"CLIPBOARD\")\n            },\n            actions: {\n                icon: \"command\",\n                title: $l10n(\"ACTIONS\")\n            },\n            setting: {\n                icon: \"gear\",\n                title: $l10n(\"SETTING\")\n            }\n        };\n        kernel.setting.setEvent(\"onSet\", (key)=>{\n            if (key === \"mainUIDisplayMode\") $delay(0.3, ()=>$addin.restart()\n            );\n        });\n        if (kernel.setting.get(\"mainUIDisplayMode\") === 0) {\n            kernel.useJsboxNav();\n            kernel.setting.useJsboxNav();\n            kernel.setNavButtons([\n                {\n                    symbol: buttons.setting.icon,\n                    title: buttons.setting.title,\n                    handler: ()=>{\n                        $f52e560de5bdadbc$require$UIKit.push({\n                            title: buttons.setting.title,\n                            views: [\n                                kernel.setting.getListView()\n                            ]\n                        });\n                    }\n                },\n                {\n                    symbol: buttons.actions.icon,\n                    title: buttons.actions.title,\n                    handler: ()=>{\n                        kernel.actionManager.present();\n                    }\n                }\n            ]);\n            kernel.UIRender(kernel.clipboard.getPageController().getPage());\n        } else {\n            kernel.tabBarController = new $f52e560de5bdadbc$require$TabBarController();\n            const clipboardPageController = kernel.clipboard.getPageController();\n            kernel.tabBarController.setPages({\n                clipboard: clipboardPageController.getPage(),\n                actions: kernel.actionManager.getPageView(),\n                setting: kernel.setting.getPageView()\n            }).setCells({\n                clipboard: buttons.clipboard,\n                actions: buttons.actions,\n                setting: buttons.setting\n            });\n            kernel.UIRender(kernel.tabBarController.generateView().definition);\n        }\n    }\n    static renderKeyboardUI() {\n        const kernel = new $f52e560de5bdadbc$var$AppKernel();\n        const Keyboard = (parcelRequire(\"ehiE8\"));\n        const keyboard = new Keyboard(kernel);\n        $ui.render({\n            views: [\n                keyboard.getView()\n            ]\n        });\n    }\n    static renderTodayUI() {\n        const kernel = new $f52e560de5bdadbc$var$AppKernel();\n        const Today = (parcelRequire(\"knL6n\"));\n        const today = new Today(kernel);\n        $ui.render({\n            views: [\n                today.getView()\n            ]\n        });\n    }\n    static renderUnsupported() {\n        $intents.finish(\"不支持在此环境中运行\");\n        $ui.render({\n            views: [\n                {\n                    type: \"label\",\n                    props: {\n                        text: \"不支持在此环境中运行\",\n                        align: $align.center\n                    },\n                    layout: $layout.fill\n                }\n            ]\n        });\n    }\n}\nclass $f52e560de5bdadbc$var$Widget {\n    static widgetInstance(widget, ...data) {\n        if ($file.exists(`/scripts/widget/${widget}.js`)) {\n            const { Widget: Widget  } = require(`./widget/${widget}.js`);\n            return new Widget(...data);\n        } else return false;\n    }\n    static renderError() {\n        $widget.setTimeline({\n            render: ()=>({\n                    type: \"text\",\n                    props: {\n                        text: \"Invalid argument\"\n                    }\n                })\n        });\n    }\n    static renderClipboard() {\n        const setting = new $f52e560de5bdadbc$require$Setting();\n        setting.loadConfig().setReadonly();\n        const widget = $f52e560de5bdadbc$var$Widget.widgetInstance(\"Clipboard\", setting, new $6QERS(false, {\n            fileStorage: $f52e560de5bdadbc$var$fileStorage\n        }));\n        widget.render();\n    }\n    static render(widgetName = $widget.inputValue) {\n        widgetName = widgetName ?? \"Clipboard\";\n        if (widgetName === \"Clipboard\") $f52e560de5bdadbc$var$Widget.renderClipboard();\n        else $f52e560de5bdadbc$var$Widget.renderError();\n    }\n}\nmodule.exports = {\n    Widget: $f52e560de5bdadbc$var$Widget,\n    run: ()=>{\n        //AppUI.renderTodayUI(); return\n        //AppUI.renderKeyboardUI(); return\n        //Widget.render(); return\n        if ($app.env === $env.app || $app.env === $env.action) $f52e560de5bdadbc$var$AppUI.renderMainUI();\n        else if ($app.env === $env.keyboard) $f52e560de5bdadbc$var$AppUI.renderKeyboardUI();\n        else if ($app.env === $env.widget) $f52e560de5bdadbc$var$Widget.render();\n        else if ($app.env === $env.today) $f52e560de5bdadbc$var$AppUI.renderTodayUI();\n        else $f52e560de5bdadbc$var$AppUI.renderUnsupported();\n    }\n};\n\n});\nparcelRequire.register(\"1cJLV\", function(module, exports) {\nconst VERSION = \"1.2.3\";\nString.prototype.trim = function(char, type) {\n    if (char) {\n        if (type === \"l\") return this.replace(new RegExp(\"^\\\\\" + char + \"+\", \"g\"), \"\");\n        else if (type === \"r\") return this.replace(new RegExp(\"\\\\\" + char + \"+$\", \"g\"), \"\");\n        return this.replace(new RegExp(\"^\\\\\" + char + \"+|\\\\\" + char + \"+$\", \"g\"), \"\");\n    }\n    return this.replace(/^\\s+|\\s+$/g, \"\");\n};\n/**\r\n * 对比版本号\r\n * @param {string} preVersion\r\n * @param {string} lastVersion\r\n * @returns {number} 1: preVersion 大, 0: 相等, -1: lastVersion 大\r\n */ function versionCompare(preVersion = \"\", lastVersion = \"\") {\n    let sources = preVersion.split(\".\");\n    let dests = lastVersion.split(\".\");\n    let maxL = Math.max(sources.length, dests.length);\n    let result = 0;\n    for(let i = 0; i < maxL; i++){\n        let preValue = sources.length > i ? sources[i] : 0;\n        let preNum = isNaN(Number(preValue)) ? preValue.charCodeAt() : Number(preValue);\n        let lastValue = dests.length > i ? dests[i] : 0;\n        let lastNum = isNaN(Number(lastValue)) ? lastValue.charCodeAt() : Number(lastValue);\n        if (preNum < lastNum) {\n            result = -1;\n            break;\n        } else if (preNum > lastNum) {\n            result = 1;\n            break;\n        }\n    }\n    return result;\n}\nfunction l10n(language, content, override = true) {\n    if (typeof content === \"string\") {\n        const strings = {\n        };\n        const strArr = content.split(\";\");\n        strArr.forEach((line)=>{\n            line = line.trim();\n            if (line !== \"\") {\n                const kv = line.split(\"=\");\n                strings[kv[0].trim().slice(1, -1)] = kv[1].trim().slice(1, -1);\n            }\n        });\n        content = strings;\n    }\n    const strings = $app.strings;\n    if (override) strings[language] = Object.assign($app.strings[language], content);\n    else strings[language] = Object.assign(content, $app.strings[language]);\n    $app.strings = strings;\n}\nfunction uuid() {\n    const s = [];\n    const hexDigits = \"0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz\";\n    for(let i = 0; i < 36; i++)s[i] = hexDigits.substr(Math.floor(Math.random() * 16), 1);\n    s[14] = \"4\" // bits 12-15 of the time_hi_and_version field to 0010\n    ;\n    s[19] = hexDigits.substr(s[19] & 3 | 8, 1) // bits 6-7 of the clock_seq_hi_and_reserved to 01\n    ;\n    s[8] = s[13] = s[18] = s[23] = \"-\";\n    return s.join(\"\");\n}\nfunction objectEqual(a, b) {\n    let aProps = Object.getOwnPropertyNames(a);\n    let bProps = Object.getOwnPropertyNames(b);\n    if (aProps.length !== bProps.length) return false;\n    for(let i = 0; i < aProps.length; i++){\n        let propName = aProps[i];\n        let propA = a[propName];\n        let propB = b[propName];\n        if (Array.isArray(propA)) for(let i = 0; i < propA.length; i++){\n            if (!objectEqual(propA[i], propB[i])) return false;\n        }\n        else if (typeof propA === \"object\") return objectEqual(propA, propB);\n        else if (propA !== propB) return false;\n    }\n    return true;\n}\n/**\r\n * 压缩图片\r\n * @param {$image} image $image\r\n * @param {number} maxSize 图片最大尺寸 单位：像素\r\n * @returns {$image}\r\n */ function compressImage(image, maxSize = 921600) {\n    const info = $imagekit.info(image);\n    if (info.height * info.width > maxSize) {\n        const scale = maxSize / (info.height * info.width);\n        image = $imagekit.scaleBy(image, scale);\n    }\n    return image;\n}\nclass ValidationError extends Error {\n    constructor(parameter, type){\n        super(`The type of the parameter '${parameter}' must be '${type}'`);\n        this.name = \"ValidationError\";\n    }\n}\nclass Controller {\n    events = {\n    };\n    setEvents(events) {\n        Object.keys(events).forEach((event)=>this.setEvent(event, events[event])\n        );\n        return this;\n    }\n    setEvent(event, callback) {\n        this.events[event] = callback;\n        return this;\n    }\n    callEvent(event, ...args) {\n        if (typeof this.events[event] === \"function\") this.events[event](...args);\n    }\n}\n/**\r\n * 视图基类\r\n */ class View {\n    /**\r\n     * id\r\n     * @type {string}\r\n     */ id = uuid();\n    /**\r\n     * 类型\r\n     * @type {string}\r\n     */ type;\n    /**\r\n     * 属性\r\n     * @type {Object}\r\n     */ props;\n    /**\r\n     * 子视图\r\n     * @type {Array}\r\n     */ views;\n    /**\r\n     * 事件\r\n     * @type {Object}\r\n     */ events;\n    /**\r\n     * 布局函数\r\n     * @type {Function}\r\n     */ layout;\n    constructor({ type =\"view\" , props ={\n    } , views =[] , events ={\n    } , layout =$layout.fill  } = {\n    }){\n        // 属性\n        this.type = type;\n        this.props = props;\n        this.views = views;\n        this.events = events;\n        this.layout = layout;\n        if (this.props.id) this.id = this.props.id;\n        else this.props.id = this.id;\n    }\n    static create(args) {\n        return new this(args);\n    }\n    static createByViews(views) {\n        return new this({\n            views\n        });\n    }\n    setProps(props) {\n        Object.keys(props).forEach((key)=>this.setProp(key, props[key])\n        );\n        return this;\n    }\n    setProp(key, prop) {\n        if (key === \"id\") this.id = prop;\n        this.props[key] = prop;\n        return this;\n    }\n    setViews(views) {\n        this.views = views;\n        return this;\n    }\n    setEvents(events) {\n        Object.keys(events).forEach((event)=>this.setEvent(event, events[event])\n        );\n        return this;\n    }\n    setEvent(event, action) {\n        this.events[event] = action;\n        return this;\n    }\n    /**\r\n     * 事件中间件\r\n     *\r\n     * 调用处理函数 `action`，第一个参数为用户定义的事件处理函数\r\n     * 其余参数为 JSBox 传递的参数，如 sender 等\r\n     *\r\n     * @param {string} event 事件名称\r\n     * @param {Function} action 处理事件的函数\r\n     * @returns {this}\r\n     */ eventMiddleware(event, action) {\n        const old = this.events[event];\n        this.events[event] = (...args)=>{\n            if (typeof old === \"function\") // 调用处理函数\n            action(old, ...args);\n        };\n        return this;\n    }\n    assignEvent(event, action) {\n        const old = this.events[event];\n        this.events[event] = (...args)=>{\n            if (typeof old === \"function\") old(...args);\n            action(...args);\n        };\n        return this;\n    }\n    setLayout(layout) {\n        this.layout = layout;\n        return this;\n    }\n    getView() {\n        return this;\n    }\n    get definition() {\n        return this.getView();\n    }\n}\nclass UIKit {\n    static #sharedApplication = $objc(\"UIApplication\").$sharedApplication();\n    /**\r\n     * 对齐方式\r\n     */ static align = {\n        left: 0,\n        right: 1,\n        top: 2,\n        bottom: 3\n    };\n    /**\r\n     * 默认文本颜色\r\n     */ static textColor = $color(\"primaryText\", \"secondaryText\");\n    /**\r\n     * 默认链接颜色\r\n     */ static linkColor = $color(\"systemLink\");\n    static primaryViewBackgroundColor = $color(\"primarySurface\");\n    static scrollViewBackgroundColor = $color(\"insetGroupedBackground\");\n    /**\r\n     * 可滚动视图列表\r\n     * @type {string[]}\r\n     */ static scrollViewList = [\n        \"list\",\n        \"matrix\"\n    ];\n    /**\r\n     * 是否属于大屏设备\r\n     * @type {boolean}\r\n     */ static isLargeScreen = $device.isIpad || $device.isIpadPro;\n    /**\r\n     * 获取Window大小\r\n     */ static get windowSize() {\n        return $objc(\"UIWindow\").$keyWindow().jsValue().size;\n    }\n    static NavigationBarNormalHeight = $objc(\"UINavigationController\").invoke(\"alloc.init\").$navigationBar().jsValue().frame.height;\n    static NavigationBarLargeTitleHeight = $objc(\"UITabBarController\").invoke(\"alloc.init\").$tabBar().jsValue().frame.height + UIKit.NavigationBarNormalHeight;\n    /**\r\n     * 判断是否是分屏模式\r\n     * @type {boolean}\r\n     */ static get isSplitScreenMode() {\n        return UIKit.isLargeScreen && $device.info.screen.width !== UIKit.windowSize.width;\n    }\n    static get statusBarHeight() {\n        return $app.isDebugging ? 0 : UIKit.#sharedApplication.$statusBarFrame().height;\n    }\n    static get statusBarOrientation() {\n        return UIKit.#sharedApplication.$statusBarOrientation();\n    }\n    static get isHorizontal() {\n        return UIKit.statusBarOrientation === 3 || UIKit.statusBarOrientation === 4;\n    }\n    static loading() {\n        const loading = $ui.create(UIKit.blurBox({\n            cornerRadius: 15\n        }, [\n            {\n                type: \"spinner\",\n                props: {\n                    loading: true,\n                    style: 0\n                },\n                layout: (make, view)=>{\n                    make.size.equalTo(view.prev);\n                    make.center.equalTo(view.super);\n                }\n            }\n        ]));\n        return {\n            start: ()=>{\n                $ui.controller.view.insertAtIndex(loading, 0);\n                loading.layout((make, view)=>{\n                    make.center.equalTo(view.super);\n                    const width = Math.min(UIKit.windowSize.width * 0.6, 300);\n                    make.size.equalTo($size(width, width));\n                });\n                loading.moveToFront();\n            },\n            end: ()=>{\n                loading.remove();\n            }\n        };\n    }\n    static defaultBackgroundColor(type) {\n        return UIKit.scrollViewList.indexOf(type) > -1 ? UIKit.scrollViewBackgroundColor : UIKit.primaryViewBackgroundColor;\n    }\n    static separatorLine(props = {\n    }, align = UIKit.align.bottom) {\n        return {\n            // canvas\n            type: \"canvas\",\n            props: props,\n            layout: (make, view)=>{\n                if (view.prev === undefined) make.top.equalTo(view.super);\n                else if (align === UIKit.align.bottom) make.top.equalTo(view.prev.bottom);\n                else make.top.equalTo(view.prev.top);\n                make.height.equalTo(1 / $device.info.screen.scale);\n                make.left.right.inset(0);\n            },\n            events: {\n                draw: (view, ctx)=>{\n                    ctx.strokeColor = props.bgcolor ?? $color(\"separatorColor\");\n                    ctx.setLineWidth(1);\n                    ctx.moveToPoint(0, 0);\n                    ctx.addLineToPoint(view.frame.width, 0);\n                    ctx.strokePath();\n                }\n            }\n        };\n    }\n    static blurBox(props = {\n    }, views = [], layout = $layout.fill) {\n        return {\n            type: \"blur\",\n            props: Object.assign({\n                style: $blurStyle.thinMaterial\n            }, props),\n            views: views,\n            layout: layout\n        };\n    }\n    /**\r\n     * 建议仅在使用 JSBox nav 时使用，便于统一风格\r\n     */ static push(args) {\n        const views = args.views, statusBarStyle = args.statusBarStyle ?? 0, title = args.title ?? \"\", navButtons = args.navButtons ?? [\n            {\n                title: \"\"\n            }\n        ], bgcolor = (args.bgcolor ?? views[0]?.props?.bgcolor) ?? \"primarySurface\", disappeared = args.disappeared;\n        $ui.push({\n            props: {\n                statusBarStyle: statusBarStyle,\n                navButtons: navButtons,\n                title: title,\n                bgcolor: typeof bgcolor === \"string\" ? $color(bgcolor) : bgcolor\n            },\n            events: {\n                disappeared: ()=>{\n                    if (disappeared !== undefined) disappeared();\n                }\n            },\n            views: [\n                {\n                    type: \"view\",\n                    views: views,\n                    layout: (make, view)=>{\n                        make.top.equalTo(view.super.safeArea);\n                        make.bottom.equalTo(view.super);\n                        make.left.right.equalTo(view.super.safeArea);\n                    }\n                }\n            ]\n        });\n    }\n}\n/**\r\n * @property {function(PageController)} ViewController.events.onChange\r\n */ class ViewController extends Controller {\n    #pageControllers = [];\n    /**\r\n     * @param {PageController} pageController\r\n     */  #onPop(pageController) {\n        this.callEvent(\"onPop\", pageController) // 被弹出的对象\n        ;\n        this.#pageControllers.pop();\n    }\n    /**\r\n     * push 新页面\r\n     * @param {PageController} pageController\r\n     */ push(pageController1) {\n        const parent = this.#pageControllers[this.#pageControllers.length - 1];\n        pageController1.navigationItem.addPopButton(parent?.navigationItem.title);\n        this.#pageControllers.push(pageController1);\n        $ui.push({\n            props: {\n                statusBarStyle: 0,\n                navBarHidden: true\n            },\n            events: {\n                dealloc: ()=>{\n                    this.#onPop(pageController1);\n                }\n            },\n            views: [\n                pageController1.getPage().definition\n            ],\n            layout: $layout.fill\n        });\n    }\n    /**\r\n     *\r\n     * @param {PageController} pageController\r\n     * @returns {this}\r\n     */ setRootPageController(pageController2) {\n        this.#pageControllers = [];\n        this.#pageControllers.push(pageController2);\n        return this;\n    }\n    hasRootPageController() {\n        return this.#pageControllers[0] instanceof PageController;\n    }\n    getRootPageController() {\n        return this.#pageControllers[0];\n    }\n}\nclass Matrix extends View {\n    titleStyle = {\n        font: $font(\"bold\", 21),\n        height: 30\n    };\n    #hiddenViews;\n    #templateHiddenStatus;\n    templateIdByIndex(i) {\n        if (this.props.template.views[i]?.props?.id === undefined) {\n            if (this.props.template.views[i].props === undefined) this.props.template.views[i].props = {\n            };\n            this.props.template.views[i].props.id = uuid();\n        }\n        return this.props.template.views[i].props.id;\n    }\n    get templateHiddenStatus() {\n        if (!this.#templateHiddenStatus) {\n            this.#templateHiddenStatus = {\n            };\n            for(let i = 0; i < this.props.template.views.length; i++){\n                // 未定义 id 以及 hidden 的模板默认 hidden 设置为 false\n                if (this.props.template.views[i].props.id === undefined && this.props.template.views[i].props.hidden === undefined) this.#templateHiddenStatus[this.templateIdByIndex(i)] = false;\n                // 模板中声明 hidden 的值，在数据中将会成为默认值\n                if (this.props.template.views[i].props.hidden !== undefined) this.#templateHiddenStatus[this.templateIdByIndex(i)] = this.props.template.views[i].props.hidden;\n            }\n        }\n        return this.#templateHiddenStatus;\n    }\n    get hiddenViews() {\n        if (!this.#hiddenViews) {\n            this.#hiddenViews = {\n            };\n            // hide other views\n            for(let i = 0; i < this.props.template.views.length; i++)this.#hiddenViews[this.templateIdByIndex(i)] = {\n                hidden: true\n            };\n        }\n        return this.#hiddenViews;\n    }\n     #titleToData(title) {\n        let hiddenViews = {\n            ...this.hiddenViews\n        };\n        // templateProps & title\n        Object.assign(hiddenViews, {\n            __templateProps: {\n                hidden: true\n            },\n            __title: {\n                hidden: false,\n                text: title,\n                info: {\n                    title: true\n                }\n            }\n        });\n        return hiddenViews;\n    }\n    rebuildData(data = []) {\n        // rebuild data\n        return data.map((section)=>{\n            section.items = section.items.map((item)=>{\n                // 所有元素都重置 hidden 属性\n                Object.keys(item).forEach((key)=>{\n                    item[key].hidden = this.templateHiddenStatus[key] ?? false;\n                });\n                // 修正数据\n                Object.keys(this.templateHiddenStatus).forEach((key)=>{\n                    if (!item[key]) item[key] = {\n                    };\n                    item[key].hidden = this.templateHiddenStatus[key];\n                });\n                item.__templateProps = {\n                    hidden: false\n                };\n                item.__title = {\n                    hidden: true\n                };\n                return item;\n            });\n            if (section.title) section.items.unshift(this.#titleToData(section.title));\n            return section;\n        });\n    }\n    rebuildTemplate() {\n        let templateProps = {\n        };\n        if (this.props.template.props !== undefined) templateProps = Object.assign(this.props.template.props, {\n            id: \"__templateProps\",\n            hidden: false\n        });\n        this.props.template.props = {\n        };\n        // rebuild template\n        const templateViews = [\n            {\n                // templateProps\n                type: \"view\",\n                props: templateProps,\n                layout: $layout.fill\n            },\n            {\n                // title\n                type: \"label\",\n                props: {\n                    id: \"__title\",\n                    hidden: true,\n                    font: this.titleStyle.font\n                },\n                layout: (make, view)=>{\n                    make.top.inset(-(this.titleStyle.height / 4) * 3);\n                    make.height.equalTo(this.titleStyle.height);\n                    make.width.equalTo(view.super.safeArea);\n                }\n            }\n        ].concat(this.props.template.views);\n        this.props.template.views = templateViews;\n    }\n    insert(data, withTitleOffset = true) {\n        data.indexPath = this.indexPath(data.indexPath, withTitleOffset);\n        return $(this.id).insert(data);\n    }\n    delete(indexPath, withTitleOffset = true) {\n        indexPath = this.indexPath(indexPath, withTitleOffset);\n        return $(this.id).delete(indexPath);\n    }\n    object(indexPath, withTitleOffset = true) {\n        indexPath = this.indexPath(indexPath, withTitleOffset);\n        return $(this.id).object(indexPath);\n    }\n    cell(indexPath, withTitleOffset = true) {\n        indexPath = this.indexPath(indexPath, withTitleOffset);\n        return $(this.id).cell(indexPath);\n    }\n    /**\r\n     * 获得修正后的 indexPath\r\n     * @param {$indexPath||number} indexPath\r\n     * @param {boolean} withTitleOffset 输入的 indexPath 是否已经包含了标题列。通常自身事件返回的 indexPath 视为已包含，使用默认值即可。\r\n     * @returns {$indexPath}\r\n     */ indexPath(indexPath, withTitleOffset) {\n        let offset = withTitleOffset ? 0 : 1;\n        if (typeof indexPath === \"number\") indexPath = $indexPath(0, indexPath);\n        indexPath = $indexPath(indexPath.section, indexPath.row + offset);\n        return indexPath;\n    }\n    update(data) {\n        this.props.data = this.rebuildData(data);\n        $(this.id).data = this.props.data;\n    }\n    getView() {\n        // rebuild data, must first\n        this.props.data = this.rebuildData(this.props.data);\n        // rebuild template\n        this.rebuildTemplate();\n        // itemSize event\n        this.setEvent(\"itemSize\", (sender, indexPath)=>{\n            const info = sender.object(indexPath)?.__title?.info;\n            if (info?.title) return $size(Math.max($device.info.screen.width, $device.info.screen.height), 0);\n            const columns = this.props.columns ?? 2;\n            const spacing = this.props.spacing ?? 15;\n            const width = (this.props.itemWidth ?? this.props.itemSize?.width) ?? (sender.super.frame.width - spacing * (columns + 1)) / columns;\n            const height = (this.props.itemHeight ?? this.props.itemSize?.height) ?? 100;\n            return $size(width, height);\n        });\n        return this;\n    }\n}\nclass SheetAddNavBarError extends Error {\n    constructor(){\n        super(\"Please call setView(view) first.\");\n        this.name = \"SheetAddNavBarError\";\n    }\n}\nclass SheetViewTypeError extends ValidationError {\n    constructor(parameter, type){\n        super(parameter, type);\n        this.name = \"SheetViewTypeError\";\n    }\n}\nclass Sheet extends View {\n    #present = ()=>{\n    };\n    #dismiss = ()=>{\n    };\n    pageController;\n    init() {\n        const UIModalPresentationStyle = {\n            pageSheet: 1\n        } // TODO: sheet style\n        ;\n        const { width , height  } = $device.info.screen;\n        const UIView = $objc(\"UIView\").invoke(\"initWithFrame\", $rect(0, 0, width, height));\n        const PSViewController = $objc(\"UIViewController\").invoke(\"alloc.init\");\n        const PSViewControllerView = PSViewController.$view();\n        PSViewControllerView.$setBackgroundColor($color(\"primarySurface\"));\n        PSViewControllerView.$addSubview(UIView);\n        PSViewController.$setModalPresentationStyle(UIModalPresentationStyle.pageSheet);\n        this.#present = ()=>{\n            PSViewControllerView.jsValue().add(this.pageController?.getPage().definition ?? this.view);\n            $ui.vc.ocValue().invoke(\"presentModalViewController:animated\", PSViewController, true);\n        };\n        this.#dismiss = ()=>PSViewController.invoke(\"dismissModalViewControllerAnimated\", true)\n        ;\n        return this;\n    }\n    /**\r\n     * 设置 view\r\n     * @param {Object} view 视图对象\r\n     * @returns {this}\r\n     */ setView(view = {\n    }) {\n        if (typeof view !== \"object\") throw new SheetViewTypeError(\"view\", \"object\");\n        this.view = view;\n        return this;\n    }\n    /**\r\n     * 为 view 添加一个 navBar\r\n     * @param {Object} param\r\n     *  {\r\n     *      {string} title\r\n     *      {Object} popButton 参数与 BarButtonItem 一致\r\n     *      {Array} rightButtons\r\n     *  }\r\n     * @returns {this}\r\n     */ addNavBar({ title: title1 , popButton ={\n        title: \"Done\"\n    } , rightButtons =[]  }) {\n        if (this.view === undefined) throw new SheetAddNavBarError();\n        this.pageController = new PageController();\n        // 返回按钮\n        const barButtonItem = new BarButtonItem();\n        barButtonItem.setEvents(Object.assign({\n            tapped: ()=>{\n                this.dismiss();\n                if (typeof popButton.tapped === \"function\") popButton.tapped();\n            }\n        }, popButton.events)).setAlign(UIKit.align.left).setSymbol(popButton.symbol).setTitle(popButton.title).setMenu(popButton.menu);\n        const button = barButtonItem.definition.views[0];\n        button.layout = (make, view)=>{\n            make.left.equalTo(view.super.safeArea).offset(15);\n            make.centerY.equalTo(view.super.safeArea);\n        };\n        this.pageController.navigationItem.addPopButton(\"\", button).setTitle(title1).setLargeTitleDisplayMode(NavigationItem.largeTitleDisplayModeNever).setRightButtons(rightButtons);\n        this.pageController.setView(this.view).navigationController.navigationBar.pageSheetMode();\n        if (this.view.props?.bgcolor) this.pageController?.getPage().setProp(\"bgcolor\", this.view.props?.bgcolor);\n        return this;\n    }\n    /**\r\n     * 弹出 Sheet\r\n     */ present() {\n        this.#present();\n    }\n    /**\r\n     * 关闭 Sheet\r\n     */ dismiss() {\n        this.#dismiss();\n    }\n}\n/**\r\n * 用于创建一个靠右侧按钮（自动布局）\r\n * this.events.tapped 按钮点击事件，会传入三个函数，start()、done() 和 cancel()\r\n *     调用 start() 表明按钮被点击，准备开始动画\r\n *     调用 done() 表明您的操作已经全部完成，默认操作成功完成，播放一个按钮变成对号的动画\r\n *                 若第一个参数传出false则表示运行出错\r\n *                 第二个参数为错误原因($ui.toast(message))\r\n *     调用 cancel() 表示取消操作\r\n *     示例：\r\n *      (start, done, cancel) => {\r\n *          start()\r\n *          const upload = (data) => { return false }\r\n *          if (upload(data)) { done() }\r\n *          else { done(false, \"Upload Error!\") }\r\n *      }\r\n */ class BarButtonItem extends View {\n    static size = $size(38, 38);\n    static iconSize = $size(23, 23) // 比 size 小 edges\n    ;\n    static edges = 15;\n    /**\r\n     * 标题\r\n     * @type {string}\r\n     */ title = \"\";\n    /**\r\n     * 对齐方式\r\n     */ align = UIKit.align.right;\n    setTitle(title2 = \"\") {\n        this.title = title2;\n        return this;\n    }\n    setSymbol(symbol) {\n        this.symbol = symbol;\n        return this;\n    }\n    setMenu(menu) {\n        this.menu = menu;\n        return this;\n    }\n    setAlign(align) {\n        this.align = align;\n        return this;\n    }\n     #actionStart() {\n        // 隐藏button，显示spinner\n        $(this.id).hidden = true;\n        $(\"spinner-\" + this.id).hidden = false;\n    }\n     #actionDone() {\n        const buttonIcon = $(`icon-button-${this.id}`);\n        const checkmarkIcon = $(`icon-checkmark-${this.id}`);\n        buttonIcon.alpha = 0;\n        $(this.id).hidden = false;\n        $(\"spinner-\" + this.id).hidden = true;\n        // 成功动画\n        $ui.animate({\n            duration: 0.6,\n            animation: ()=>{\n                checkmarkIcon.alpha = 1;\n            },\n            completion: ()=>{\n                $delay(0.3, ()=>$ui.animate({\n                        duration: 0.6,\n                        animation: ()=>{\n                            checkmarkIcon.alpha = 0;\n                        },\n                        completion: ()=>{\n                            $ui.animate({\n                                duration: 0.4,\n                                animation: ()=>{\n                                    buttonIcon.alpha = 1;\n                                },\n                                completion: ()=>{\n                                    buttonIcon.alpha = 1;\n                                }\n                            });\n                        }\n                    })\n                );\n            }\n        });\n    }\n     #actionCancel() {\n        $(this.id).hidden = false;\n        $(\"spinner-\" + this.id).hidden = true;\n    }\n    getView() {\n        const userTapped = this.events.tapped;\n        this.events.tapped = (sender)=>{\n            if (!userTapped) return;\n            userTapped({\n                start: ()=>this.#actionStart()\n                ,\n                done: ()=>this.#actionDone()\n                ,\n                cancel: ()=>this.#actionCancel()\n            }, sender);\n        };\n        return {\n            type: \"view\",\n            views: [\n                {\n                    type: \"button\",\n                    props: Object.assign({\n                        id: this.id,\n                        bgcolor: $color(\"clear\"),\n                        tintColor: UIKit.textColor,\n                        titleColor: UIKit.textColor,\n                        contentEdgeInsets: $insets(0, 0, 0, 0),\n                        titleEdgeInsets: $insets(0, 0, 0, 0),\n                        imageEdgeInsets: $insets(0, 0, 0, 0)\n                    }, this.menu ? {\n                        menu: this.menu\n                    } : {\n                    }, this.title?.length > 0 ? {\n                        title: this.title\n                    } : {\n                    }, this.props),\n                    views: [\n                        {\n                            type: \"image\",\n                            props: Object.assign({\n                                id: `icon-button-${this.id}`,\n                                hidden: this.symbol === undefined,\n                                tintColor: UIKit.textColor\n                            }, this.symbol === undefined ? {\n                            } : typeof this.symbol === \"string\" ? {\n                                symbol: this.symbol\n                            } : {\n                                data: this.symbol.png\n                            }),\n                            layout: (make, view)=>{\n                                make.center.equalTo(view.super);\n                                make.size.equalTo(BarButtonItem.iconSize);\n                            }\n                        },\n                        {\n                            type: \"image\",\n                            props: {\n                                id: `icon-checkmark-${this.id}`,\n                                alpha: 0,\n                                tintColor: UIKit.textColor,\n                                symbol: \"checkmark\"\n                            },\n                            layout: (make, view)=>{\n                                make.center.equalTo(view.super);\n                                make.size.equalTo(BarButtonItem.iconSize);\n                            }\n                        }\n                    ],\n                    events: this.events,\n                    layout: $layout.fill\n                },\n                {\n                    type: \"spinner\",\n                    props: {\n                        id: \"spinner-\" + this.id,\n                        loading: true,\n                        hidden: true\n                    },\n                    layout: $layout.fill\n                }\n            ],\n            layout: (make, view)=>{\n                make.size.equalTo(BarButtonItem.size);\n                make.centerY.equalTo(view.super);\n                if (view.prev && view.prev.id !== \"label\" && view.prev.id !== undefined) {\n                    if (this.align === UIKit.align.right) make.right.equalTo(view.prev.left);\n                    else make.left.equalTo(view.prev.right);\n                } else {\n                    // 图片类型留一半边距，图标和按钮边距是另一半\n                    const edges = this.symbol ? BarButtonItem.edges / 2 : BarButtonItem.edges;\n                    if (this.align === UIKit.align.right) make.right.inset(edges);\n                    else make.left.inset(edges);\n                }\n            }\n        };\n    }\n    /**\r\n     * 用于快速创建 BarButtonItem\r\n     * @typedef {Object} BarButtonItemProperties\r\n     * @property {string} title\r\n     * @property {string} symbol\r\n     * @property {Function} tapped\r\n     * @property {Object} menu\r\n     * @property {Object} events\r\n     *\r\n     * @param {BarButtonItemProperties} param0\r\n     * @returns {BarButtonItem}\r\n     */ static creat({ symbol , title: title3 , tapped , menu , events , align =UIKit.align.right  }) {\n        const barButtonItem = new BarButtonItem();\n        barButtonItem.setEvents(Object.assign({\n            tapped: tapped\n        }, events)).setAlign(align).setSymbol(symbol).setTitle(title3).setMenu(menu);\n        return barButtonItem;\n    }\n}\nclass BarTitleView extends View {\n    height = 20;\n    topOffset = 15;\n    bottomOffset = 10;\n    controller = {\n    };\n    setController(controller) {\n        this.controller = controller;\n        return this;\n    }\n}\nclass SearchBar extends BarTitleView {\n    height = 35;\n    topOffset = 15;\n    bottomOffset = 10;\n    kbType = $kbType.search;\n    placeholder = $l10n(\"SEARCH\");\n    constructor(args){\n        super(args);\n        this.setController(new SearchBarController());\n        this.controller.setSearchBar(this);\n        this.init();\n    }\n    init() {\n        this.props = {\n            id: this.id,\n            smoothCorners: true,\n            cornerRadius: 6,\n            bgcolor: $color(\"#EEF1F1\", \"#212121\")\n        };\n        this.views = [\n            {\n                type: \"input\",\n                props: {\n                    id: this.id + \"-input\",\n                    type: this.kbType,\n                    bgcolor: $color(\"clear\"),\n                    placeholder: this.placeholder\n                },\n                layout: $layout.fill,\n                events: {\n                    changed: (sender)=>this.controller.callEvent(\"onChange\", sender.text)\n                }\n            }\n        ];\n        this.layout = (make, view)=>{\n            make.height.equalTo(this.height);\n            make.top.equalTo(view.super.safeArea).offset(this.topOffset);\n            make.left.equalTo(view.super.safeArea).offset(15);\n            make.right.equalTo(view.super.safeArea).offset(-15);\n        };\n    }\n    setPlaceholder(placeholder) {\n        this.placeholder = placeholder;\n        return this;\n    }\n    setKbType(kbType) {\n        this.kbType = kbType;\n        return this;\n    }\n}\nclass SearchBarController extends Controller {\n    setSearchBar(searchBar) {\n        this.searchBar = searchBar;\n        return this;\n    }\n    updateSelector() {\n        this.selector = {\n            inputBox: $(this.searchBar.id),\n            input: $(this.searchBar.id + \"-input\")\n        };\n    }\n    hide() {\n        this.updateSelector();\n        this.selector.inputBox.updateLayout((make)=>{\n            make.height.equalTo(0);\n        });\n    }\n    show() {\n        this.updateSelector();\n        this.selector.inputBox.updateLayout((make)=>{\n            make.height.equalTo(this.searchBar.height);\n        });\n    }\n    didScroll(contentOffset) {\n        this.updateSelector();\n        // 调整大小\n        let height = this.searchBar.height - contentOffset;\n        height = height > 0 ? height > this.searchBar.height ? this.searchBar.height : height : 0;\n        this.selector.inputBox.updateLayout((make)=>{\n            make.height.equalTo(height);\n        });\n        // 隐藏内容\n        if (contentOffset > 0) {\n            const alpha = (this.searchBar.height / 2 - 5 - contentOffset) / 10;\n            this.selector.input.alpha = alpha;\n        } else this.selector.input.alpha = 1;\n    }\n    didEndDragging(contentOffset, decelerate, scrollToOffset, zeroOffset) {\n        this.updateSelector();\n        if (contentOffset >= 0 && contentOffset <= this.searchBar.height) scrollToOffset($point(0, contentOffset >= this.searchBar.height / 2 ? this.searchBar.height - zeroOffset : -zeroOffset));\n    }\n}\nclass NavigationItem {\n    static largeTitleDisplayModeAutomatic = 0;\n    static largeTitleDisplayModeAlways = 1;\n    static largeTitleDisplayModeNever = 2;\n    rightButtons = [];\n    leftButtons = [];\n    hasbutton = false;\n    largeTitleDisplayMode = NavigationItem.largeTitleDisplayModeAutomatic;\n    largeTitleHeightOffset = 20;\n    isPinTitleView = false;\n    setTitle(title4) {\n        this.title = title4;\n        return this;\n    }\n    setTitleView(titleView) {\n        this.titleView = titleView;\n        return this;\n    }\n    pinTitleView() {\n        this.isPinTitleView = true;\n        return this;\n    }\n    setLargeTitleDisplayMode(mode) {\n        this.largeTitleDisplayMode = mode;\n        return this;\n    }\n    setFixedFooterView(fixedFooterView) {\n        this.fixedFooterView = fixedFooterView;\n        return this;\n    }\n    setBackgroundColor(backgroundColor) {\n        this.backgroundColor = backgroundColor;\n        return this;\n    }\n    /**\r\n     *\r\n     * @param {BarButtonItemProperties[]} buttons\r\n     * @returns {this}\r\n     */ setRightButtons(buttons) {\n        buttons.forEach((button)=>this.addRightButton(button)\n        );\n        if (!this.hasbutton) this.hasbutton = true;\n        return this;\n    }\n    /**\r\n     *\r\n     * @param {BarButtonItemProperties[]} buttons\r\n     * @returns {this}\r\n     */ setLeftButtons(buttons) {\n        buttons.forEach((button)=>this.addLeftButton(button)\n        );\n        if (!this.hasbutton) this.hasbutton = true;\n        return this;\n    }\n    /**\r\n     *\r\n     * @param {BarButtonItemProperties} param0\r\n     * @returns {this}\r\n     */ addRightButton({ symbol , title: title5 , tapped , menu , events  }) {\n        this.rightButtons.push(BarButtonItem.creat({\n            symbol,\n            title: title5,\n            tapped,\n            menu,\n            events,\n            align: UIKit.align.right\n        }).definition);\n        if (!this.hasbutton) this.hasbutton = true;\n        return this;\n    }\n    /**\r\n     *\r\n     * @param {BarButtonItemProperties} param0\r\n     * @returns {this}\r\n     */ addLeftButton({ symbol , title: title6 , tapped , menu , events  }) {\n        this.leftButtons.push(BarButtonItem.creat({\n            symbol,\n            title: title6,\n            tapped,\n            menu,\n            events,\n            align: UIKit.align.left\n        }).definition);\n        if (!this.hasbutton) this.hasbutton = true;\n        return this;\n    }\n    /**\r\n     * 覆盖左侧按钮\r\n     * @param {string} parent 父页面标题，将会显示为文本按钮\r\n     * @param {Object} view 自定义按钮视图\r\n     * @returns {this}\r\n     */ addPopButton(parent, view1) {\n        if (!parent) parent = $l10n(\"BACK\");\n        this.popButtonView = view1 ?? {\n            // 返回按钮\n            type: \"button\",\n            props: {\n                bgcolor: $color(\"clear\"),\n                symbol: \"chevron.left\",\n                tintColor: UIKit.linkColor,\n                title: ` ${parent}`,\n                titleColor: UIKit.linkColor,\n                font: $font(\"bold\", 16)\n            },\n            layout: (make, view)=>{\n                make.left.equalTo(view.super.safeArea).offset(BarButtonItem.edges);\n                make.centerY.equalTo(view.super.safeArea);\n            },\n            events: {\n                tapped: ()=>{\n                    $ui.pop();\n                }\n            }\n        };\n        return this;\n    }\n    removePopButton() {\n        this.popButtonView = undefined;\n        return this;\n    }\n}\nclass NavigationBar extends View {\n    static pageSheetNavigationBarHeight = 56;\n    prefersLargeTitles = true;\n    largeTitleFontSize = 34;\n    largeTitleFontFamily = \"bold\";\n    largeTitleFontHeight = $text.sizeThatFits({\n        text: \"A\",\n        width: 100,\n        font: $font(this.largeTitleFontFamily, this.largeTitleFontSize)\n    }).height;\n    navigationBarTitleFontSize = 17;\n    addStatusBarHeight = true;\n    contentViewHeightOffset = 10;\n    navigationBarNormalHeight = UIKit.NavigationBarNormalHeight;\n    navigationBarLargeTitleHeight = UIKit.NavigationBarLargeTitleHeight;\n    pageSheetMode() {\n        this.navigationBarLargeTitleHeight -= this.navigationBarNormalHeight;\n        this.navigationBarNormalHeight = NavigationBar.pageSheetNavigationBarHeight;\n        this.navigationBarLargeTitleHeight += this.navigationBarNormalHeight;\n        this.addStatusBarHeight = false;\n        return this;\n    }\n    withStatusBarHeight() {\n        this.addStatusBarHeight = true;\n        return this;\n    }\n    withoutStatusBarHeight() {\n        this.addStatusBarHeight = false;\n        return this;\n    }\n    setNavigationItem(navigationItem) {\n        this.navigationItem = navigationItem;\n    }\n    setBackgroundColor(backgroundColor) {\n        this.backgroundColor = backgroundColor;\n        return this;\n    }\n    setPrefersLargeTitles(bool) {\n        this.prefersLargeTitles = bool;\n        return this;\n    }\n    setContentViewHeightOffset(offset) {\n        this.contentViewHeightOffset = offset;\n        return this;\n    }\n    /**\r\n     * 页面大标题\r\n     */ getLargeTitleView() {\n        return this.prefersLargeTitles && this.navigationItem.largeTitleDisplayMode !== NavigationItem.largeTitleDisplayModeNever ? {\n            type: \"label\",\n            props: {\n                id: this.id + \"-large-title\",\n                text: this.navigationItem.title,\n                textColor: UIKit.textColor,\n                align: $align.left,\n                font: $font(this.largeTitleFontFamily, this.largeTitleFontSize),\n                line: 1\n            },\n            layout: (make, view)=>{\n                make.left.equalTo(view.super.safeArea).offset(15);\n                make.height.equalTo(this.largeTitleFontHeight);\n                make.top.equalTo(view.super.safeAreaTop).offset(this.navigationBarNormalHeight);\n            }\n        } : {\n        };\n    }\n    getNavigationBarView() {\n        const getButtonView = (buttons, align)=>{\n            return buttons.length > 0 ? {\n                type: \"view\",\n                views: [\n                    {\n                        type: \"view\",\n                        views: buttons,\n                        layout: $layout.fill\n                    }\n                ],\n                layout: (make, view)=>{\n                    make.top.equalTo(view.super.safeAreaTop);\n                    make.bottom.equalTo(view.super.safeAreaTop).offset(this.navigationBarNormalHeight);\n                    if (align === UIKit.align.left) make.left.equalTo(view.super.safeArea);\n                    else make.right.equalTo(view.super.safeArea);\n                    make.width.equalTo(buttons.length * BarButtonItem.size.width);\n                }\n            } : {\n            };\n        };\n        const rightButtonView = getButtonView(this.navigationItem.rightButtons, UIKit.align.right);\n        const leftButtonView = this.navigationItem.popButtonView ?? getButtonView(this.navigationItem.leftButtons, UIKit.align.left);\n        const isHideBackground = this.prefersLargeTitles;\n        const isHideTitle = !this.prefersLargeTitles || this.navigationItem.largeTitleDisplayMode === NavigationItem.largeTitleDisplayModeNever;\n        return {\n            // 顶部 bar\n            type: \"view\",\n            props: {\n                id: this.id + \"-navigation\",\n                bgcolor: $color(\"clear\")\n            },\n            layout: (make, view)=>{\n                make.left.top.right.inset(0);\n                make.bottom.equalTo(view.super.safeAreaTop).offset(this.navigationBarNormalHeight);\n            },\n            views: [\n                this.backgroundColor ? {\n                    type: \"view\",\n                    props: {\n                        hidden: isHideBackground,\n                        bgcolor: this.backgroundColor,\n                        id: this.id + \"-background\"\n                    },\n                    layout: $layout.fill\n                } : UIKit.blurBox({\n                    hidden: isHideBackground,\n                    id: this.id + \"-background\"\n                }),\n                UIKit.separatorLine({\n                    id: this.id + \"-underline\",\n                    alpha: isHideBackground ? 0 : 1\n                }),\n                {\n                    type: \"view\",\n                    props: {\n                        hidden: true,\n                        bgcolor: $color(\"clear\"),\n                        id: this.id + \"-large-title-mask\"\n                    },\n                    layout: $layout.fill\n                },\n                {\n                    // 标题\n                    type: \"label\",\n                    props: {\n                        id: this.id + \"-small-title\",\n                        alpha: isHideTitle ? 1 : 0,\n                        text: this.navigationItem.title,\n                        font: $font(this.largeTitleFontFamily, this.navigationBarTitleFontSize),\n                        align: $align.center,\n                        bgcolor: $color(\"clear\"),\n                        textColor: UIKit.textColor\n                    },\n                    layout: (make, view)=>{\n                        make.left.right.inset(0);\n                        make.height.equalTo(20);\n                        make.centerY.equalTo(view.super.safeArea);\n                    }\n                }\n            ].concat(rightButtonView, leftButtonView)\n        };\n    }\n}\nclass NavigationController extends Controller {\n    static largeTitleViewSmallMode = 0;\n    static largeTitleViewLargeMode = 1;\n    navigationBar = new NavigationBar();\n    largeTitleScrollTrigger = this.navigationBar.navigationBarNormalHeight;\n    updateSelector() {\n        this.selector = {\n            navigation: $(this.navigationBar.id + \"-navigation\"),\n            largeTitleView: $(this.navigationBar.id + \"-large-title\"),\n            smallTitleView: $(this.navigationBar.id + \"-small-title\"),\n            underlineView: this.navigationBar?.navigationItem?.isPinTitleView ? $(this.navigationBar.id + \"-title-view-underline\") : $(this.navigationBar.id + \"-underline\"),\n            largeTitleMaskView: $(this.navigationBar.id + \"-large-title-mask\"),\n            backgroundView: $(this.navigationBar.id + \"-background\"),\n            titleViewBackgroundView: $(this.navigationBar.id + \"-title-view-background\")\n        };\n    }\n    toNormal(permanent = true) {\n        this.updateSelector();\n        $ui.animate({\n            duration: 0.2,\n            animation: ()=>{\n                // 显示下划线和背景\n                this.selector.underlineView.alpha = 1;\n                this.selector.backgroundView.hidden = false;\n                // 隐藏大标题，显示小标题\n                this.selector.smallTitleView.alpha = 1;\n                this.selector.largeTitleView.alpha = 0;\n            }\n        });\n        if (permanent && this.navigationBar?.navigationItem) this.navigationBar.navigationItem.largeTitleDisplayMode = NavigationItem.largeTitleDisplayModeNever;\n    }\n    toLargeTitle(permanent = true) {\n        this.updateSelector();\n        this.selector.underlineView.alpha = 0;\n        this.selector.backgroundView.hidden = true;\n        $ui.animate({\n            duration: 0.2,\n            animation: ()=>{\n                this.selector.smallTitleView.alpha = 0;\n                this.selector.largeTitleView.alpha = 1;\n            }\n        });\n        if (permanent && this.navigationBar?.navigationItem) this.navigationBar.navigationItem.largeTitleDisplayMode = NavigationItem.largeTitleDisplayModeAlways;\n    }\n     #changeLargeTitleView(largeTitleViewMode) {\n        const isSmallMode = largeTitleViewMode === NavigationController.largeTitleViewSmallMode;\n        $ui.animate({\n            duration: 0.2,\n            animation: ()=>{\n                // 隐藏大标题，显示小标题\n                this.selector.smallTitleView.alpha = isSmallMode ? 1 : 0;\n                this.selector.largeTitleView.alpha = isSmallMode ? 0 : 1;\n            }\n        });\n    }\n     #largeTitleScrollAction(contentOffset) {\n        const titleSizeMax = 40 // 下拉放大字体最大值\n        ;\n        // 标题跟随\n        this.selector.largeTitleView.updateLayout((make, view)=>{\n            if (this.navigationBar.navigationBarNormalHeight - contentOffset > 0) // 标题上移致隐藏后停止移动\n            make.top.equalTo(view.super.safeAreaTop).offset(this.navigationBar.navigationBarNormalHeight - contentOffset);\n            else make.top.equalTo(view.super.safeAreaTop).offset(0);\n        });\n        if (contentOffset > 0) {\n            if (contentOffset >= this.largeTitleScrollTrigger) this.#changeLargeTitleView(NavigationController.largeTitleViewSmallMode);\n            else this.#changeLargeTitleView(NavigationController.largeTitleViewLargeMode);\n        } else {\n            // 切换模式\n            this.#changeLargeTitleView(NavigationController.largeTitleViewLargeMode);\n            // 下拉放大字体\n            let size = this.navigationBar.largeTitleFontSize - contentOffset * 0.04;\n            if (size > titleSizeMax) size = titleSizeMax;\n            this.selector.largeTitleView.font = $font(this.navigationBar.largeTitleFontFamily, size);\n        }\n    }\n     #navigationBarScrollAction(contentOffset1) {\n        if (this.navigationBar?.navigationItem?.isPinTitleView) {\n            // titleView 背景\n            if (this.navigationBar.navigationBarNormalHeight - contentOffset1 > 0) this.selector.titleViewBackgroundView.hidden = true;\n            else this.selector.titleViewBackgroundView.hidden = false;\n        }\n        let trigger = this.navigationBar.navigationItem.largeTitleDisplayMode === NavigationItem.largeTitleDisplayModeNever ? 5 : this.largeTitleScrollTrigger;\n        if (contentOffset1 > trigger) {\n            // 隐藏遮罩\n            this.selector.largeTitleMaskView.hidden = true;\n            $ui.animate({\n                duration: 0.2,\n                animation: ()=>{\n                    // 显示下划线和背景\n                    this.selector.underlineView.alpha = 1;\n                    this.selector.backgroundView.hidden = false;\n                }\n            });\n        } else {\n            const contentViewBackgroundColor = this.selector.largeTitleView?.prev.bgcolor;\n            this.selector.largeTitleMaskView.bgcolor = contentViewBackgroundColor;\n            this.selector.largeTitleMaskView.hidden = false;\n            // 隐藏背景\n            this.selector.underlineView.alpha = 0;\n            this.selector.backgroundView.hidden = true;\n        }\n    }\n    didScroll(contentOffset2) {\n        if (!this.navigationBar.prefersLargeTitles) return;\n        const largeTitleDisplayMode = this.navigationBar?.navigationItem.largeTitleDisplayMode;\n        if (largeTitleDisplayMode === NavigationItem.largeTitleDisplayModeAlways) return;\n        this.updateSelector();\n        if (largeTitleDisplayMode === NavigationItem.largeTitleDisplayModeAutomatic) {\n            if (!this.navigationBar?.navigationItem?.isPinTitleView) {\n                // titleView didScroll\n                this.navigationBar?.navigationItem?.titleView?.controller.didScroll(contentOffset2);\n                // 在 titleView 折叠前锁住主要视图\n                if (contentOffset2 > 0) {\n                    const height = this.navigationBar?.navigationItem?.titleView?.height ?? 0;\n                    contentOffset2 -= height;\n                    if (contentOffset2 < 0) contentOffset2 = 0;\n                }\n            }\n            this.#largeTitleScrollAction(contentOffset2);\n            this.#navigationBarScrollAction(contentOffset2);\n        } else if (largeTitleDisplayMode === NavigationItem.largeTitleDisplayModeNever) this.#navigationBarScrollAction(contentOffset2);\n    }\n    didEndDragging(contentOffset3, decelerate, scrollToOffset, zeroOffset) {\n        if (!this.navigationBar.prefersLargeTitles) return;\n        const largeTitleDisplayMode = this.navigationBar?.navigationItem.largeTitleDisplayMode;\n        if (largeTitleDisplayMode === NavigationItem.largeTitleDisplayModeAlways) return;\n        this.updateSelector();\n        if (largeTitleDisplayMode === NavigationItem.largeTitleDisplayModeAutomatic) {\n            let titleViewHeight = 0;\n            if (!this.navigationBar?.navigationItem?.isPinTitleView) {\n                // titleView didEndDragging\n                this.navigationBar?.navigationItem?.titleView?.controller.didEndDragging(contentOffset3, decelerate, scrollToOffset, zeroOffset);\n                titleViewHeight = this.navigationBar?.navigationItem?.titleView?.height ?? 0;\n                contentOffset3 -= titleViewHeight;\n            }\n            if (contentOffset3 >= 0 && contentOffset3 <= this.navigationBar.largeTitleFontHeight) scrollToOffset($point(0, contentOffset3 >= this.navigationBar.largeTitleFontHeight / 2 ? this.navigationBar.navigationBarNormalHeight + titleViewHeight - zeroOffset : titleViewHeight - zeroOffset));\n        }\n    }\n}\nclass FixedFooterView extends View {\n    height = 60;\n    getView() {\n        this.type = \"view\";\n        this.setProp(\"bgcolor\", UIKit.primaryViewBackgroundColor);\n        this.layout = (make, view)=>{\n            make.left.right.bottom.equalTo(view.super);\n            make.top.equalTo(view.super.safeAreaBottom).offset(-this.height);\n        };\n        this.views = [\n            View.create({\n                props: this.props,\n                views: this.views,\n                layout: (make, view)=>{\n                    make.left.right.top.equalTo(view.super);\n                    make.height.equalTo(this.height);\n                }\n            })\n        ];\n        return this;\n    }\n}\nclass PageView extends View {\n    constructor(args = {\n    }){\n        super(args);\n        this.activeStatus = true;\n    }\n    show() {\n        $(this.props.id).hidden = false;\n        this.activeStatus = true;\n    }\n    hide() {\n        $(this.props.id).hidden = true;\n        this.activeStatus = false;\n    }\n    setHorizontalSafeArea(bool) {\n        this.horizontalSafeArea = bool;\n        return this;\n    }\n     #layout(make, view) {\n        make.top.bottom.equalTo(view.super);\n        if (this.horizontalSafeArea) make.left.right.equalTo(view.super.safeArea);\n        else make.left.right.equalTo(view.super);\n    }\n    getView() {\n        this.layout = this.#layout;\n        this.props.clipsToBounds = true;\n        this.props.hidden = !this.activeStatus;\n        return super.getView();\n    }\n}\nclass PageControllerViewTypeError extends ValidationError {\n    constructor(parameter, type){\n        super(parameter, type);\n        this.name = \"PageControllerViewTypeError\";\n    }\n}\nclass PageController extends Controller {\n    page;\n    navigationItem = new NavigationItem();\n    navigationController = new NavigationController();\n    constructor(){\n        super();\n        this.navigationController.navigationBar.setNavigationItem(this.navigationItem);\n    }\n    /**\r\n     *\r\n     * @param {Object} view\r\n     * @returns {this}\r\n     */ setView(view2) {\n        if (typeof view2 !== \"object\") throw new PageControllerViewTypeError(\"view\", \"object\");\n        this.view = View.create(view2);\n        return this;\n    }\n    bindScrollEvents() {\n        if (!(this.view instanceof View)) throw new PageControllerViewTypeError(\"view\", \"View\");\n        // 计算偏移高度\n        let height = this.navigationController.navigationBar.contentViewHeightOffset;\n        if (this.navigationItem.titleView) {\n            height += this.navigationItem.titleView.topOffset;\n            height += this.navigationItem.titleView.height;\n            height += this.navigationItem.titleView.bottomOffset;\n        }\n        if (this.view.props.stickyHeader) height += this.navigationController.navigationBar.largeTitleFontHeight;\n        else if (this.navigationItem.largeTitleDisplayMode === NavigationItem.largeTitleDisplayModeNever) height += this.navigationController.navigationBar.navigationBarNormalHeight;\n        else height += this.navigationController.navigationBar.navigationBarLargeTitleHeight;\n        // 修饰视图顶部偏移\n        if (this.view.props.header) this.view.props.header = {\n            type: \"view\",\n            props: {\n                height: height + (this.view.props.header?.props?.height ?? 0)\n            },\n            views: [\n                {\n                    type: \"view\",\n                    props: {\n                        clipsToBounds: true\n                    },\n                    views: [\n                        this.view.props.header\n                    ],\n                    layout: (make1, view3)=>{\n                        make1.top.inset(height);\n                        make1.height.equalTo(this.view.props.header?.props?.height ?? 0);\n                        make1.width.equalTo(view3.super);\n                    }\n                }\n            ]\n        };\n        else this.view.props.header = {\n            props: {\n                height: height\n            }\n        };\n        // 修饰视图底部偏移\n        if (!this.view.props.footer) this.view.props.footer = {\n        };\n        this.view.props.footer.props = Object.assign(this.view.props.footer.props ?? {\n        }, {\n            height: (this.navigationItem.fixedFooterView?.height ?? 0) + (this.view.props.footer.props?.height ?? 0)\n        });\n        // 重写布局\n        if (UIKit.scrollViewList.indexOf(this.view.type) === -1) // 非滚动视图\n        this.view.layout = (make2, view4)=>{\n            make2.left.right.equalTo(view4.super.safeArea);\n            make2.bottom.equalTo(view4.super);\n            let topOffset = this.navigationController.navigationBar.contentViewHeightOffset;\n            if (this.navigationItem.largeTitleDisplayMode !== NavigationItem.largeTitleDisplayModeNever) topOffset += this.navigationController.navigationBar.largeTitleFontHeight;\n            if (this.navigationItem.titleView) topOffset += this.navigationItem.titleView.topOffset + this.navigationItem.titleView.bottomOffset;\n            if ((!UIKit.isHorizontal || UIKit.isLargeScreen) && this.navigationController.navigationBar.addStatusBarHeight) topOffset += UIKit.statusBarHeight;\n            make2.top.equalTo(this.navigationController.navigationBar.navigationBarNormalHeight + topOffset);\n        };\n        else {\n            // indicatorInsets\n            const pinTitleViewOffset = this.navigationItem.isPinTitleView ? this.navigationItem.titleView.height + this.navigationItem.titleView.bottomOffset + this.navigationController.navigationBar.contentViewHeightOffset : 0;\n            if (this.view.props.indicatorInsets) {\n                const old = this.view.props.indicatorInsets;\n                this.view.props.indicatorInsets = $insets(old.top + this.navigationController.navigationBar.navigationBarNormalHeight + pinTitleViewOffset, old.left, old.bottom + (this.navigationItem.fixedFooterView?.height ?? 0), old.right);\n            } else this.view.props.indicatorInsets = $insets(this.navigationController.navigationBar.navigationBarNormalHeight + pinTitleViewOffset, 0, this.navigationItem.fixedFooterView?.height ?? 0, 0);\n            // layout\n            this.view.layout = (make3, view5)=>{\n                if (this.view.props.stickyHeader) make3.top.equalTo(view5.super.safeArea).offset(this.navigationController.navigationBar.navigationBarNormalHeight);\n                else make3.top.equalTo(view5.super);\n                make3.left.right.equalTo(view5.super.safeArea);\n                make3.bottom.equalTo(view5.super);\n            };\n            // 重写滚动事件\n            this.view.assignEvent(\"didScroll\", (sender)=>{\n                let contentOffset4 = sender.contentOffset.y;\n                if ((!UIKit.isHorizontal || UIKit.isLargeScreen) && this.navigationController.navigationBar.addStatusBarHeight && !this.view.props.stickyHeader) contentOffset4 += UIKit.statusBarHeight;\n                this.navigationController.didScroll(contentOffset4);\n            }).assignEvent(\"didEndDragging\", (sender, decelerate)=>{\n                let contentOffset5 = sender.contentOffset.y;\n                let zeroOffset = 0;\n                if ((!UIKit.isHorizontal || UIKit.isLargeScreen) && this.navigationController.navigationBar.addStatusBarHeight && !this.view.props.stickyHeader) {\n                    contentOffset5 += UIKit.statusBarHeight;\n                    zeroOffset = UIKit.statusBarHeight;\n                }\n                this.navigationController.didEndDragging(contentOffset5, decelerate, (...args)=>sender.scrollToOffset(...args)\n                , zeroOffset);\n            }).assignEvent(\"didEndDecelerating\", (...args)=>{\n                if (args[0].tracking) return;\n                this.view.events?.didEndDragging(...args);\n            });\n        }\n    }\n    initPage() {\n        if (this.navigationController.navigationBar.prefersLargeTitles) {\n            this.bindScrollEvents();\n            let titleView = {\n            };\n            if (this.navigationItem.titleView) {\n                // 修改 titleView 背景与 navigationBar 相同\n                const isHideBackground = this.navigationController.navigationBar.prefersLargeTitles;\n                titleView = View.create({\n                    views: [\n                        this.navigationController.navigationBar.backgroundColor ? {\n                            type: \"view\",\n                            props: {\n                                hidden: isHideBackground,\n                                bgcolor: this.navigationController.navigationBar.backgroundColor,\n                                id: this.navigationController.navigationBar.id + \"-title-view-background\"\n                            },\n                            layout: $layout.fill\n                        } : UIKit.blurBox({\n                            hidden: isHideBackground,\n                            id: this.navigationController.navigationBar.id + \"-title-view-background\"\n                        }),\n                        UIKit.separatorLine({\n                            id: this.navigationController.navigationBar.id + \"-title-view-underline\",\n                            alpha: isHideBackground ? 0 : 1\n                        }),\n                        this.navigationItem.titleView.definition\n                    ],\n                    layout: (make4, view6)=>{\n                        make4.top.equalTo(view6.prev.bottom);\n                        make4.width.equalTo(view6.super);\n                        make4.height.equalTo(this.navigationItem.titleView.topOffset + this.navigationItem.titleView.height + this.navigationItem.titleView.bottomOffset);\n                    }\n                });\n            }\n            // 初始化 PageView\n            this.page = PageView.createByViews([\n                this.view,\n                this.navigationController.navigationBar.getLargeTitleView(),\n                titleView,\n                this.navigationController.navigationBar.getNavigationBarView(),\n                this.navigationItem.fixedFooterView?.definition ?? {\n                }\n            ]);\n        } else this.page = PageView.createByViews([\n            this.view\n        ]);\n        if (this.view.props?.bgcolor) this.page.setProp(\"bgcolor\", this.view.props.bgcolor);\n        else this.page.setProp(\"bgcolor\", UIKit.defaultBackgroundColor(this.view.type));\n        return this;\n    }\n    getPage() {\n        if (!this.page) this.initPage();\n        return this.page;\n    }\n}\nclass TabBarCellView extends View {\n    constructor(args = {\n    }){\n        super(args);\n        this.setIcon(args.icon);\n        this.setTitle(args.title);\n        if (args.activeStatus !== undefined) this.activeStatus = args.activeStatus;\n    }\n    setIcon(icon) {\n        // 格式化单个icon和多个icon\n        if (icon instanceof Array) this.icon = icon;\n        else this.icon = [\n            icon,\n            icon\n        ];\n        return this;\n    }\n    setTitle(title7) {\n        this.title = title7;\n        return this;\n    }\n    active() {\n        $(`${this.props.id}-icon`).image = $image(this.icon[1]);\n        $(`${this.props.id}-icon`).tintColor = $color(\"systemLink\");\n        $(`${this.props.id}-title`).textColor = $color(\"systemLink\");\n        this.activeStatus = true;\n    }\n    inactive() {\n        $(`${this.props.id}-icon`).image = $image(this.icon[0]);\n        $(`${this.props.id}-icon`).tintColor = $color(\"lightGray\");\n        $(`${this.props.id}-title`).textColor = $color(\"lightGray\");\n        this.activeStatus = false;\n    }\n    getView() {\n        this.views = [\n            {\n                type: \"image\",\n                props: {\n                    id: `${this.props.id}-icon`,\n                    image: $image(this.activeStatus ? this.icon[1] : this.icon[0]),\n                    bgcolor: $color(\"clear\"),\n                    tintColor: $color(this.activeStatus ? \"systemLink\" : \"lightGray\")\n                },\n                layout: (make5, view7)=>{\n                    make5.centerX.equalTo(view7.super);\n                    const half = TabBarController.tabBarHeight / 2;\n                    make5.size.equalTo(half);\n                    make5.top.inset((TabBarController.tabBarHeight - half - 13) / 2);\n                }\n            },\n            {\n                type: \"label\",\n                props: {\n                    id: `${this.props.id}-title`,\n                    text: this.title,\n                    font: $font(10),\n                    textColor: $color(this.activeStatus ? \"systemLink\" : \"lightGray\")\n                },\n                layout: (make6, view8)=>{\n                    make6.centerX.equalTo(view8.prev);\n                    make6.top.equalTo(view8.prev.bottom).offset(3);\n                }\n            }\n        ];\n        return this;\n    }\n}\nclass TabBarHeaderView extends View {\n    height = 60;\n    getView() {\n        this.type = \"view\";\n        this.setProp(\"bgcolor\", this.props.bgcolor ?? UIKit.primaryViewBackgroundColor);\n        this.layout = (make7, view9)=>{\n            make7.left.right.bottom.equalTo(view9.super);\n            make7.top.equalTo(view9.super.safeAreaBottom).offset(-this.height - TabBarController.tabBarHeight);\n        };\n        this.views = [\n            View.create({\n                props: this.props,\n                views: this.views,\n                layout: (make8, view10)=>{\n                    make8.left.right.top.equalTo(view10.super);\n                    make8.height.equalTo(this.height);\n                }\n            })\n        ];\n        return this;\n    }\n}\n/**\r\n * @property {function(from: string, to: string)} TabBarController.events.onChange\r\n */ class TabBarController extends Controller {\n    static tabBarHeight = 50;\n    #pages = {\n    };\n    #cells = {\n    };\n    #header;\n    #selected;\n    get selected() {\n        return this.#selected;\n    }\n    set selected(selected) {\n        this.switchPageTo(selected);\n    }\n    get contentOffset() {\n        return TabBarController.tabBarHeight + (this.#header?.height ?? 0);\n    }\n    /**\r\n     *\r\n     * @param {Object} pages\r\n     * @returns {this}\r\n     */ setPages(pages = {\n    }) {\n        Object.keys(pages).forEach((key)=>this.setPage(key, pages[key])\n        );\n        return this;\n    }\n    setPage(key, page) {\n        if (this.#selected === undefined) this.#selected = key;\n        if (page instanceof PageView) this.#pages[key] = page;\n        else this.#pages[key] = PageView.createByViews(page);\n        if (this.#selected !== key) this.#pages[key].activeStatus = false;\n        return this;\n    }\n    switchPageTo(key) {\n        if (this.#pages[key]) {\n            if (this.#selected === key) return;\n            // menu 动画\n            $ui.animate({\n                duration: 0.4,\n                animation: ()=>{\n                    // 点击的图标\n                    this.#cells[key].active();\n                }\n            });\n            // 之前的图标\n            this.#cells[this.#selected].inactive();\n            // 切换页面\n            this.#pages[this.#selected].hide();\n            this.#pages[key].show();\n            this.callEvent(\"onChange\", this.#selected, key);\n            this.#selected = key;\n        }\n    }\n    /**\r\n     *\r\n     * @param {Object} cells\r\n     * @returns {this}\r\n     */ setCells(cells = {\n    }) {\n        Object.keys(cells).forEach((key)=>this.setCell(key, cells[key])\n        );\n        return this;\n    }\n    setCell(key, cell) {\n        if (this.#selected === undefined) this.#selected = key;\n        if (!(cell instanceof TabBarCellView)) cell = new TabBarCellView({\n            props: {\n                info: {\n                    key\n                }\n            },\n            icon: cell.icon,\n            title: cell.title,\n            activeStatus: this.#selected === key\n        });\n        this.#cells[key] = cell;\n        return this;\n    }\n    setHeader(view11) {\n        this.#header = view11;\n        return this;\n    }\n     #cellViews() {\n        const views = [];\n        Object.values(this.#cells).forEach((cell)=>{\n            cell.setEvent(\"tapped\", (sender)=>{\n                const key = sender.info.key;\n                // 切换页面\n                this.switchPageTo(key);\n            });\n            views.push(cell.getView());\n        });\n        return views;\n    }\n     #pageViews() {\n        return Object.values(this.#pages).map((page)=>{\n            const view12 = page.definition;\n            if (UIKit.scrollViewList.indexOf(view12.views[0].type) > -1) {\n                if (view12.views[0].props === undefined) view12.views[0].props = {\n                };\n                // indicatorInsets\n                if (view12.views[0].props.indicatorInsets) {\n                    const old = view12.views[0].props.indicatorInsets;\n                    view12.views[0].props.indicatorInsets = $insets(old.top, old.left, old.bottom + this.contentOffset, old.right);\n                } else view12.views[0].props.indicatorInsets = $insets(0, 0, 0, this.contentOffset);\n                // footer\n                if (view12.views[0].footer === undefined) view12.views[0].footer = {\n                    props: {\n                    }\n                };\n                else if (view12.views[0].footer.props === undefined) view12.views[0].footer.props = {\n                };\n                if (view12.views[0].props.footer.props.height) view12.views[0].props.footer.props.height += this.contentOffset;\n                else view12.views[0].props.footer.props.height = this.contentOffset;\n            }\n            return view12;\n        });\n    }\n    generateView() {\n        const tabBarView = {\n            type: \"view\",\n            layout: (make9, view13)=>{\n                make9.centerX.equalTo(view13.super);\n                make9.width.equalTo(view13.super);\n                make9.top.equalTo(view13.super.safeAreaBottom).offset(-TabBarController.tabBarHeight);\n                make9.bottom.equalTo(view13.super);\n            },\n            views: [\n                UIKit.blurBox({\n                }, [\n                    {\n                        type: \"stack\",\n                        layout: $layout.fillSafeArea,\n                        props: {\n                            axis: $stackViewAxis.horizontal,\n                            distribution: $stackViewDistribution.fillEqually,\n                            spacing: 0,\n                            stack: {\n                                views: this.#cellViews()\n                            }\n                        }\n                    }\n                ]),\n                UIKit.separatorLine({\n                }, UIKit.align.top)\n            ]\n        };\n        return View.createByViews(this.#pageViews().concat(this.#header?.definition ?? [], tabBarView));\n    }\n}\nclass Kernel {\n    startTime = Date.now();\n    version = VERSION;\n    // 隐藏 jsbox 默认 nav 栏\n    isUseJsboxNav = false;\n    constructor(){\n        if ($app.isDebugging) this.debug();\n    }\n    uuid() {\n        return uuid();\n    }\n    l10n(language, content, override = true) {\n        l10n(language, content, override);\n    }\n    debug(print, error) {\n        this.debugMode = true;\n        $app.idleTimerDisabled = true;\n        if (typeof print === \"function\") this.debugPrint = print;\n        if (typeof error === \"function\") this.debugError = error;\n        this.print(\"You are running EasyJsBox in debug mode.\");\n    }\n    print(message) {\n        if (!this.debugMode) return;\n        if (typeof this.debugPrint === \"function\") this.debugPrint(message);\n        else console.log(message);\n    }\n    error(error) {\n        if (!this.debugMode) return;\n        if (typeof this.debugError === \"function\") this.debugError(error);\n        else console.error(error);\n    }\n    useJsboxNav() {\n        this.isUseJsboxNav = true;\n        return this;\n    }\n    setTitle(title8) {\n        if (this.isUseJsboxNav) $ui.title = title8;\n        this.title = title8;\n    }\n    setNavButtons(buttons) {\n        this.navButtons = buttons;\n    }\n    UIRender(view14) {\n        try {\n            view14.props = Object.assign({\n                title: this.title,\n                navBarHidden: !this.isUseJsboxNav,\n                navButtons: this.navButtons ?? [],\n                statusBarStyle: 0\n            }, view14.props);\n            if (!view14.events) view14.events = {\n            };\n            const oldLayoutSubviews = view14.events.layoutSubviews;\n            view14.events.layoutSubviews = ()=>{\n                $app.notify({\n                    name: \"interfaceOrientationEvent\",\n                    object: {\n                        statusBarOrientation: UIKit.statusBarOrientation,\n                        isHorizontal: UIKit.isHorizontal\n                    }\n                });\n                if (typeof oldLayoutSubviews === \"function\") oldLayoutSubviews();\n            };\n            $ui.render(view14);\n        } catch (error) {\n            this.print(error);\n        }\n    }\n    async checkUpdate(callback) {\n        const branche = \"master\" // 更新版本，可选 master, dev\n        ;\n        const res = await $http.get(`https://raw.githubusercontent.com/ipuppet/EasyJsBox/${branche}/src/easy-jsbox.js`);\n        if (res.error) throw res.error;\n        const firstLine = res.data.split(\"\\n\")[0];\n        const latestVersion = firstLine.slice(16).replaceAll('\"', \"\");\n        if (versionCompare(latestVersion, VERSION) > 0) {\n            if (typeof callback === \"function\") callback(res.data);\n        }\n    }\n}\nclass UILoading {\n    #labelId;\n    text = \"\";\n    interval;\n    fullScreen = false;\n    #loop = ()=>{\n    };\n    constructor(){\n        this.#labelId = uuid();\n    }\n    updateText(text) {\n        $(this.#labelId).text = text;\n    }\n    setLoop(loop) {\n        if (typeof loop !== \"function\") throw \"loop must be a function\";\n        this.#loop = loop;\n    }\n    done() {\n        clearInterval(this.interval);\n    }\n    load() {\n        $ui.render({\n            props: {\n                navBarHidden: this.fullScreen\n            },\n            views: [\n                {\n                    type: \"spinner\",\n                    props: {\n                        loading: true\n                    },\n                    layout: (make10, view15)=>{\n                        make10.centerY.equalTo(view15.super).offset(-15);\n                        make10.width.equalTo(view15.super);\n                    }\n                },\n                {\n                    type: \"label\",\n                    props: {\n                        id: this.#labelId,\n                        align: $align.center,\n                        text: \"\"\n                    },\n                    layout: (make11, view16)=>{\n                        make11.top.equalTo(view16.prev.bottom).offset(10);\n                        make11.left.right.equalTo(view16.super);\n                    }\n                }\n            ],\n            layout: $layout.fill,\n            events: {\n                appeared: ()=>{\n                    this.interval = setInterval(()=>{\n                        this.#loop();\n                    }, 100);\n                }\n            }\n        });\n    }\n}\nclass FileStorageParameterError extends Error {\n    constructor(parameter){\n        super(`Parameter [${parameter}] is required.`);\n        this.name = \"FileStorageParameterError\";\n    }\n}\nclass FileStorageFileNotFoundError extends Error {\n    constructor(filePath){\n        super(`File not found: ${filePath}`);\n        this.name = \"FileStorageFileNotFoundError\";\n    }\n}\nclass FileStorage {\n    basePath;\n    constructor({ basePath =\"storage\"  } = {\n    }){\n        this.basePath = basePath;\n        this.#createDirectory(this.basePath);\n    }\n     #createDirectory(path) {\n        if (!$file.isDirectory(path)) $file.mkdir(path);\n    }\n     #filePath(path1 = \"\", fileName) {\n        path1 = `${this.basePath}/${path1.trim(\"/\")}`.trim(\"/\");\n        this.#createDirectory(path1);\n        path1 = `${path1}/${fileName}`;\n        return path1;\n    }\n    write(path2 = \"\", fileName1, data) {\n        if (!fileName1) throw new FileStorageParameterError(\"fileName\");\n        if (!data) throw new FileStorageParameterError(\"data\");\n        return $file.write({\n            data: data,\n            path: this.#filePath(path2, fileName1)\n        });\n    }\n    writeSync(path3 = \"\", fileName2, data) {\n        return new Promise((resolve, reject)=>{\n            try {\n                const success = this.write(path3, fileName2, data);\n                if (success) resolve(success);\n                else reject(success);\n            } catch (error) {\n                reject(error);\n            }\n        });\n    }\n    exists(path4 = \"\", fileName3) {\n        if (!fileName3) throw new FileStorageParameterError(\"fileName\");\n        path4 = this.#filePath(path4, fileName3);\n        if ($file.exists(path4)) return path4;\n        return false;\n    }\n    read(path5 = \"\", fileName4) {\n        if (!fileName4) throw new FileStorageParameterError(\"fileName\");\n        path5 = this.#filePath(path5, fileName4);\n        if (!$file.exists(path5)) throw new FileStorageFileNotFoundError(path5);\n        if ($file.isDirectory(path5)) return $file.list(path5);\n        return $file.read(path5);\n    }\n    readSync(path6 = \"\", fileName5) {\n        return new Promise((resolve, reject)=>{\n            try {\n                const file = this.read(path6, fileName5);\n                if (file) resolve(file);\n                else reject();\n            } catch (error) {\n                reject(error);\n            }\n        });\n    }\n    readAsJSON(path7 = \"\", fileName6, _default = null) {\n        try {\n            const fileString = this.read(path7, fileName6)?.string;\n            return JSON.parse(fileString);\n        } catch (error) {\n            return _default;\n        }\n    }\n    static readFromRoot(path8) {\n        if (!path8) throw new FileStorageParameterError(\"path\");\n        if (!$file.exists(path8)) throw new FileStorageFileNotFoundError(path8);\n        if ($file.isDirectory(path8)) return $file.list(path8);\n        return $file.read(path8);\n    }\n    static readFromRootSync(path9 = \"\") {\n        return new Promise((resolve, reject)=>{\n            try {\n                const file = FileStorage.readFromRoot(path9);\n                if (file) resolve(file);\n                else reject();\n            } catch (error) {\n                reject(error);\n            }\n        });\n    }\n    static readFromRootAsJSON(path10 = \"\", _default = null) {\n        try {\n            const fileString = FileStorage.readFromRoot(path10)?.string;\n            return JSON.parse(fileString);\n        } catch (error) {\n            return _default;\n        }\n    }\n    delete(path11 = \"\", fileName7 = \"\") {\n        return $file.delete(this.#filePath(path11, fileName7));\n    }\n}\nclass SettingLoadConfigError extends Error {\n    constructor(){\n        super(\"Call loadConfig() first.\");\n        this.name = \"SettingLoadConfigError\";\n    }\n}\nclass SettingReadonlyError extends Error {\n    constructor(){\n        super(\"Attempted to assign to readonly property.\");\n        this.name = \"SettingReadonlyError\";\n    }\n}\n/**\r\n * @property {function(key: string, value: any)} Setting.events.onSet 键值发生改变\r\n * @property {function(view: Object,title: string)} Setting.events.onChildPush 进入的子页面\r\n */ class Setting extends Controller {\n    name;\n    // 存储数据\n    setting = {\n    };\n    // 初始用户数据，若未定义则尝试从给定的文件读取\n    userData;\n    // fileStorage\n    fileStorage;\n    imagePath;\n    // 用来控制 child 类型\n    viewController = new ViewController();\n    // 用于存放 script 类型用到的方法\n    method = {\n    };\n    // style\n    rowHeight = 50;\n    edgeOffset = 10;\n    iconSize = 30;\n    // withTouchEvents 延时自动关闭高亮，防止 touchesMoved 事件未正常调用\n    #withTouchEventsT = {\n    };\n    // read only\n    #readonly = false;\n    // 判断是否已经加载数据加载\n    #loadConfigStatus = false;\n    #footer;\n    /**\r\n     *\r\n     * @param {Object} args\r\n     * @param {Function} args.set 自定义 set 方法，定义后将忽略 fileStorage 和 dataFile\r\n     * @param {Function} args.get 自定义 get 方法，定义后将忽略 fileStorage 和 dataFile\r\n     * @param {Object} args.userData 初始用户数据，定义后将忽略 fileStorage 和 dataFile\r\n     * @param {FileStorage} args.fileStorage FileStorage 对象，用于文件操作\r\n     * @param {string} args.dataFile 持久化数据保存文件\r\n     * @param {Object} args.structure 设置项结构\r\n     * @param {string} args.structurePath 结构路径，优先级低于 structure\r\n     * @param {boolean} args.isUseJsboxNav 是否使用 JSBox 默认 nav 样式\r\n     * @param {string} args.name 唯一名称，默认分配一个 UUID\r\n     */ constructor(args = {\n    }){\n        super();\n        // set 和 get 同时设置才会生效\n        if (typeof args.set === \"function\" && typeof args.get === \"function\") {\n            this.set = args.set;\n            this.get = args.get;\n            this.userData = args.userData;\n        } else {\n            this.fileStorage = args.fileStorage ?? new FileStorage();\n            this.dataFile = args.dataFile ?? \"setting.json\";\n        }\n        if (args.structure) this.setStructure(args.structure) // structure 优先级高于 structurePath\n        ;\n        else this.setStructurePath(args.structurePath ?? \"setting.json\");\n        this.isUseJsboxNav = args.isUseJsboxNav ?? false;\n        // 不能使用 uuid\n        this.imagePath = (args.name ?? \"default\") + \".image\";\n        this.setName(args.name ?? uuid());\n        // l10n\n        this.loadL10n();\n    }\n    useJsboxNav() {\n        this.isUseJsboxNav = true;\n        return this;\n    }\n     #checkLoadConfigError() {\n        if (!this.#loadConfigStatus) throw new SettingLoadConfigError();\n    }\n    /**\r\n     * 从 this.structure 加载数据\r\n     * @returns {this}\r\n     */ loadConfig() {\n        const exclude = [\n            \"script\",\n            \"info\"\n        ];\n        const userData = this.userData ?? this.fileStorage.readAsJSON(\"\", this.dataFile, {\n        });\n        function setValue(structure) {\n            const setting = {\n            };\n            for (let section of structure)for (let item of section.items){\n                if (item.type === \"child\") {\n                    const child = setValue(item.children);\n                    Object.assign(setting, child);\n                } else if (exclude.indexOf(item.type) === -1) setting[item.key] = item.key in userData ? userData[item.key] : item.value;\n                else // 被排除的项目直接赋值\n                setting[item.key] = item.value;\n            }\n            return setting;\n        }\n        this.setting = setValue(this.structure);\n        this.#loadConfigStatus = true;\n        return this;\n    }\n    hasSectionTitle(structure) {\n        this.#checkLoadConfigError();\n        return structure[0][\"title\"] ? true : false;\n    }\n    loadL10n() {\n        l10n(\"zh-Hans\", `\n            \"OK\" = \"好\";\n            \"CANCEL\" = \"取消\";\n            \"CLEAR\" = \"清除\";\n            \"BACK\" = \"返回\";\n            \"ERROR\" = \"发生错误\";\n            \"SUCCESS\" = \"成功\";\n            \"LOADING\" = \"加载中\";\n            \"INVALID_VALUE\" = \"非法参数\";\n            \n            \"SETTING\" = \"设置\";\n            \"GENERAL\" = \"一般\";\n            \"ADVANCED\" = \"高级\";\n            \"TIPS\" = \"小贴士\";\n            \"COLOR\" = \"颜色\";\n            \"COPY\" = \"复制\";\n            \"COPIED\" = \"复制成功\";\n            \n            \"JSBOX_ICON\" = \"JSBox 内置图标\";\n            \"SF_SYMBOLS\" = \"SF Symbols\";\n            \"IMAGE_BASE64\" = \"图片 / base64\";\n\n            \"PREVIEW\" = \"预览\";\n            \"SELECT_IMAGE\" = \"选择图片\";\n            \"CLEAR_IMAGE\" = \"清除图片\";\n            \"NO_IMAGE\" = \"无图片\";\n            \n            \"ABOUT\" = \"关于\";\n            \"VERSION\" = \"Version\";\n            \"AUTHOR\" = \"作者\";\n            \"AT_BOTTOM\" = \"已经到底啦~\";\n            `, false);\n        l10n(\"en\", `\n            \"OK\" = \"OK\";\n            \"CANCEL\" = \"Cancel\";\n            \"CLEAR\" = \"Clear\";\n            \"BACK\" = \"Back\";\n            \"ERROR\" = \"Error\";\n            \"SUCCESS\" = \"Success\";\n            \"LOADING\" = \"Loading\";\n            \"INVALID_VALUE\" = \"Invalid value\";\n\n            \"SETTING\" = \"Setting\";\n            \"GENERAL\" = \"General\";\n            \"ADVANCED\" = \"Advanced\";\n            \"TIPS\" = \"Tips\";\n            \"COLOR\" = \"Color\";\n            \"COPY\" = \"Copy\";\n            \"COPIED\" = \"Copide\";\n\n            \"JSBOX_ICON\" = \"JSBox in app icon\";\n            \"SF_SYMBOLS\" = \"SF Symbols\";\n            \"IMAGE_BASE64\" = \"Image / base64\";\n\n            \"PREVIEW\" = \"Preview\";\n            \"SELECT_IMAGE\" = \"Select Image\";\n            \"CLEAR_IMAGE\" = \"Clear Image\";\n            \"NO_IMAGE\" = \"No Image\";\n\n            \"ABOUT\" = \"About\";\n            \"VERSION\" = \"Version\";\n            \"AUTHOR\" = \"Author\";\n            \"AT_BOTTOM\" = \"It's the end~\";\n            `, false);\n    }\n    setUserData(userData) {\n        this.userData = userData;\n    }\n    setStructure(structure) {\n        this.structure = structure;\n        return this;\n    }\n    /**\r\n     * 设置结构文件目录。\r\n     * 若调用了 setStructure(structure) 或构造函数传递了 structure 数据，则不会加载结构文件\r\n     * @param {string} structurePath\r\n     * @returns {this}\r\n     */ setStructurePath(structurePath) {\n        if (!this.structure) this.setStructure(FileStorage.readFromRootAsJSON(structurePath));\n        return this;\n    }\n    /**\r\n     * 设置一个独一无二的名字，防止多个 Setting 导致 UI 冲突\r\n     * @param {string} name 名字\r\n     */ setName(name) {\n        this.name = name;\n        return this;\n    }\n    setFooter(footer) {\n        this.#footer = footer;\n        return this;\n    }\n    set footer(footer) {\n        this.#footer = footer;\n    }\n    get footer() {\n        if (this.#footer === undefined) {\n            let info = FileStorage.readFromRootAsJSON(\"config.json\", {\n            })[\"info\"] ?? {\n            };\n            if (!info.version || !info.author) try {\n                info = __INFO__;\n            } catch  {\n            }\n            this.#footer = info.version && info.author ? {\n                type: \"view\",\n                props: {\n                    height: 130\n                },\n                views: [\n                    {\n                        type: \"label\",\n                        props: {\n                            font: $font(14),\n                            text: `${$l10n(\"VERSION\")} ${info.version} ♥ ${info.author}`,\n                            textColor: $color({\n                                light: \"#C0C0C0\",\n                                dark: \"#545454\"\n                            }),\n                            align: $align.center\n                        },\n                        layout: (make12)=>{\n                            make12.left.right.inset(0);\n                            make12.top.inset(10);\n                        }\n                    }\n                ]\n            } : {\n            };\n        }\n        return this.#footer;\n    }\n    setReadonly() {\n        this.#readonly = true;\n        return this;\n    }\n    set(key, value) {\n        if (this.#readonly) throw new SettingReadonlyError();\n        this.#checkLoadConfigError();\n        this.setting[key] = value;\n        this.fileStorage.write(\"\", this.dataFile, $data({\n            string: JSON.stringify(this.setting)\n        }));\n        this.callEvent(\"onSet\", key, value);\n        return true;\n    }\n    get(key, _default = null) {\n        this.#checkLoadConfigError();\n        if (Object.prototype.hasOwnProperty.call(this.setting, key)) return this.setting[key];\n        else return _default;\n    }\n    getColor(color) {\n        return typeof color === \"string\" ? $color(color) : $rgba(color.red, color.green, color.blue, color.alpha);\n    }\n    getImageName(key, compress = false) {\n        let name = $text.MD5(key) + \".jpg\";\n        if (compress) name = \"compress.\" + name;\n        return name;\n    }\n    getImage(key, compress = false) {\n        try {\n            const name = this.getImageName(key, compress);\n            return this.fileStorage.read(this.imagePath, name).image;\n        } catch (error) {\n            if (error instanceof FileStorageFileNotFoundError) return null;\n            throw error;\n        }\n    }\n    getId(key) {\n        return `setting-${this.name}-${key}`;\n    }\n     #touchHighlightStart(id) {\n        $(id).bgcolor = $color(\"systemFill\");\n    }\n     #touchHighlightEnd(id1, duration = 0.3) {\n        if (duration === 0) $(id1).bgcolor = $color(\"clear\");\n        else $ui.animate({\n            duration: duration,\n            animation: ()=>{\n                $(id1).bgcolor = $color(\"clear\");\n            }\n        });\n    }\n     #withTouchEvents(id2, events, withTappedHighlight = false, highlightEndDelay = 0) {\n        events = Object.assign(events, {\n            touchesBegan: ()=>{\n                this.#touchHighlightStart(id2);\n                // 延时自动关闭高亮，防止 touchesMoved 事件未正常调用\n                this.#withTouchEventsT[id2] = $delay(1, ()=>this.#touchHighlightEnd(id2, 0)\n                );\n            },\n            touchesMoved: ()=>{\n                this.#withTouchEventsT[id2]?.cancel();\n                this.#touchHighlightEnd(id2, 0);\n            }\n        });\n        if (withTappedHighlight) {\n            const tapped = events.tapped;\n            events.tapped = ()=>{\n                // highlight\n                this.#touchHighlightStart(id2);\n                setTimeout(()=>this.#touchHighlightEnd(id2)\n                , highlightEndDelay * 1000);\n                if (typeof tapped === \"function\") tapped();\n            };\n        }\n        return events;\n    }\n    createLineLabel(title9, icon) {\n        if (!icon[1]) icon[1] = \"#00CC00\";\n        if (typeof icon[1] !== \"object\") icon[1] = [\n            icon[1],\n            icon[1]\n        ];\n        if (typeof icon[0] !== \"object\") icon[0] = [\n            icon[0],\n            icon[0]\n        ];\n        return {\n            type: \"view\",\n            views: [\n                {\n                    // icon\n                    type: \"view\",\n                    props: {\n                        bgcolor: $color(icon[1][0], icon[1][1]),\n                        cornerRadius: 5,\n                        smoothCorners: true\n                    },\n                    views: [\n                        {\n                            type: \"image\",\n                            props: {\n                                tintColor: $color(\"white\"),\n                                image: $image(icon[0][0], icon[0][1])\n                            },\n                            layout: (make13, view17)=>{\n                                make13.center.equalTo(view17.super);\n                                make13.size.equalTo(20);\n                            }\n                        }\n                    ],\n                    layout: (make14, view18)=>{\n                        make14.centerY.equalTo(view18.super);\n                        make14.size.equalTo(this.iconSize);\n                        make14.left.inset(this.edgeOffset);\n                    }\n                },\n                {\n                    // title\n                    type: \"label\",\n                    props: {\n                        text: title9,\n                        lines: 1,\n                        textColor: this.textColor,\n                        align: $align.left\n                    },\n                    layout: (make15, view19)=>{\n                        make15.centerY.equalTo(view19.super);\n                        make15.height.equalTo(view19.super);\n                        make15.left.equalTo(view19.prev.right).offset(this.edgeOffset);\n                    }\n                }\n            ],\n            layout: (make16, view20)=>{\n                make16.height.centerY.equalTo(view20.super);\n                make16.left.inset(0);\n            }\n        };\n    }\n    createInfo(icon, title10, value) {\n        const isArray = Array.isArray(value);\n        const text = isArray ? value[0] : value;\n        const moreInfo = isArray ? value[1] : value;\n        return {\n            type: \"view\",\n            props: {\n                selectable: true\n            },\n            views: [\n                this.createLineLabel(title10, icon),\n                {\n                    type: \"label\",\n                    props: {\n                        text: text,\n                        align: $align.right,\n                        textColor: $color(\"darkGray\")\n                    },\n                    layout: (make17, view21)=>{\n                        make17.centerY.equalTo(view21.prev);\n                        make17.right.inset(this.edgeOffset);\n                        make17.width.equalTo(180);\n                    }\n                },\n                {\n                    // 监听点击动作\n                    type: \"view\",\n                    events: {\n                        tapped: ()=>{\n                            $ui.alert({\n                                title: title10,\n                                message: moreInfo,\n                                actions: [\n                                    {\n                                        title: $l10n(\"COPY\"),\n                                        handler: ()=>{\n                                            $clipboard.text = moreInfo;\n                                            $ui.toast($l10n(\"COPIED\"));\n                                        }\n                                    },\n                                    {\n                                        title: $l10n(\"OK\")\n                                    }\n                                ]\n                            });\n                        }\n                    },\n                    layout: (make18, view22)=>{\n                        make18.right.inset(0);\n                        make18.size.equalTo(view22.super);\n                    }\n                }\n            ],\n            layout: $layout.fill\n        };\n    }\n    createSwitch(key, icon, title11) {\n        const id3 = this.getId(key);\n        return {\n            type: \"view\",\n            props: {\n                id: id3,\n                selectable: true\n            },\n            views: [\n                this.createLineLabel(title11, icon),\n                {\n                    type: \"switch\",\n                    props: {\n                        on: this.get(key),\n                        onColor: $color(\"#00CC00\")\n                    },\n                    events: {\n                        changed: (sender)=>{\n                            try {\n                                this.set(key, sender.on);\n                            } catch (error) {\n                                // 恢复开关状态\n                                sender.on = !sender.on;\n                                throw error;\n                            }\n                        }\n                    },\n                    layout: (make19, view23)=>{\n                        make19.centerY.equalTo(view23.prev);\n                        make19.right.inset(this.edgeOffset);\n                    }\n                }\n            ],\n            layout: $layout.fill\n        };\n    }\n    createString(key, icon, title12) {\n        const id4 = this.getId(key);\n        return {\n            type: \"view\",\n            props: {\n                id: id4,\n                selectable: true\n            },\n            views: [\n                this.createLineLabel(title12, icon),\n                {\n                    type: \"button\",\n                    props: {\n                        symbol: \"square.and.pencil\",\n                        bgcolor: $color(\"clear\"),\n                        tintColor: $color(\"primaryText\")\n                    },\n                    events: {\n                        tapped: (sender)=>{\n                            const popover = $ui.popover({\n                                sourceView: sender,\n                                sourceRect: sender.bounds,\n                                directions: $popoverDirection.down,\n                                size: $size(320, 150),\n                                views: [\n                                    {\n                                        type: \"text\",\n                                        props: {\n                                            id: `${this.name}-string-${key}`,\n                                            align: $align.left,\n                                            text: this.get(key)\n                                        },\n                                        layout: (make20)=>{\n                                            make20.left.right.inset(10);\n                                            make20.top.inset(20);\n                                            make20.height.equalTo(90);\n                                        }\n                                    },\n                                    {\n                                        type: \"button\",\n                                        props: {\n                                            symbol: \"checkmark\",\n                                            bgcolor: $color(\"clear\"),\n                                            titleEdgeInsets: 10,\n                                            contentEdgeInsets: 0\n                                        },\n                                        layout: (make21)=>{\n                                            make21.right.inset(10);\n                                            make21.bottom.inset(25);\n                                            make21.size.equalTo(30);\n                                        },\n                                        events: {\n                                            tapped: ()=>{\n                                                this.set(key, $(`${this.name}-string-${key}`).text);\n                                                popover.dismiss();\n                                            }\n                                        }\n                                    }\n                                ]\n                            });\n                        }\n                    },\n                    layout: (make22, view24)=>{\n                        make22.centerY.equalTo(view24.prev);\n                        make22.right.inset(0);\n                        make22.size.equalTo(50);\n                    }\n                }\n            ],\n            layout: $layout.fill\n        };\n    }\n    createNumber(key, icon, title13) {\n        const id5 = this.getId(key);\n        const labelId = `${id5}-label`;\n        return {\n            type: \"view\",\n            props: {\n                id: id5,\n                selectable: true\n            },\n            views: [\n                this.createLineLabel(title13, icon),\n                {\n                    type: \"label\",\n                    props: {\n                        id: labelId,\n                        align: $align.right,\n                        text: this.get(key)\n                    },\n                    events: {\n                        tapped: ()=>{\n                            $input.text({\n                                type: $kbType.decimal,\n                                text: this.get(key),\n                                placeholder: title13,\n                                handler: (text)=>{\n                                    const isNumber = (str)=>{\n                                        const reg = /^[0-9]+.?[0-9]*$/;\n                                        return reg.test(str);\n                                    };\n                                    if (text === \"\" || !isNumber(text)) {\n                                        $ui.toast($l10n(\"INVALID_VALUE\"));\n                                        return;\n                                    }\n                                    this.set(key, text);\n                                    $(labelId).text = text;\n                                }\n                            });\n                        }\n                    },\n                    layout: (make23, view25)=>{\n                        make23.centerY.equalTo(view25.prev);\n                        make23.right.inset(this.edgeOffset);\n                        make23.height.equalTo(this.rowHeight);\n                        make23.width.equalTo(100);\n                    }\n                }\n            ],\n            layout: $layout.fill\n        };\n    }\n    createStepper(key, icon, title14, min, max) {\n        const id6 = this.getId(key);\n        const labelId = `${id6}-label`;\n        return {\n            type: \"view\",\n            props: {\n                id: id6,\n                selectable: true\n            },\n            views: [\n                this.createLineLabel(title14, icon),\n                {\n                    type: \"label\",\n                    props: {\n                        id: labelId,\n                        text: this.get(key),\n                        textColor: this.textColor,\n                        align: $align.left\n                    },\n                    layout: (make24, view26)=>{\n                        make24.height.equalTo(view26.super);\n                        make24.right.inset(120);\n                    }\n                },\n                {\n                    type: \"stepper\",\n                    props: {\n                        min: min,\n                        max: max,\n                        value: this.get(key)\n                    },\n                    events: {\n                        changed: (sender)=>{\n                            $(labelId).text = sender.value;\n                            try {\n                                this.set(key, sender.value);\n                            } catch (error) {\n                                // 恢复标签显示数据\n                                $(labelId).text = this.get(key);\n                                throw error;\n                            }\n                        }\n                    },\n                    layout: (make25, view27)=>{\n                        make25.centerY.equalTo(view27.prev);\n                        make25.right.inset(this.edgeOffset);\n                    }\n                }\n            ],\n            layout: $layout.fill\n        };\n    }\n    createScript(key, icon, title15, script) {\n        const id7 = this.getId(key);\n        const buttonId = `${id7}-button`;\n        const actionStart = ()=>{\n            // 隐藏 button，显示 spinner\n            $(buttonId).alpha = 0;\n            $(`${buttonId}-spinner`).alpha = 1;\n            this.#touchHighlightStart(id7);\n        };\n        const actionCancel = ()=>{\n            $(buttonId).alpha = 1;\n            $(`${buttonId}-spinner`).alpha = 0;\n            this.#touchHighlightEnd(id7);\n        };\n        const actionDone = (status = true, message = $l10n(\"ERROR\"))=>{\n            $(`${buttonId}-spinner`).alpha = 0;\n            this.#touchHighlightEnd(id7);\n            const button = $(buttonId);\n            if (!status) {\n                // 失败\n                $ui.toast(message);\n                button.alpha = 1;\n                return;\n            }\n            // 成功动画\n            button.symbol = \"checkmark\";\n            $ui.animate({\n                duration: 0.6,\n                animation: ()=>{\n                    button.alpha = 1;\n                },\n                completion: ()=>{\n                    setTimeout(()=>{\n                        $ui.animate({\n                            duration: 0.4,\n                            animation: ()=>{\n                                button.alpha = 0;\n                            },\n                            completion: ()=>{\n                                button.symbol = \"chevron.right\";\n                                $ui.animate({\n                                    duration: 0.4,\n                                    animation: ()=>{\n                                        button.alpha = 1;\n                                    },\n                                    completion: ()=>{\n                                        button.alpha = 1;\n                                    }\n                                });\n                            }\n                        });\n                    }, 600);\n                }\n            });\n        };\n        return {\n            type: \"view\",\n            props: {\n                id: id7\n            },\n            views: [\n                this.createLineLabel(title15, icon),\n                {\n                    type: \"view\",\n                    views: [\n                        {\n                            // 仅用于显示图片\n                            type: \"image\",\n                            props: {\n                                id: buttonId,\n                                symbol: \"chevron.right\",\n                                tintColor: $color(\"secondaryText\")\n                            },\n                            layout: (make26, view28)=>{\n                                make26.centerY.equalTo(view28.super);\n                                make26.right.inset(0);\n                                make26.size.equalTo(15);\n                            }\n                        },\n                        {\n                            type: \"spinner\",\n                            props: {\n                                id: `${buttonId}-spinner`,\n                                loading: true,\n                                alpha: 0\n                            },\n                            layout: (make27, view29)=>{\n                                make27.size.equalTo(view29.prev);\n                                make27.left.top.equalTo(view29.prev);\n                            }\n                        }\n                    ],\n                    layout: (make28, view30)=>{\n                        make28.right.inset(this.edgeOffset);\n                        make28.height.equalTo(this.rowHeight);\n                        make28.width.equalTo(view30.super);\n                    }\n                }\n            ],\n            events: this.#withTouchEvents(id7, {\n                tapped: ()=>{\n                    // 生成开始事件和结束事件动画，供函数调用\n                    const animate = {\n                        actionStart: actionStart,\n                        actionCancel: actionCancel,\n                        actionDone: actionDone,\n                        touchHighlightStart: ()=>this.#touchHighlightStart(id7)\n                        ,\n                        touchHighlightEnd: ()=>this.#touchHighlightEnd(id7) // 被点击的一行颜色恢复\n                    };\n                    // 执行代码\n                    if (typeof script === \"function\") script(animate);\n                    else if (script.startsWith(\"this\")) // 传递 animate 对象\n                    eval(`(()=>{return ${script}(animate)})()`);\n                    else eval(script);\n                }\n            }),\n            layout: $layout.fill\n        };\n    }\n    createTab(key, icon, title16, items, values) {\n        if (typeof items === \"string\") items = eval(`(()=>{return ${items}()})()`);\n        else if (typeof items === \"function\") items = items();\n        if (typeof values === \"string\") values = eval(`(()=>{return ${values}()})()`);\n        else if (typeof values === \"function\") values = values();\n        const id8 = this.getId(key);\n        const isCustomizeValues = items?.length > 0 && values?.length === items?.length;\n        return {\n            type: \"view\",\n            props: {\n                id: id8,\n                selectable: true\n            },\n            views: [\n                this.createLineLabel(title16, icon),\n                {\n                    type: \"tab\",\n                    props: {\n                        items: items ?? [],\n                        index: isCustomizeValues ? values.indexOf(this.get(key)) : this.get(key),\n                        dynamicWidth: true\n                    },\n                    layout: (make29, view31)=>{\n                        make29.right.inset(this.edgeOffset);\n                        make29.centerY.equalTo(view31.prev);\n                    },\n                    events: {\n                        changed: (sender)=>{\n                            if (isCustomizeValues) this.set(key, values[sender.index]);\n                            else this.set(key, sender.index);\n                        }\n                    }\n                }\n            ],\n            layout: $layout.fill\n        };\n    }\n    createMenu(key, icon, title17, items, values) {\n        const id9 = this.getId(key);\n        const labelId = `${id9}-label`;\n        // 数据生成函数\n        const getItems = ()=>{\n            let res;\n            if (typeof items === \"string\") res = eval(`(()=>{return ${items}()})()`);\n            else if (typeof items === \"function\") res = items();\n            else res = items ?? [];\n            return res;\n        };\n        const getValues = ()=>{\n            let res;\n            if (typeof values === \"string\") res = eval(`(()=>{return ${values}()})()`);\n            else if (typeof values === \"function\") res = values();\n            else res = values;\n            return res;\n        };\n        const tmpItems1 = getItems();\n        const tmpValues1 = getValues();\n        const isCustomizeValues = tmpItems1?.length > 0 && tmpValues1?.length === tmpItems1?.length;\n        return {\n            type: \"view\",\n            props: {\n                id: id9,\n                selectable: true\n            },\n            views: [\n                this.createLineLabel(title17, icon),\n                {\n                    type: \"view\",\n                    views: [\n                        {\n                            type: \"label\",\n                            props: {\n                                text: isCustomizeValues ? tmpItems1[tmpValues1.indexOf(this.get(key))] : tmpItems1[this.get(key)],\n                                color: $color(\"secondaryText\"),\n                                id: labelId\n                            },\n                            layout: (make30, view32)=>{\n                                make30.right.inset(0);\n                                make30.height.equalTo(view32.super);\n                            }\n                        }\n                    ],\n                    layout: (make31, view33)=>{\n                        make31.right.inset(this.edgeOffset);\n                        make31.height.equalTo(this.rowHeight);\n                        make31.width.equalTo(view33.super);\n                    }\n                }\n            ],\n            events: {\n                tapped: ()=>{\n                    const tmpItems = getItems();\n                    const tmpValues = getValues();\n                    $ui.menu({\n                        items: tmpItems,\n                        handler: (title18, idx)=>{\n                            if (isCustomizeValues) this.set(key, tmpValues[idx]);\n                            else this.set(key, idx);\n                            $(labelId).text = $l10n(title18);\n                        }\n                    });\n                }\n            },\n            layout: $layout.fill\n        };\n    }\n    createColor(key, icon, title19) {\n        const id10 = this.getId(key);\n        const colorId = `${id10}-color`;\n        return {\n            type: \"view\",\n            props: {\n                id: id10,\n                selectable: true\n            },\n            views: [\n                this.createLineLabel(title19, icon),\n                {\n                    type: \"view\",\n                    views: [\n                        {\n                            // 颜色预览以及按钮功能\n                            type: \"view\",\n                            props: {\n                                id: colorId,\n                                bgcolor: this.getColor(this.get(key)),\n                                circular: true,\n                                borderWidth: 1,\n                                borderColor: $color(\"#e3e3e3\")\n                            },\n                            layout: (make32, view34)=>{\n                                make32.centerY.equalTo(view34.super);\n                                make32.right.inset(this.edgeOffset);\n                                make32.size.equalTo(20);\n                            }\n                        },\n                        {\n                            // 用来监听点击事件，增大可点击面积\n                            type: \"view\",\n                            events: {\n                                tapped: async ()=>{\n                                    const color = await $picker.color({\n                                        color: this.getColor(this.get(key))\n                                    });\n                                    this.set(key, color.components);\n                                    $(colorId).bgcolor = $rgba(color.components.red, color.components.green, color.components.blue, color.components.alpha);\n                                }\n                            },\n                            layout: (make33, view35)=>{\n                                make33.right.inset(0);\n                                make33.height.width.equalTo(view35.super.height);\n                            }\n                        }\n                    ],\n                    layout: (make34, view36)=>{\n                        make34.height.equalTo(this.rowHeight);\n                        make34.width.equalTo(view36.super);\n                    }\n                }\n            ],\n            layout: $layout.fill\n        };\n    }\n    createDate(key, icon, title20, mode = 2) {\n        const id11 = this.getId(key);\n        const getFormatDate = (date)=>{\n            let str = \"\";\n            if (typeof date === \"number\") date = new Date(date);\n            switch(mode){\n                case 0:\n                    str = date.toLocaleTimeString();\n                    break;\n                case 1:\n                    str = date.toLocaleDateString();\n                    break;\n                case 2:\n                    str = date.toLocaleString();\n                    break;\n            }\n            return str;\n        };\n        return {\n            type: \"view\",\n            props: {\n                id: id11,\n                selectable: true\n            },\n            views: [\n                this.createLineLabel(title20, icon),\n                {\n                    type: \"view\",\n                    views: [\n                        {\n                            type: \"label\",\n                            props: {\n                                id: `${id11}-label`,\n                                color: $color(\"secondaryText\"),\n                                text: this.get(key) ? getFormatDate(this.get(key)) : \"None\"\n                            },\n                            layout: (make35, view37)=>{\n                                make35.right.inset(0);\n                                make35.height.equalTo(view37.super);\n                            }\n                        }\n                    ],\n                    events: {\n                        tapped: async ()=>{\n                            const settingData = this.get(key);\n                            const date = await $picker.date({\n                                props: {\n                                    mode: mode,\n                                    date: settingData ? settingData : Date.now()\n                                }\n                            });\n                            this.set(key, date.getTime());\n                            $(`${id11}-label`).text = getFormatDate(date);\n                        }\n                    },\n                    layout: (make36, view38)=>{\n                        make36.right.inset(this.edgeOffset);\n                        make36.height.equalTo(this.rowHeight);\n                        make36.width.equalTo(view38.super);\n                    }\n                }\n            ],\n            layout: $layout.fill\n        };\n    }\n    createInput(key, icon, title21) {\n        const id12 = this.getId(key);\n        return {\n            type: \"view\",\n            props: {\n                id: id12,\n                selectable: true\n            },\n            views: [\n                this.createLineLabel(title21, icon),\n                {\n                    type: \"view\",\n                    views: [\n                        {\n                            type: \"input\",\n                            props: {\n                                align: $align.right,\n                                bgcolor: $color(\"clear\"),\n                                textColor: $color(\"secondaryText\"),\n                                text: this.get(key)\n                            },\n                            layout: function(make37, view39) {\n                                make37.right.inset(0);\n                                make37.size.equalTo(view39.super);\n                            },\n                            events: {\n                                didBeginEditing: ()=>{\n                                    // 防止键盘遮挡\n                                    if (!$app.autoKeyboardEnabled) $app.autoKeyboardEnabled = true;\n                                },\n                                returned: (sender)=>{\n                                    // 结束编辑，由 didEndEditing 进行保存\n                                    sender.blur();\n                                },\n                                didEndEditing: (sender)=>{\n                                    this.set(key, sender.text);\n                                    sender.blur();\n                                }\n                            }\n                        }\n                    ],\n                    layout: (make38, view40)=>{\n                        // 与标题间距 this.edgeOffset\n                        make38.left.equalTo(view40.prev.get(\"label\").right).offset(this.edgeOffset);\n                        make38.right.inset(this.edgeOffset);\n                        make38.height.equalTo(view40.super);\n                    }\n                }\n            ],\n            layout: $layout.fill\n        };\n    }\n    /**\r\n     *\r\n     * @param {string} key\r\n     * @param {string} icon\r\n     * @param {string} title\r\n     * @param {Object} events\r\n     * @param {string|Object} bgcolor 指定预览时的背景色，默认 \"#000000\"\r\n     * @returns {Object}\r\n     */ createIcon(key, icon1, title22, bgcolor = \"#000000\") {\n        const id13 = this.getId(key);\n        const imageId = `${id13}-image`;\n        return {\n            type: \"view\",\n            props: {\n                id: id13,\n                selectable: true\n            },\n            views: [\n                this.createLineLabel(title22, icon1),\n                {\n                    type: \"view\",\n                    views: [\n                        {\n                            type: \"image\",\n                            props: {\n                                cornerRadius: 8,\n                                bgcolor: typeof bgcolor === \"string\" ? $color(bgcolor) : bgcolor,\n                                smoothCorners: true\n                            },\n                            layout: (make39, view41)=>{\n                                make39.right.inset(this.edgeOffset);\n                                make39.centerY.equalTo(view41.super);\n                                make39.size.equalTo($size(30, 30));\n                            }\n                        },\n                        {\n                            type: \"image\",\n                            props: {\n                                id: imageId,\n                                image: $image(this.get(key)),\n                                icon: $icon(this.get(key).slice(5, this.get(key).indexOf(\".\")), $color(\"#ffffff\")),\n                                tintColor: $color(\"#ffffff\")\n                            },\n                            layout: (make40, view42)=>{\n                                make40.right.equalTo(view42.prev).offset(-5);\n                                make40.centerY.equalTo(view42.super);\n                                make40.size.equalTo($size(20, 20));\n                            }\n                        }\n                    ],\n                    events: {\n                        tapped: ()=>{\n                            $ui.menu({\n                                items: [\n                                    $l10n(\"JSBOX_ICON\"),\n                                    $l10n(\"SF_SYMBOLS\"),\n                                    $l10n(\"IMAGE_BASE64\")\n                                ],\n                                handler: async (title23, idx)=>{\n                                    if (idx === 0) {\n                                        const icon = await $ui.selectIcon();\n                                        this.set(key, icon);\n                                        $(imageId).icon = $icon(icon.slice(5, icon.indexOf(\".\")), $color(\"#ffffff\"));\n                                    } else if (idx === 1 || idx === 2) $input.text({\n                                        text: \"\",\n                                        placeholder: title23,\n                                        handler: (text)=>{\n                                            if (text === \"\") {\n                                                $ui.toast($l10n(\"INVALID_VALUE\"));\n                                                return;\n                                            }\n                                            this.set(key, text);\n                                            if (idx === 1) $(imageId).symbol = text;\n                                            else $(imageId).image = $image(text);\n                                        }\n                                    });\n                                }\n                            });\n                        }\n                    },\n                    layout: (make41, view43)=>{\n                        make41.right.inset(0);\n                        make41.height.equalTo(this.rowHeight);\n                        make41.width.equalTo(view43.super);\n                    }\n                }\n            ],\n            layout: $layout.fill\n        };\n    }\n    createChild(key, icon, title24, children) {\n        const id14 = this.getId(key);\n        return {\n            type: \"view\",\n            layout: $layout.fill,\n            props: {\n                id: id14,\n                selectable: true\n            },\n            views: [\n                this.createLineLabel(title24, icon),\n                {\n                    // 仅用于显示图片\n                    type: \"image\",\n                    props: {\n                        symbol: \"chevron.right\",\n                        tintColor: $color(\"secondaryText\")\n                    },\n                    layout: (make42, view44)=>{\n                        make42.centerY.equalTo(view44.super);\n                        make42.right.inset(this.edgeOffset);\n                        make42.size.equalTo(15);\n                    }\n                }\n            ],\n            events: {\n                tapped: ()=>{\n                    setTimeout(()=>{\n                        if (this.events?.onChildPush) this.callEvent(\"onChildPush\", this.getListView(children, {\n                        }), title24);\n                        else if (this.isUseJsboxNav) UIKit.push({\n                            title: title24,\n                            bgcolor: UIKit.scrollViewBackgroundColor,\n                            views: [\n                                this.getListView(children, {\n                                })\n                            ]\n                        });\n                        else {\n                            const pageController3 = new PageController();\n                            pageController3.setView(this.getListView(children, {\n                            })).navigationItem.setTitle(title24).addPopButton().setLargeTitleDisplayMode(NavigationItem.largeTitleDisplayModeNever);\n                            if (this.hasSectionTitle(children)) pageController3.navigationController.navigationBar.setContentViewHeightOffset(-10);\n                            this.viewController.push(pageController3);\n                        }\n                    });\n                }\n            }\n        };\n    }\n    createImage(key, icon, title25) {\n        const id15 = this.getId(key);\n        const imageId = `${id15}-image`;\n        return {\n            type: \"view\",\n            props: {\n                id: id15,\n                selectable: true\n            },\n            views: [\n                this.createLineLabel(title25, icon),\n                {\n                    type: \"view\",\n                    views: [\n                        {\n                            type: \"image\",\n                            props: {\n                                id: imageId,\n                                image: this.getImage(key, true) ?? $image(\"questionmark.square.dashed\")\n                            },\n                            layout: (make43, view45)=>{\n                                make43.right.inset(this.edgeOffset);\n                                make43.centerY.equalTo(view45.super);\n                                make43.size.equalTo($size(30, 30));\n                            }\n                        }\n                    ],\n                    events: {\n                        tapped: ()=>{\n                            this.#touchHighlightStart(id15);\n                            $ui.menu({\n                                items: [\n                                    $l10n(\"PREVIEW\"),\n                                    $l10n(\"SELECT_IMAGE\"),\n                                    $l10n(\"CLEAR_IMAGE\")\n                                ],\n                                handler: (title, idx)=>{\n                                    if (idx === 0) {\n                                        const image = this.getImage(key);\n                                        if (image) $quicklook.open({\n                                            image: image\n                                        });\n                                        else $ui.toast($l10n(\"NO_IMAGE\"));\n                                    } else if (idx === 1) $photo.pick({\n                                        format: \"data\"\n                                    }).then((resp)=>{\n                                        $ui.toast($l10n(\"LOADING\"));\n                                        if (!resp.status || !resp.data) {\n                                            if (resp?.error?.description !== \"canceled\") $ui.toast($l10n(\"ERROR\"));\n                                            return;\n                                        }\n                                        // 控制压缩图片大小\n                                        const image = compressImage(resp.data.image);\n                                        this.fileStorage.write(this.imagePath, this.getImageName(key, true), image.jpg(0.8));\n                                        this.fileStorage.write(this.imagePath, this.getImageName(key), resp.data);\n                                        $(imageId).image = image;\n                                        $ui.success($l10n(\"SUCCESS\"));\n                                    });\n                                    else if (idx === 2) {\n                                        this.fileStorage.delete(this.imagePath, this.getImageName(key, true));\n                                        this.fileStorage.delete(this.imagePath, this.getImageName(key));\n                                        $(imageId).image = $image(\"questionmark.square.dashed\");\n                                        $ui.success($l10n(\"SUCCESS\"));\n                                    }\n                                },\n                                finished: ()=>{\n                                    this.#touchHighlightEnd(id15);\n                                }\n                            });\n                        }\n                    },\n                    layout: (make44, view46)=>{\n                        make44.right.inset(0);\n                        make44.height.equalTo(this.rowHeight);\n                        make44.width.equalTo(view46.super);\n                    }\n                }\n            ],\n            layout: $layout.fill\n        };\n    }\n     #getSections(structure) {\n        const sections = [];\n        for (let section of structure){\n            const rows = [];\n            for (let item1 of section.items){\n                const value = this.get(item1.key);\n                let row = null;\n                if (!item1.icon) item1.icon = [\n                    \"square.grid.2x2.fill\",\n                    \"#00CC00\"\n                ];\n                if (typeof item1.items === \"object\") item1.items = item1.items.map((item3)=>$l10n(item3)\n                );\n                // 更新标题值\n                item1.title = $l10n(item1.title);\n                switch(item1.type){\n                    case \"switch\":\n                        row = this.createSwitch(item1.key, item1.icon, item1.title);\n                        break;\n                    case \"stepper\":\n                        row = this.createStepper(item1.key, item1.icon, item1.title, item1.min ?? 1, item1.max ?? 12);\n                        break;\n                    case \"string\":\n                        row = this.createString(item1.key, item1.icon, item1.title);\n                        break;\n                    case \"number\":\n                        row = this.createNumber(item1.key, item1.icon, item1.title);\n                        break;\n                    case \"info\":\n                        row = this.createInfo(item1.icon, item1.title, value);\n                        break;\n                    case \"script\":\n                        row = this.createScript(item1.key, item1.icon, item1.title, value);\n                        break;\n                    case \"tab\":\n                        row = this.createTab(item1.key, item1.icon, item1.title, item1.items, item1.values);\n                        break;\n                    case \"menu\":\n                        row = this.createMenu(item1.key, item1.icon, item1.title, item1.items, item1.values);\n                        break;\n                    case \"color\":\n                        row = this.createColor(item1.key, item1.icon, item1.title);\n                        break;\n                    case \"date\":\n                        row = this.createDate(item1.key, item1.icon, item1.title, item1.mode);\n                        break;\n                    case \"input\":\n                        row = this.createInput(item1.key, item1.icon, item1.title);\n                        break;\n                    case \"icon\":\n                        row = this.createIcon(item1.key, item1.icon, item1.title, item1.bgcolor);\n                        break;\n                    case \"child\":\n                        row = this.createChild(item1.key, item1.icon, item1.title, item1.children);\n                        break;\n                    case \"image\":\n                        row = this.createImage(item1.key, item1.icon, item1.title);\n                        break;\n                    default:\n                        continue;\n                }\n                rows.push(row);\n            }\n            sections.push({\n                title: $l10n(section.title ?? \"\"),\n                rows: rows\n            });\n        }\n        return sections;\n    }\n    getListView(structure1, footer = this.footer) {\n        return {\n            type: \"list\",\n            props: {\n                id: this.name,\n                style: 2,\n                separatorInset: $insets(0, this.iconSize + this.edgeOffset * 2, 0, this.edgeOffset),\n                bgcolor: UIKit.scrollViewBackgroundColor,\n                footer: footer,\n                data: this.#getSections(structure1 ?? this.structure)\n            },\n            layout: $layout.fill,\n            events: {\n                rowHeight: (sender, indexPath)=>{\n                    const info = sender.object(indexPath)?.props?.info ?? {\n                    };\n                    return info.rowHeight ?? this.rowHeight;\n                }\n            }\n        };\n    }\n    getPageView() {\n        if (!this.viewController.hasRootPageController()) {\n            const pageController4 = new PageController();\n            pageController4.setView(this.getListView(this.structure)).navigationItem.setTitle($l10n(\"SETTING\"));\n            if (this.hasSectionTitle(this.structure)) pageController4.navigationController.navigationBar.setContentViewHeightOffset(-10);\n            this.viewController.setRootPageController(pageController4);\n        }\n        return this.viewController.getRootPageController().getPage();\n    }\n}\nmodule.exports = {\n    VERSION,\n    versionCompare,\n    compressImage,\n    objectEqual,\n    // class\n    View,\n    UIKit,\n    ViewController,\n    Matrix,\n    Sheet,\n    NavigationBar,\n    BarButtonItem,\n    FixedFooterView,\n    SearchBar,\n    SearchBarController,\n    NavigationItem,\n    NavigationController,\n    PageView,\n    PageController,\n    TabBarCellView,\n    TabBarHeaderView,\n    TabBarController,\n    Kernel,\n    UILoading,\n    FileStorage,\n    Setting\n};\n\n});\n\nparcelRequire.register(\"6QERS\", function(module, exports) {\n\nvar $1cJLV = parcelRequire(\"1cJLV\");\nvar $4fc74cf5b95fa1d3$require$compressImage = $1cJLV.compressImage;\n/**\n * @typedef {import(\"./app\").AppKernel} AppKernel\n */ class $4fc74cf5b95fa1d3$var$Storage {\n    /**\n     *\n     * @param {boolean} sync\n     * @param {AppKernel} kernel\n     */ constructor(sync = false, kernel){\n        this.sync = sync;\n        this.kernel = kernel;\n        this.dbName = \"CAIO.db\";\n        this.localDb = `${this.kernel.fileStorage.basePath}/${this.dbName}`;\n        this.syncInfoFile = `${this.kernel.fileStorage.basePath}/sync.json`;\n        this.imagePath = `${this.kernel.fileStorage.basePath}/image`;\n        this.imageOriginalPath = `${this.imagePath}/original`;\n        this.imagePreviewPath = `${this.imagePath}/preview`;\n        this.iCloudPath = \"drive://CAIO\";\n        this.iCloudSyncInfoFile = `${this.iCloudPath}/sync.json`;\n        this.iCloudDbFile = `${this.iCloudPath}/${this.dbName}`;\n        this.iCloudImagePath = `${this.iCloudPath}/image`;\n        this.tempPath = `${this.kernel.fileStorage.basePath}/temp`;\n        this.tempSyncInfoFile = `${this.tempPath}/sync.json`;\n        this.tempDbFile = `${this.tempPath}/${this.dbName}`;\n        this.tempImagePath = `${this.tempPath}/image`;\n        this.init();\n        if (this.sync) this.syncByiCloud();\n    }\n    init() {\n        // 初始化表\n        this.sqlite = $sqlite.open(this.localDb);\n        this.sqlite.update(\"CREATE TABLE IF NOT EXISTS clipboard(uuid TEXT PRIMARY KEY NOT NULL, text TEXT, md5 TEXT, prev TEXT, next TEXT)\");\n        this.sqlite.update(\"CREATE TABLE IF NOT EXISTS pin(uuid TEXT PRIMARY KEY NOT NULL, text TEXT, md5 TEXT, prev TEXT, next TEXT)\");\n        // 初始化目录\n        const pathList = [\n            this.tempPath,\n            this.iCloudPath,\n            this.imagePath,\n            this.imagePreviewPath,\n            this.imageOriginalPath\n        ];\n        pathList.forEach((path)=>{\n            if (!$file.isDirectory(path)) $file.mkdir(path);\n        });\n    }\n    rebuild() {\n        const db = this.tempPath + \"/rebuild.db\";\n        $file.delete(db);\n        const storage = new $4fc74cf5b95fa1d3$var$Storage(false, this.kernel);\n        storage.localDb = db;\n        storage.init();\n        const action = (data2, flag = true)=>{\n            const rebuildData = [];\n            data2.forEach((item)=>{\n                const data = {\n                    uuid: item.uuid,\n                    text: item.text,\n                    md5: item.md5,\n                    image: item.image,\n                    prev: null,\n                    next: rebuildData[0]?.uuid ?? null\n                };\n                storage.beginTransaction();\n                try {\n                    if (flag) storage.insert(data);\n                    else storage.insertPin(data);\n                    if (data.next) {\n                        // 更改指针\n                        rebuildData[0].prev = data.uuid;\n                        if (flag) storage.update(rebuildData[0]);\n                        else storage.updatePin(rebuildData[0]);\n                    }\n                    storage.commit();\n                    rebuildData.unshift(data);\n                } catch (error) {\n                    storage.rollback();\n                    this.kernel.error(error);\n                    throw error;\n                }\n            });\n        };\n        let data1;\n        try {\n            data1 = this.all();\n            const sorted = this.sort(JSON.parse(JSON.stringify(data1)));\n            if (sorted.length > data1.length) throw new Error();\n            action(sorted.reverse());\n        } catch  {\n            action(this.all());\n        }\n        try {\n            data1 = this.allPin();\n            const sorted = this.sort(JSON.parse(JSON.stringify(data1)));\n            if (sorted.length > data1.length) throw new Error();\n            action(sorted.reverse(), false);\n        } catch  {\n            action(this.allPin(), false);\n        }\n        $file.copy({\n            src: db,\n            dst: this.localDb\n        });\n    }\n    clearTemp() {\n        $file.delete(this.tempPath);\n        $file.mkdir(this.tempPath);\n    }\n    async export(callback) {\n        $file.copy({\n            src: this.syncInfoFile,\n            dst: this.tempSyncInfoFile\n        });\n        $file.copy({\n            src: this.localDb,\n            dst: this.tempDbFile\n        });\n        $file.copy({\n            src: this.imagePath,\n            dst: this.tempImagePath\n        });\n        const exportFile = this.tempPath + \"/\" + this.iCloudZipFileName;\n        await $archiver.zip({\n            directory: this.tempPath,\n            dest: exportFile\n        });\n        $share.sheet({\n            items: [\n                {\n                    name: this.iCloudZipFileName,\n                    data: $data({\n                        path: exportFile\n                    })\n                }\n            ],\n            handler: (success)=>{\n                $file.delete(exportFile);\n                callback(success);\n            }\n        });\n    }\n    async import(data) {\n        if (data.fileName.slice(-2) === \"db\") {\n            if (!$file.write({\n                data: data,\n                path: this.localDb\n            })) throw new Error(\"WRITE_DB_FILE_FAILED\");\n        } else if (data.fileName.slice(-3) === \"zip\") {\n            if (!await $archiver.unzip({\n                file: data,\n                dest: this.tempPath\n            })) throw new Error(\"UNZIP_FAILED\");\n            $file.write({\n                data: $data({\n                    path: this.tempDbFile\n                }),\n                path: this.localDb\n            });\n            // image\n            $file.move({\n                src: this.tempImagePath,\n                dst: this.imagePath\n            });\n        }\n        $sqlite.close(this.sqlite);\n        this.sqlite = $sqlite.open(this.localDb);\n        await this.upload();\n    }\n    async upload(manual) {\n        if (!this.sync && !manual) return;\n        if (this.all().length === 0) return;\n        const fileWrite = async (obj)=>{\n            // 加读写锁\n            const lock = obj.path + \".lock\";\n            await $file.download(lock);\n            if (await $file.exists(lock)) {\n                // 文件被锁，等待 500ms 重试\n                await new Promise((resolve)=>{\n                    setTimeout(()=>resolve()\n                    , 500);\n                });\n                await fileWrite(obj);\n                return;\n            } else {\n                await $file.write({\n                    data: $data({\n                        string: \"\"\n                    }),\n                    path: lock\n                });\n                this.kernel.print(\"file locked: \" + obj.path);\n            }\n            try {\n                // 清除多余文件\n                const dir = obj.path.substring(0, obj.path.lastIndexOf(\"/\"));\n                const filename = obj.path.substring(obj.path.lastIndexOf(\"/\") + 1, obj.path.lastIndexOf(\".\"));\n                for (let val of $file.list(dir) ?? []){\n                    let valName = val.substring(0, val.lastIndexOf(\".\"));\n                    if (valName === filename || valName.startsWith(filename + \" \")) $file.delete(obj.path);\n                }\n                // 写入文件\n                const status = await $file.write(obj);\n                if (!status) throw new Error(\"FILE_WRITE_ERROR: \" + obj.path);\n            } catch (error) {\n                this.kernel.error(error);\n                throw error;\n            } finally{\n                // 解除缩\n                await $file.delete(lock);\n                this.kernel.print(\"file unlocked: \" + obj.path);\n            }\n        };\n        const now = Date.now();\n        await fileWrite({\n            data: $data({\n                string: JSON.stringify({\n                    timestamp: now\n                })\n            }),\n            path: this.iCloudSyncInfoFile\n        });\n        await fileWrite({\n            data: $data({\n                path: this.localDb\n            }),\n            path: this.iCloudDbFile\n        });\n        if (!$file.exists(this.iCloudImagePath)) $file.mkdir(this.iCloudImagePath);\n        await $file.copy({\n            src: this.imagePath,\n            dst: this.iCloudImagePath\n        });\n        // 更新同步信息\n        await $file.write({\n            data: $data({\n                string: JSON.stringify({\n                    timestamp: now\n                })\n            }),\n            path: this.syncInfoFile\n        });\n    }\n    async syncByiCloud(manual = false) {\n        if (!$file.exists(this.iCloudSyncInfoFile)) {\n            this.upload(manual);\n            return;\n        }\n        const syncInfoLocal = $file.exists(this.syncInfoFile) ? JSON.parse($file.read(this.syncInfoFile).string) : {\n        };\n        const data = await $file.download(this.iCloudSyncInfoFile);\n        const syncInfoICloud = JSON.parse(data.string);\n        if (!syncInfoLocal.timestamp || syncInfoLocal.timestamp < syncInfoICloud.timestamp) {\n            await $file.write({\n                data: await $file.download(this.iCloudSyncInfoFile),\n                path: this.syncInfoFile\n            });\n            await $file.write({\n                data: await $file.download(this.iCloudDbFile),\n                path: this.localDb\n            });\n            // image\n            await $file.copy({\n                src: this.iCloudImagePath,\n                dst: this.imagePath\n            });\n            // Update\n            $sqlite.close(this.sqlite);\n            this.sqlite = $sqlite.open(this.localDb);\n            $app.notify({\n                name: \"syncByiCloud\",\n                object: {\n                    status: true\n                }\n            });\n        }\n    }\n    deleteICloudData() {\n        return $file.delete(this.iCloudSyncInfoFile) && $file.delete(this.iCloudDbFile) && $file.delete(this.iCloudImagePath);\n    }\n    sort(data, maxLoop = 9000) {\n        const dataObj = {\n        };\n        let length = 0;\n        let header = null;\n        data.forEach((item)=>{\n            // 构建结构\n            dataObj[item.uuid] = item;\n            // 寻找头节点\n            if (item.prev === null) header = item.uuid;\n            // 统计长度\n            length++;\n        });\n        // 排序\n        const sorted = [];\n        if (length > 0) try {\n            let p = dataObj[header];\n            while(p.next !== null && maxLoop > 0){\n                maxLoop--;\n                sorted.push(p);\n                p = dataObj[p.next];\n            }\n            sorted.push(p) // 将最后一个元素推入\n            ;\n        } catch (error) {\n            throw \"Unable to sort: \" + error;\n        }\n        return sorted;\n    }\n    parse(result) {\n        if (result.error !== null) throw result.error;\n        const data = [];\n        while(result.result.next())data.push({\n            uuid: result.result.get(\"uuid\"),\n            section: result.result.get(\"section\"),\n            text: result.result.get(\"text\"),\n            md5: result.result.get(\"md5\"),\n            prev: result.result.get(\"prev\") ?? null,\n            next: result.result.get(\"next\") ?? null\n        });\n        result.result.close();\n        return data;\n    }\n    beginTransaction() {\n        this.sqlite.beginTransaction();\n    }\n    commit() {\n        this.sqlite.commit();\n        this.upload();\n    }\n    rollback() {\n        this.sqlite.rollback();\n    }\n    getByText(text) {\n        const result = this.sqlite.query({\n            sql: \"SELECT *, 'clipboard' AS section FROM clipboard WHERE text = ? UNION SELECT *, 'pin' AS section FROM pin WHERE text = ?\",\n            args: [\n                text,\n                text\n            ]\n        });\n        return this.parse(result)[0];\n    }\n    getByUUID(uuid) {\n        const result = this.sqlite.query({\n            sql: \"SELECT *, 'clipboard' AS section FROM clipboard a WHERE uuid = ? UNION SELECT *, 'pin' AS section FROM pin a WHERE uuid = ?\",\n            args: [\n                uuid,\n                uuid\n            ]\n        });\n        return this.parse(result)[0];\n    }\n    getByMD5(md5) {\n        const result = this.sqlite.query({\n            sql: \"SELECT *, 'clipboard' AS section FROM clipboard WHERE md5 = ? UNION SELECT *, 'pin' AS section FROM pin WHERE md5 = ?\",\n            args: [\n                md5,\n                md5\n            ]\n        });\n        return this.parse(result)[0];\n    }\n    search(kw) {\n        const result = this.sqlite.query({\n            sql: \"SELECT *, 'clipboard' AS section FROM clipboard WHERE text like ? UNION SELECT *, 'pin' AS section FROM pin WHERE text like ?\",\n            args: [\n                `%${kw}%`,\n                `%${kw}%`\n            ]\n        });\n        return this.parse(result);\n    }\n    pathToKey(path) {\n        path = JSON.stringify(path);\n        return `@image=${path}`;\n    }\n    keyToPath(key) {\n        if (key.startsWith(\"@image=\")) return JSON.parse(key.slice(7));\n        return false;\n    }\n    _all(table) {\n        const result = this.sqlite.query(`SELECT *, '${table}' AS section FROM ${table}`);\n        return this.parse(result);\n    }\n    // 分页无法排序\n    _page(table, page, size) {\n        const result = this.sqlite.query(`SELECT *, '${table}' AS section FROM ${table} LIMIT ${page * size},${size}`);\n        return this.parse(result);\n    }\n    _insert(table, clipboard) {\n        if (clipboard.image) {\n            const image = clipboard.image;\n            const fileName = $text.uuid;\n            const path = {\n                original: `${this.imageOriginalPath}/${fileName}.png`,\n                preview: `${this.imagePreviewPath}/${fileName}.jpg`\n            };\n            $file.write({\n                data: image.png,\n                path: path.original\n            });\n            $file.write({\n                data: $4fc74cf5b95fa1d3$require$compressImage(image).jpg(0.8),\n                path: path.preview\n            });\n            clipboard.text = this.pathToKey(path);\n        }\n        const result = this.sqlite.update({\n            sql: `INSERT INTO ${table} (uuid, text, md5, prev, next) values (?, ?, ?, ?, ?)`,\n            args: [\n                clipboard.uuid,\n                clipboard.text,\n                $text.MD5(clipboard.text),\n                clipboard.prev,\n                clipboard.next\n            ]\n        });\n        if (result.result) this.upload();\n        else throw result.error;\n    }\n    _update(table, clipboard) {\n        if (Object.keys(clipboard).length < 4 || typeof clipboard.uuid !== \"string\") return;\n        const result = this.sqlite.update({\n            sql: `UPDATE ${table} SET text = ?, md5 = ?, prev = ?, next = ? WHERE uuid = ?`,\n            args: [\n                clipboard.text,\n                $text.MD5(clipboard.text),\n                clipboard.prev,\n                clipboard.next,\n                clipboard.uuid\n            ]\n        });\n        if (result.result) this.upload();\n        else throw result.error;\n    }\n    _updateText(table, uuid, text) {\n        if (typeof uuid !== \"string\") return;\n        const result = this.sqlite.update({\n            sql: `UPDATE ${table} SET text = ?, md5 = ? WHERE uuid = ?`,\n            args: [\n                text,\n                $text.MD5(text),\n                uuid\n            ]\n        });\n        if (result.result) this.upload();\n        else throw result.error;\n    }\n    _delete(table, uuid) {\n        const clipboard = this.getByUUID(uuid);\n        const result = this.sqlite.update({\n            sql: `DELETE FROM ${table} WHERE uuid = ?`,\n            args: [\n                uuid\n            ]\n        });\n        // delete image file\n        const path = this.keyToPath(clipboard.text);\n        if (path) {\n            $file.delete(path.original);\n            $file.delete(path.preview);\n        }\n        if (result.result) this.upload();\n        else throw result.error;\n    }\n    all() {\n        return this._all(\"clipboard\");\n    }\n    page(page, size) {\n        return this._page(\"clipboard\", page, size);\n    }\n    insert(clipboard) {\n        return this._insert(\"clipboard\", clipboard);\n    }\n    update(clipboard) {\n        return this._update(\"clipboard\", clipboard);\n    }\n    updateText(uuid, text) {\n        return this._updateText(\"clipboard\", uuid, text);\n    }\n    delete(uuid) {\n        return this._delete(\"clipboard\", uuid);\n    }\n    allPin() {\n        return this._all(\"pin\");\n    }\n    pagePin(page, size) {\n        return this._page(\"pin\", page, size);\n    }\n    insertPin(clipboard) {\n        return this._insert(\"pin\", clipboard);\n    }\n    updatePin(clipboard) {\n        return this._update(\"pin\", clipboard);\n    }\n    updateTextPin(uuid, text) {\n        return this._updateText(\"pin\", uuid, text);\n    }\n    deletePin(uuid) {\n        return this._delete(\"pin\", uuid);\n    }\n    getPinByMD5(md5) {\n        const result = this.sqlite.query({\n            sql: \"SELECT * FROM pin WHERE md5 = ?\",\n            args: [\n                md5\n            ]\n        });\n        return this.parse(result)[0];\n    }\n}\nmodule.exports = $4fc74cf5b95fa1d3$var$Storage;\n\n});\n\nparcelRequire.register(\"2Ygkq\", function(module, exports) {\n\nvar $1cJLV = parcelRequire(\"1cJLV\");\nvar $229dd9dd444bc99f$require$UIKit = $1cJLV.UIKit;\nvar $229dd9dd444bc99f$require$ViewController = $1cJLV.ViewController;\nvar $229dd9dd444bc99f$require$PageController = $1cJLV.PageController;\nvar $229dd9dd444bc99f$require$SearchBar = $1cJLV.SearchBar;\n\nvar $dgvQV = parcelRequire(\"dgvQV\");\n/**\r\n * @typedef {import(\"../app\").AppKernel} AppKernel\r\n */ class $229dd9dd444bc99f$var$Clipboard {\n    copied = $cache.get(\"clipboard.copied\") ?? {\n    };\n    #singleLine = false;\n    reorder = {\n    };\n    #savedClipboard = [];\n    savedClipboardIndex = {\n    };\n    /**\r\n     * @param {AppKernel} kernel\r\n     */ constructor(kernel){\n        this.kernel = kernel;\n        this.listId = \"clipboard-list\";\n        // 剪贴板列个性化设置\n        this.edges = 20 // 列表边距\n        ;\n        this.fontSize = 16 // 字体大小\n        ;\n        this.copiedIndicatorSize = 7 // 已复制指示器（小绿点）大小\n        ;\n        this.imageContentHeight = 50;\n        this.viewController = new $229dd9dd444bc99f$require$ViewController();\n    }\n    get savedClipboard() {\n        if (this.#savedClipboard.length === 0) this.loadSavedClipboard();\n        return this.#savedClipboard;\n    }\n    set savedClipboard(savedClipboard) {\n        this.#savedClipboard = savedClipboard;\n    }\n    getSingleLineHeight() {\n        return $text.sizeThatFits({\n            text: \"A\",\n            width: this.fontSize,\n            font: $font(this.fontSize)\n        }).height;\n    }\n    setSingleLine() {\n        // 图片高度与文字一致\n        this.imageContentHeight = this.getSingleLineHeight();\n        this.#singleLine = true;\n    }\n    loadDataWithSingleLine() {\n        this.setSingleLine();\n        this.loadSavedClipboard();\n    }\n    static updateMenu(kernel) {\n    // TODO 更新 menu 中的动作\n    }\n    setClipboardText(text) {\n        if (this.kernel.setting.get(\"clipboard.universal\")) $clipboard.text = text;\n        else $clipboard.setTextLocalOnly(text);\n    }\n    /**\r\n     * list view\r\n     */ listReady() {\n        // check url scheme\n        $delay(0.5, ()=>{\n            if ($context.query[\"copy\"]) {\n                const uuid = $context.query[\"copy\"];\n                const content = this.kernel.storage.getByUUID(uuid);\n                this.setClipboardText(content.text);\n                this.setCopied(uuid, this.getIndexPathByUUID(uuid));\n                $ui.success($l10n(\"COPIED\"));\n            } else if ($context.query[\"add\"]) this.getAddTextView();\n            else if ($context.query[\"actions\"]) {\n                if (this.kernel.isUseJsboxNav) this.kernel.actionManager.present();\n                else this.kernel.tabBarController.switchPageTo(\"actions\");\n            }\n        });\n        // readClipboard\n        $delay(0.5, ()=>{\n            this.readClipboard();\n        });\n        $app.listen({\n            // iCloud\n            syncByiCloud: (object)=>{\n                if (object.status) {\n                    this.loadSavedClipboard();\n                    const view = $(this.listId);\n                    if (view) view.data = this.savedClipboard;\n                }\n            },\n            resume: ()=>{\n                // 在应用恢复响应后调用\n                $delay(0.5, ()=>{\n                    this.loadSavedClipboard();\n                    this.updateList();\n                    this.readClipboard();\n                });\n            }\n        });\n    }\n    updateList() {\n        // 直接重置数据，解决小绿点滚动到屏幕外后消失问题\n        $(this.listId).data = this.savedClipboard;\n    }\n    /**\r\n     *\r\n     * @param {string} uuid\r\n     * @param {$indexPath} indexPath\r\n     * @param {boolean} isUpdateIndicator\r\n     * @returns\r\n     */ setCopied(uuid, indexPath, isUpdateIndicator = true) {\n        if (uuid === this.copied.uuid && indexPath?.section === this.copied.indexPath?.section && indexPath?.row === this.copied.indexPath?.row) return;\n        if (!uuid) {\n            if (isUpdateIndicator) {\n                if (this.copied.indexPath) this.savedClipboard[this.copied.indexPath.section].rows[this.copied.indexPath.row].copied.hidden = true;\n                $delay(0.3, ()=>this.updateList()\n                );\n            }\n            this.copied = {\n            };\n            $clipboard.clear();\n        } else {\n            if (isUpdateIndicator) {\n                if (this.copied.indexPath) this.savedClipboard[this.copied.indexPath.section].rows[this.copied.indexPath.row].copied.hidden = true;\n                this.savedClipboard[indexPath.section].rows[indexPath.row].copied.hidden = false;\n                $delay(0.3, ()=>this.updateList()\n                );\n            }\n            if (this.copied.uuid !== uuid) this.copied = Object.assign(this.copied, this.kernel.storage.getByUUID(uuid) ?? {\n            });\n            this.copied.indexPath = indexPath;\n        }\n        $cache.set(\"clipboard.copied\", this.copied);\n    }\n    /**\r\n     * 警告！该方法可能消耗大量资源\r\n     * @param {String} uuid\r\n     */ getIndexPathByUUID(uuid) {\n        const data = $(this.listId).data;\n        let length = data[0].rows.length;\n        for(let index = 0; index < length; index++){\n            if (data[0].rows[index].content.info.uuid === uuid) return $indexPath(0, index);\n        }\n        length = data[1].rows.length;\n        for(let index1 = 0; index1 < length; index1++){\n            if (data[1].rows[index1].content.info.uuid === uuid) return $indexPath(1, index1);\n        }\n        return false;\n    }\n    readClipboard(manual = false) {\n        if (manual || this.kernel.setting.get(\"clipboard.autoSave\")) {\n            this.kernel.print(\"read clipboard\");\n            // 仅手动模式下保存图片\n            if (manual && $clipboard.images?.length > 0) {\n                $clipboard.images.forEach((image)=>{\n                    this.add(image);\n                });\n                return true;\n            }\n            const text = $clipboard.text;\n            if (!text || text === \"\") {\n                this.setCopied() // 清空剪切板\n                ;\n                return false;\n            }\n            $clipboard.text = text // 防止重复弹窗提示从其他 App 读取剪切板\n            ;\n            // 判断 copied 是否和剪切板一致\n            if (this.copied.text === text) return false;\n            const md5 = $text.MD5(text);\n            const res = this.kernel.storage.getByMD5(md5);\n            if (this.copied.uuid && this.copied.uuid === res?.uuid) this.setCopied(res.uuid, this.getIndexPathByUUID(res.uuid));\n            else if (!this.savedClipboardIndex[md5]) {\n                const data = this.add(text);\n                this.copy(text, data.uuid, data.indexPath);\n            }\n            return true;\n        }\n        return false;\n    }\n    add(item, uiUpdate) {\n        // 元数据\n        const data = {\n            uuid: this.kernel.uuid(),\n            text: item,\n            md5: null,\n            image: null,\n            prev: null,\n            next: this.savedClipboard[1].rows[0] ? this.savedClipboard[1].rows[0].content.info.uuid : null\n        };\n        if (typeof item === \"string\") {\n            if (item.trim() === \"\") return;\n            data.md5 = $text.MD5(item);\n        } else if (typeof item === \"object\") {\n            data.text = \"\";\n            data.image = item;\n        } else return;\n        // 写入数据库\n        this.kernel.storage.beginTransaction();\n        try {\n            this.kernel.storage.insert(data);\n            if (data.next) {\n                // 更改指针\n                this.savedClipboard[1].rows[0].content.info.prev = data.uuid;\n                this.kernel.storage.update(this.savedClipboard[1].rows[0].content.info);\n            }\n            this.kernel.storage.commit();\n            // 格式化数据\n            const lineData = this.lineData(data);\n            // 保存到内存中\n            this.savedClipboard[1].rows.unshift(lineData);\n            this.savedClipboardIndex[$text.MD5(data.text)] = 1;\n            if (typeof uiUpdate === \"function\") uiUpdate(data);\n            else {\n                // 在列表中插入行\n                data.indexPath = $indexPath(1, 0);\n                $(this.listId).insert({\n                    indexPath: data.indexPath,\n                    value: lineData\n                });\n                // 被复制的元素向下移动了一个单位\n                if (this.copied?.indexPath?.section === 1) this.setCopied(this.copied.uuid, $indexPath(this.copied?.indexPath?.section, this.copied?.indexPath?.row + 1), false);\n                return data;\n            }\n        } catch (error) {\n            this.kernel.storage.rollback();\n            this.kernel.error(error);\n            $ui.alert(error);\n        }\n    }\n    delete(uuid, indexPath) {\n        const section = indexPath.section;\n        const index = indexPath.row;\n        // 删除数据库中的值\n        this.kernel.storage.beginTransaction();\n        try {\n            section === 0 ? this.kernel.storage.deletePin(uuid) : this.kernel.storage.delete(uuid);\n            // 更改指针\n            if (this.savedClipboard[section].rows[index - 1]) {\n                const prevItem = {\n                    uuid: this.savedClipboard[section].rows[index - 1].content.info.uuid,\n                    text: this.savedClipboard[section].rows[index - 1].content.info.text,\n                    prev: this.savedClipboard[section].rows[index - 1].content.info.prev,\n                    next: this.savedClipboard[section].rows[index].content.info.next // next 指向被删除元素的 next\n                };\n                section === 0 ? this.kernel.storage.updatePin(prevItem) : this.kernel.storage.update(prevItem);\n                this.savedClipboard[section].rows[index - 1] = this.lineData(prevItem);\n            }\n            if (this.savedClipboard[section].rows[index + 1]) {\n                const nextItem = {\n                    uuid: this.savedClipboard[section].rows[index + 1].content.info.uuid,\n                    text: this.savedClipboard[section].rows[index + 1].content.info.text,\n                    prev: this.savedClipboard[section].rows[index].content.info.prev,\n                    next: this.savedClipboard[section].rows[index + 1].content.info.next\n                };\n                section === 0 ? this.kernel.storage.updatePin(nextItem) : this.kernel.storage.update(nextItem);\n                this.savedClipboard[section].rows[index + 1] = this.lineData(nextItem);\n            }\n            this.kernel.storage.commit();\n            // update index\n            delete this.savedClipboardIndex[this.savedClipboard[section].rows[index].content.info.md5];\n            // 删除内存中的值\n            this.savedClipboard[section].rows.splice(index, 1);\n            // 删除列表中的行\n            if (this.copied.uuid === uuid) // 删除剪切板信息\n            this.setCopied(null);\n        } catch (error) {\n            this.kernel.storage.rollback();\n            this.kernel.error(error);\n            $ui.alert(error);\n        }\n    }\n    update(uuid, text, indexPath) {\n        const info = $(this.listId).cell(indexPath).get(\"content\").info;\n        const newMD5 = $text.MD5(text);\n        // 更新索引\n        delete this.savedClipboardIndex[info.md5];\n        this.savedClipboardIndex[newMD5] = 1;\n        // 更新内存数据\n        const lineData = this.lineData(Object.assign(info, {\n            text: text,\n            md5: newMD5\n        }), info.uuid === this.copied.uuid);\n        this.savedClipboard[indexPath.section].rows[indexPath.row] = lineData;\n        // 更新列表\n        this.updateList();\n        if (uuid === this.copied.uuid) this.setClipboardText(text);\n        try {\n            indexPath.section === 0 ? this.kernel.storage.updateTextPin(uuid, text) : this.kernel.storage.updateText(uuid, text);\n            return true;\n        } catch (error) {\n            this.kernel.error(error);\n            return false;\n        }\n    }\n    /**\r\n     * 将from位置的元素移动到to位置\r\n     * @param {Number} from\r\n     * @param {Number} to\r\n     */ move(from, to, section, copiedIndex = true) {\n        if (from === to) return;\n        if (from < to) to++ // 若向下移动则 to 增加 1，因为代码为移动到 to 位置的上面\n        ;\n        if (!this.savedClipboard[section].rows[to]) this.savedClipboard[section].rows[to] = this.lineData({\n            uuid: null,\n            text: \"\",\n            next: null,\n            prev: this.savedClipboard[section].rows[to - 1].content.info.uuid\n        });\n        this.kernel.storage.beginTransaction() // 开启事务\n        ;\n        try {\n            const oldFromItem = {\n                uuid: this.savedClipboard[section].rows[from].content.info.uuid,\n                text: this.savedClipboard[section].rows[from].content.info.text\n            };\n            const oldToItem = {\n                uuid: this.savedClipboard[section].rows[to].content.info.uuid,\n                text: this.savedClipboard[section].rows[to].content.info.text\n            };\n            // 删除元素\n            if (this.savedClipboard[section].rows[from - 1]) {\n                const fromPrevItem = {\n                    // from 位置的上一个元素\n                    uuid: this.savedClipboard[section].rows[from - 1].content.info.uuid,\n                    text: this.savedClipboard[section].rows[from - 1].content.info.text,\n                    prev: this.savedClipboard[section].rows[from - 1].content.info.prev,\n                    next: this.savedClipboard[section].rows[from].content.info.next\n                };\n                section === 0 ? this.kernel.storage.updatePin(fromPrevItem) : this.kernel.storage.update(fromPrevItem);\n                this.savedClipboard[section].rows[from - 1] = this.lineData(fromPrevItem);\n            }\n            if (this.savedClipboard[section].rows[from + 1]) {\n                const fromNextItem = {\n                    // from 位置的下一个元素\n                    uuid: this.savedClipboard[section].rows[from + 1].content.info.uuid,\n                    text: this.savedClipboard[section].rows[from + 1].content.info.text,\n                    prev: this.savedClipboard[section].rows[from].content.info.prev,\n                    next: this.savedClipboard[section].rows[from + 1].content.info.next\n                };\n                section === 0 ? this.kernel.storage.updatePin(fromNextItem) : this.kernel.storage.update(fromNextItem);\n                this.savedClipboard[section].rows[from + 1] = this.lineData(fromNextItem);\n            }\n            {\n                // 在 to 上方插入元素\n                if (this.savedClipboard[section].rows[to - 1]) {\n                    const toPrevItem = {\n                        // 原来 to 位置的上一个元素\n                        uuid: this.savedClipboard[section].rows[to - 1].content.info.uuid,\n                        text: this.savedClipboard[section].rows[to - 1].content.info.text,\n                        prev: this.savedClipboard[section].rows[to - 1].content.info.prev,\n                        next: oldFromItem.uuid // 指向即将被移动元素的uuid\n                    };\n                    section === 0 ? this.kernel.storage.updatePin(toPrevItem) : this.kernel.storage.update(toPrevItem);\n                    this.savedClipboard[section].rows[to - 1] = this.lineData(toPrevItem);\n                }\n                const toItem = {\n                    // 原来 to 位置的元素\n                    uuid: oldToItem.uuid,\n                    text: oldToItem.text,\n                    prev: oldFromItem.uuid,\n                    next: this.savedClipboard[section].rows[to].content.info.next // 前面的代码可能更改此值，因为 from 上下的元素可能就是 to\n                };\n                section === 0 ? this.kernel.storage.updatePin(toItem) : this.kernel.storage.update(toItem);\n                const fromItem = {\n                    // 被移动元素\n                    uuid: oldFromItem.uuid,\n                    text: oldFromItem.text,\n                    prev: this.savedClipboard[section].rows[to].content.info.prev,\n                    next: oldToItem.uuid\n                };\n                section === 0 ? this.kernel.storage.updatePin(fromItem) : this.kernel.storage.update(fromItem);\n                // 修改内存中的值\n                this.savedClipboard[section].rows[to] = this.lineData(toItem);\n                this.savedClipboard[section].rows[from] = this.lineData(fromItem);\n            }\n            // 移动位置\n            this.savedClipboard[section].rows.splice(to, 0, this.savedClipboard[section].rows[from]);\n            this.savedClipboard[section].rows.splice(from > to ? from + 1 : from, 1);\n            this.kernel.storage.commit() // 提交事务\n            ;\n            // 去掉补位元素\n            if (this.savedClipboard[section].rows[to].content.info.uuid === null) this.savedClipboard[section].rows.splice(to, 1);\n            {\n                // 操作 UI\n                // 去除偏移\n                const _to = from < to ? to - 1 : to;\n                const listView = $(this.listId);\n                // 移动列表\n                if (from < _to) {\n                    // 从上往下移动\n                    listView.insert({\n                        indexPath: $indexPath(section, to),\n                        value: this.savedClipboard[section].rows[_to]\n                    });\n                    listView.delete($indexPath(section, from));\n                } else {\n                    // 从下往上移动\n                    listView.delete($indexPath(section, from));\n                    listView.insert({\n                        indexPath: $indexPath(section, to),\n                        value: this.savedClipboard[section].rows[to]\n                    });\n                }\n                // 修正指示器\n                if (copiedIndex && this.copied.indexPath) {\n                    const copiedIndex = this.copied.indexPath;\n                    if (copiedIndex.section === section) {\n                        const copiedUUID = this.copied.uuid;\n                        if (copiedIndex.row === from) // 被移动的行是被复制的行\n                        this.setCopied(copiedUUID, $indexPath(section, _to));\n                        else if (copiedIndex.row > from && copiedIndex.row < _to || copiedIndex.row < from && copiedIndex.row > _to || copiedIndex.row === _to) // 被复制的行介于 from 和 _to 之间或等于 _to\n                        // 从上往下移动则 -1 否则 +1\n                        this.setCopied(copiedUUID, $indexPath(section, from < _to ? copiedIndex.row - 1 : copiedIndex.row + 1));\n                    }\n                }\n            }\n        } catch (error) {\n            this.kernel.storage.rollback();\n            this.kernel.error(error);\n            $ui.alert(error);\n        }\n    }\n    pin(item, indexPath) {\n        if (item?.section === \"pin\") return;\n        const res = this.kernel.storage.getPinByMD5(item.md5);\n        if (res) {\n            $ui.warning(\"Already exists\");\n            return;\n        }\n        item.next = this.savedClipboard[0].rows[0]?.content?.info?.uuid ?? null;\n        item.prev = null;\n        // 写入数据库\n        this.kernel.storage.beginTransaction();\n        try {\n            this.kernel.storage.insertPin(item);\n            if (item.next) {\n                // 更改指针\n                this.savedClipboard[0].rows[0].content.info.prev = item.uuid;\n                this.kernel.storage.updatePin(this.savedClipboard[0].rows[0].content.info);\n            }\n            this.kernel.storage.commit();\n            // 删除原表数据\n            this.delete(item.uuid, indexPath);\n            const listUI = $(this.listId);\n            const lineData = this.lineData(item);\n            // 保存到内存中\n            this.savedClipboard[0].rows.unshift(lineData);\n            this.savedClipboardIndex[item.md5] = 1;\n            // UI insert\n            listUI.insert({\n                indexPath: $indexPath(0, 0),\n                value: lineData\n            });\n            listUI.delete(indexPath);\n        } catch (error) {\n            this.kernel.storage.rollback();\n            this.kernel.error(error);\n            $ui.alert(error);\n        }\n    }\n    /**\r\n     * 复制\r\n     * @param {*} text\r\n     * @param {*} uuid\r\n     * @param {Number} index 被复制的行的索引\r\n     */ copy(text, uuid, indexPath) {\n        const path = this.kernel.storage.keyToPath(text);\n        if (path && $file.exists(path.original)) $clipboard.image = $file.read(path.original).image;\n        else this.setClipboardText(text);\n        const isMoveToTop = indexPath.section === 1;\n        // 将被复制的行移动到最前端\n        if (isMoveToTop) this.move(indexPath.row, 0, indexPath.section);\n        // 写入缓存并更新数据\n        this.setCopied(uuid, isMoveToTop ? $indexPath(indexPath.section, 0) : indexPath);\n    }\n    edit(text, callback) {\n        const editor = new $dgvQV(this.kernel);\n        const navButtons = [\n            {\n                symbol: \"square.and.arrow.up\",\n                tapped: ()=>{\n                    if (editor.text) $share.sheet(editor.text);\n                    else $ui.warning($l10n(\"NONE\"));\n                }\n            }\n        ];\n        if (this.kernel.isUseJsboxNav) editor.uikitPush(text, ()=>callback(editor.text)\n        , navButtons);\n        else {\n            const pageController = editor.getPageController(text, navButtons);\n            this.viewController.setEvent(\"onPop\", ()=>callback(editor.text)\n            );\n            this.viewController.push(pageController);\n        }\n    }\n    getAddTextView() {\n        this.edit(\"\", (text)=>{\n            if (text !== \"\") this.add(text);\n        });\n    }\n    loadSavedClipboard() {\n        this.kernel.print(\"load clipboard\");\n        const initData = (data1)=>{\n            try {\n                const sorted = this.kernel.storage.sort(data1, this.kernel.setting.get(\"clipboard.maxItemLength\"));\n                return sorted.map((data)=>{\n                    this.savedClipboardIndex[data.md5] = 1;\n                    return this.lineData(data, this.copied.uuid === data.uuid);\n                });\n            } catch (error) {\n                $ui.alert({\n                    title: $l10n(\"REBUILD_DATABASE\"),\n                    message: $l10n(\"CLIPBOARD_STRUCTURE_ERROR\"),\n                    actions: [\n                        {\n                            title: $l10n(\"OK\"),\n                            handler: ()=>{\n                                const loading = $229dd9dd444bc99f$require$UIKit.loading();\n                                loading.start();\n                                this.kernel.storage.rebuild();\n                                loading.end();\n                                $delay(0.8, ()=>$addin.restart()\n                                );\n                            }\n                        },\n                        {\n                            title: $l10n(\"CANCEL\")\n                        }\n                    ]\n                });\n                this.kernel.error(error);\n            }\n        };\n        this.savedClipboard = [\n            {\n                rows: initData(this.kernel.storage.allPin()) ?? []\n            },\n            {\n                rows: initData(this.kernel.storage.all()) ?? []\n            }\n        ];\n    }\n    searchAction(text) {\n        try {\n            if (text === \"\") this.updateList();\n            else {\n                const res = this.kernel.storage.search(text);\n                if (res && res.length > 0) $(this.listId).data = res.map((data)=>this.lineData(data)\n                );\n            }\n        } catch (error) {\n            this.updateList();\n            throw error;\n        }\n    }\n    menuItems(withDefaultButtons = true) {\n        const handlerRewrite = (handler)=>{\n            return (sender, indexPath)=>{\n                const item = sender.object(indexPath);\n                const data = {\n                    text: item.content.info.text,\n                    uuid: item.content.info.uuid\n                };\n                handler(data);\n            };\n        };\n        const actions = this.kernel.actionManager.getActions(\"clipboard\").map((action)=>{\n            const actionHandler = this.kernel.actionManager.getActionHandler(action.type, action.dir);\n            action.handler = handlerRewrite(actionHandler);\n            action.title = action.name;\n            action.symbol = action.icon;\n            return action;\n        });\n        const defaultButtons = [\n            {\n                inline: true,\n                items: [\n                    {\n                        title: $l10n(\"SHARE\"),\n                        symbol: \"square.and.arrow.up\",\n                        handler: (sender, indexPath)=>{\n                            const text = sender.object(indexPath).content.info.text;\n                            let shareContent = text;\n                            const path = this.kernel.storage.keyToPath(text);\n                            if (path && $file.exists(path.original)) {\n                                const image = $file.read(path.original)?.image?.png;\n                                shareContent = {\n                                    name: image.fileName,\n                                    data: image\n                                };\n                            }\n                            $share.sheet([\n                                shareContent\n                            ]);\n                        }\n                    },\n                    {\n                        title: $l10n(\"COPY\"),\n                        symbol: \"square.on.square\",\n                        handler: (sender, indexPath)=>{\n                            const data = sender.object(indexPath);\n                            this.copy(data.content.info.text, data.content.info.uuid, indexPath);\n                        }\n                    },\n                    {\n                        title: $l10n(\"DELETE\"),\n                        symbol: \"trash\",\n                        destructive: true,\n                        handler: (sender, indexPath)=>{\n                            this.kernel.deleteConfirm($l10n(\"CONFIRM_DELETE_MSG\"), ()=>{\n                                const data = sender.object(indexPath);\n                                this.delete(data.content.info.uuid, indexPath);\n                                sender.delete(indexPath);\n                            });\n                        }\n                    }\n                ]\n            }\n        ];\n        return actions.concat(withDefaultButtons ? defaultButtons : []);\n    }\n    lineData(data, indicator = false) {\n        const path = this.kernel.storage.keyToPath(data.text);\n        if (path) return {\n            copied: {\n                hidden: !indicator\n            },\n            image: {\n                src: path.preview,\n                hidden: false\n            },\n            content: {\n                info: {\n                    text: data.text,\n                    section: data.section,\n                    uuid: data.uuid,\n                    md5: data.md5,\n                    height: this.imageContentHeight,\n                    prev: data.prev,\n                    next: data.next\n                }\n            }\n        };\n        else {\n            const sliceText = (text)=>{\n                // 显示最大长度\n                const textMaxLength = this.kernel.setting.get(\"clipboard.textMaxLength\");\n                return text.length > textMaxLength ? text.slice(0, textMaxLength) + \"...\" : text;\n            };\n            const text1 = sliceText(data.text);\n            const height = $text.sizeThatFits({\n                text: text1,\n                width: $229dd9dd444bc99f$require$UIKit.windowSize.width - this.edges * 2,\n                font: $font(this.fontSize)\n            }).height;\n            return {\n                copied: {\n                    hidden: !indicator\n                },\n                image: {\n                    hidden: true\n                },\n                content: {\n                    text: text1,\n                    info: {\n                        text: data.text,\n                        section: data.section,\n                        uuid: data.uuid,\n                        md5: data.md5,\n                        height: height,\n                        prev: data.prev,\n                        next: data.next\n                    }\n                }\n            };\n        }\n    }\n    listTemplate(lines = 0) {\n        return {\n            props: {\n                bgcolor: $color(\"clear\")\n            },\n            views: [\n                {\n                    type: \"view\",\n                    props: {\n                        id: \"copied\",\n                        circular: this.copiedIndicatorSize,\n                        hidden: true,\n                        bgcolor: $color(\"green\")\n                    },\n                    layout: (make, view)=>{\n                        make.centerY.equalTo(view.super);\n                        make.size.equalTo(this.copiedIndicatorSize);\n                        // 放在前面小缝隙的中间 `this.copyedIndicatorSize / 2` 指大小的一半\n                        make.left.inset(this.edges / 2 - this.copiedIndicatorSize / 2);\n                    }\n                },\n                {\n                    type: \"label\",\n                    props: {\n                        id: \"content\",\n                        lines: lines,\n                        font: $font(this.fontSize)\n                    },\n                    layout: (make, view)=>{\n                        make.centerY.equalTo(view.super);\n                        make.left.right.inset(this.edges);\n                    }\n                },\n                {\n                    type: \"image\",\n                    props: {\n                        id: \"image\",\n                        hidden: true\n                    },\n                    layout: $layout.fill\n                }\n            ]\n        };\n    }\n    getListView() {\n        this.loadSavedClipboard();\n        return {\n            // 剪切板列表\n            type: \"list\",\n            props: {\n                id: this.listId,\n                menu: {\n                    items: this.menuItems(this.kernel)\n                },\n                bgcolor: $229dd9dd444bc99f$require$UIKit.primaryViewBackgroundColor,\n                separatorInset: $insets(0, this.edges, 0, 0),\n                data: this.savedClipboard,\n                template: this.listTemplate(),\n                actions: [\n                    {\n                        // 复制\n                        title: $l10n(\"COPY\"),\n                        color: $color(\"systemLink\"),\n                        handler: (sender, indexPath)=>{\n                            const data = sender.object(indexPath);\n                            this.copy(data.content.info.text, data.content.info.uuid, indexPath);\n                        }\n                    },\n                    {\n                        // 置顶\n                        title: $l10n(\"PIN\"),\n                        color: $color(\"orange\"),\n                        handler: (sender, indexPath)=>{\n                            const content = sender.object(indexPath).content.info;\n                            delete content.height;\n                            this.pin(content, indexPath);\n                        }\n                    },\n                    {\n                        // 删除\n                        title: \" \" + $l10n(\"DELETE\") + \" \",\n                        color: $color(\"red\"),\n                        handler: (sender, indexPath)=>{\n                            this.kernel.deleteConfirm($l10n(\"CONFIRM_DELETE_MSG\"), ()=>{\n                                const data = sender.object(indexPath);\n                                this.delete(data.content.info.uuid, indexPath);\n                                sender.delete(indexPath);\n                            });\n                        }\n                    }\n                ]\n            },\n            layout: $layout.fill,\n            events: {\n                ready: ()=>this.listReady()\n                ,\n                rowHeight: (sender, indexPath)=>{\n                    const content = sender.object(indexPath).content;\n                    return content.info.height + this.edges * 2;\n                },\n                didSelect: (sender, indexPath, data)=>{\n                    const content = data.content;\n                    const text3 = content.info.text;\n                    const path = this.kernel.storage.keyToPath(text3);\n                    if (path && $file.exists(path.original)) $quicklook.open({\n                        image: $file.read(path.original)?.image\n                    });\n                    else this.edit(content.info.text, (text)=>{\n                        if (content.info.md5 !== $text.MD5(text)) this.update(content.info.uuid, text, indexPath);\n                    });\n                }\n            }\n        };\n    }\n    getPageController() {\n        const searchBar = new $229dd9dd444bc99f$require$SearchBar();\n        // 初始化搜索功能\n        searchBar.controller.setEvent(\"onChange\", (text)=>this.searchAction(text)\n        );\n        const pageController = new $229dd9dd444bc99f$require$PageController();\n        pageController.navigationItem.setTitle($l10n(\"CLIPBOARD\")).setTitleView(searchBar).pinTitleView().setRightButtons([\n            {\n                symbol: \"plus.circle\",\n                tapped: ()=>this.getAddTextView()\n            }\n        ]).setLeftButtons([\n            {\n                symbol: \"arrow.up.arrow.down.circle\",\n                tapped: (animate, sender1)=>{\n                    $ui.popover({\n                        sourceView: sender1,\n                        directions: $popoverDirection.up,\n                        size: $size(200, 300),\n                        views: [\n                            {\n                                type: \"label\",\n                                props: {\n                                    text: $l10n(\"SORT\"),\n                                    color: $color(\"secondaryText\"),\n                                    font: $font(14)\n                                },\n                                layout: (make, view)=>{\n                                    make.top.equalTo(view.super.safeArea).offset(0);\n                                    make.height.equalTo(40);\n                                    make.left.inset(20);\n                                }\n                            },\n                            $229dd9dd444bc99f$require$UIKit.separatorLine(),\n                            {\n                                type: \"list\",\n                                props: {\n                                    id: \"clipboard-list-sort\",\n                                    reorder: true,\n                                    crossSections: false,\n                                    bgcolor: $color(\"clear\"),\n                                    data: this.savedClipboard,\n                                    template: this.listTemplate(1),\n                                    actions: [\n                                        {\n                                            // 删除\n                                            title: \"delete\",\n                                            handler: (sender, indexPath)=>{\n                                                const listView = $(this.listId);\n                                                const data = listView.object(indexPath);\n                                                this.delete(data.content.info.uuid, indexPath);\n                                                listView.delete(indexPath);\n                                            }\n                                        }\n                                    ]\n                                },\n                                events: {\n                                    rowHeight: (sender, indexPath)=>{\n                                        const obj = sender.object(indexPath);\n                                        if (obj.image !== undefined && !obj.image.hidden) // image height\n                                        return obj.content?.info?.height;\n                                        else // no image\n                                        return this.fontSize + this.edges;\n                                    },\n                                    reorderBegan: (indexPath)=>{\n                                        // 用于纠正 rowHeight 高度计算\n                                        this.reorder.content = this.savedClipboard[indexPath.section].rows[indexPath.row].content;\n                                        this.reorder.image = this.savedClipboard[indexPath.section].rows[indexPath.row].image;\n                                        this.reorder.section = indexPath.section;\n                                        this.reorder.from = indexPath.row;\n                                        this.reorder.to = undefined;\n                                    },\n                                    reorderMoved: (fromIndexPath, toIndexPath)=>{\n                                        this.reorder.section = toIndexPath.section;\n                                        this.reorder.to = toIndexPath.row;\n                                    },\n                                    reorderFinished: ()=>{\n                                        if (this.reorder.to === undefined) return;\n                                        this.move(this.reorder.from, this.reorder.to, this.reorder.section);\n                                    }\n                                },\n                                layout: (make, view)=>{\n                                    make.width.equalTo(view.super);\n                                    make.top.equalTo(view.prev.bottom);\n                                    make.bottom.inset(0);\n                                }\n                            }\n                        ]\n                    });\n                }\n            },\n            {\n                symbol: \"square.and.arrow.down.on.square\",\n                tapped: (animate)=>{\n                    animate.start();\n                    this.readClipboard(true);\n                    animate.done();\n                }\n            }\n        ]);\n        pageController.navigationController.navigationBar.setBackgroundColor($229dd9dd444bc99f$require$UIKit.primaryViewBackgroundColor);\n        if (this.kernel.isUseJsboxNav) pageController.navigationController.navigationBar.withoutStatusBarHeight();\n        pageController.setView(this.getListView());\n        return pageController;\n    }\n}\nmodule.exports = $229dd9dd444bc99f$var$Clipboard;\n\n});\nparcelRequire.register(\"dgvQV\", function(module, exports) {\n\nvar $1cJLV = parcelRequire(\"1cJLV\");\nvar $9a857a42b9a18390$require$UIKit = $1cJLV.UIKit;\nvar $9a857a42b9a18390$require$NavigationItem = $1cJLV.NavigationItem;\nvar $9a857a42b9a18390$require$PageController = $1cJLV.PageController;\nvar $9a857a42b9a18390$require$Sheet = $1cJLV.Sheet;\n/**\n * @typedef {import(\"../../app\").AppKernel} AppKernel\n */ class $9a857a42b9a18390$var$Editor {\n    /**\n     * @param {AppKernel} kernel\n     */ constructor(kernel){\n        this.kernel = kernel;\n        this.id = \"editor\";\n        // 原始数据\n        this.originalContent = undefined;\n    }\n    /**\n     * 编辑器内容\n     * @param {string} text\n     */ set text(text = \"\") {\n        if (this.originalContent === undefined) // 原始内容\n        this.originalContent = text;\n        this._text = text;\n    }\n    get text() {\n        return this._text;\n    }\n    getActionButton() {\n        return {\n            symbol: \"bolt.circle\",\n            tapped: (sender, senderMaybe)=>{\n                // senderMaybe 处理 Sheet addNavBar 中的按钮\n                if (senderMaybe) sender = senderMaybe;\n                const range = $(this.id).selectedRange;\n                const content = {\n                    text: this.text,\n                    selectedRange: range,\n                    selectedText: this.text.slice(range.location, range.location + range.length)\n                };\n                const popover = $ui.popover({\n                    sourceView: sender,\n                    directions: $popoverDirection.up,\n                    size: $size(200, 300),\n                    views: [\n                        this.kernel.actionManager.getActionListView({\n                        }, {\n                            didSelect: (sender, indexPath, data)=>{\n                                popover.dismiss();\n                                const action = this.kernel.actionManager.getActionHandler(data.info.info.type, data.info.info.dir);\n                                setTimeout(()=>action(content)\n                                , 500);\n                            }\n                        })\n                    ]\n                });\n            }\n        };\n    }\n    setContent(text) {\n        this.text = text;\n        $(this.id).text = text;\n    }\n    getView(type = \"text\") {\n        return {\n            type: type,\n            layout: $layout.fill,\n            props: {\n                id: this.id,\n                lineNumbers: this.kernel.setting.get(\"editor.code.lineNumbers\"),\n                theme: this.kernel.setting.get($device.isDarkMode ? \"editor.code.darkTheme\" : \"editor.code.lightTheme\"),\n                text: this.text,\n                insets: $insets(15, 15, type === \"text\" ? this.kernel.setting.get(\"editor.text.insets\") : 15, 15)\n            },\n            events: {\n                ready: (sender)=>{\n                    if (this.text === \"\") // 自动弹出键盘\n                    setTimeout(()=>sender.focus()\n                    , 500);\n                },\n                didChange: (sender)=>{\n                    this.text = sender.text;\n                }\n            }\n        };\n    }\n    pageSheet(text = \"\", callback, title, navButtons = [], type = \"text\") {\n        this.text = text;\n        navButtons.unshift(this.getActionButton());\n        const sheet = new $9a857a42b9a18390$require$Sheet();\n        sheet.setView(this.getView(type)).addNavBar({\n            title: title,\n            popButton: {\n                title: $l10n(\"DONE\"),\n                tapped: ()=>callback(this.text)\n            },\n            rightButtons: navButtons\n        });\n        sheet.pageController.navigationController.navigationBar.contentViewHeightOffset = 0;\n        sheet.init().present();\n    }\n    /**\n     *\n     * @param {*} text\n     * @param {*} callback\n     * @param {Array} navButtons 可通过 Editor.text 属性访问内容，如 editor.text\n     * @param {*} type\n     */ uikitPush(text = \"\", callback, navButtons = [], type = \"text\") {\n        this.text = text;\n        navButtons.unshift(this.getActionButton());\n        $9a857a42b9a18390$require$UIKit.push({\n            title: \"\",\n            navButtons: navButtons.map((button)=>{\n                button.handler = button.tapped;\n                button.tapped = undefined;\n                return button;\n            }),\n            views: [\n                this.getView(type)\n            ],\n            // dealloc: () => callback(this.text),\n            disappeared: ()=>callback(this.text)\n        });\n    }\n    /**\n     *\n     * @param {*} text\n     * @param {*} callback\n     * @param {Array} navButtons 可通过 Editor.text 属性访问内容，如 editor.text\n     * @param {*} type\n     */ getPageController(text = \"\", navButtons = [], type = \"text\") {\n        this.text = text;\n        navButtons.unshift(this.getActionButton());\n        const pageController = new $9a857a42b9a18390$require$PageController();\n        pageController.navigationController.navigationBar.contentViewHeightOffset = 0;\n        pageController.setView(this.getView(type));\n        pageController.navigationItem.setTitle(\"\").setLargeTitleDisplayMode($9a857a42b9a18390$require$NavigationItem.largeTitleDisplayModeNever).setRightButtons(navButtons);\n        return pageController;\n    }\n}\nmodule.exports = $9a857a42b9a18390$var$Editor;\n\n});\n\n\nparcelRequire.register(\"cMkik\", function(module, exports) {\n\nvar $1cJLV = parcelRequire(\"1cJLV\");\nvar $94d9b5cbbb0c4c47$require$Matrix = $1cJLV.Matrix;\nvar $94d9b5cbbb0c4c47$require$Setting = $1cJLV.Setting;\nvar $94d9b5cbbb0c4c47$require$PageController = $1cJLV.PageController;\nvar $94d9b5cbbb0c4c47$require$BarButtonItem = $1cJLV.BarButtonItem;\nvar $94d9b5cbbb0c4c47$require$Sheet = $1cJLV.Sheet;\nvar $94d9b5cbbb0c4c47$require$UIKit = $1cJLV.UIKit;\n\nvar $dgvQV = parcelRequire(\"dgvQV\");\n\nvar $2uLFK = parcelRequire(\"2uLFK\");\n\n/**\r\n * @typedef {import(\"../../app\").AppKernel} AppKernel\r\n */ class $94d9b5cbbb0c4c47$var$ActionManager {\n    matrixId = \"actions\";\n    matrix;\n    reorder = {\n    };\n    /**\r\n     * @param {AppKernel} kernel\r\n     */ constructor(kernel){\n        this.kernel = kernel;\n        // path\n        this.actionPath = \"scripts/action\";\n        this.actionOrderFile = \"order.json\";\n        this.userActionPath = `${this.kernel.fileStorage.basePath}/user_action`;\n        // 用来存储被美化的 Action 分类名称\n        this.typeNameMap = {\n        };\n        // checkUserAction\n        this.checkUserAction();\n    }\n    importExampleAction() {\n        try {\n            Object.keys(__ACTIONS__).forEach((type)=>{\n                const userActionTypePath = `${this.userActionPath}/${type}`;\n                Object.keys(__ACTIONS__[type]).forEach((name)=>{\n                    if (!$file.exists(`${userActionTypePath}/${name}/main.js`)) {\n                        $file.mkdir(userActionTypePath);\n                        $file.mkdir(`${userActionTypePath}/${name}`);\n                        $file.write({\n                            data: $data({\n                                string: __ACTIONS__[type][name][\"main.js\"]\n                            }),\n                            path: `${userActionTypePath}/${name}/main.js`\n                        });\n                        $file.write({\n                            data: $data({\n                                string: __ACTIONS__[type][name][\"config.json\"]\n                            }),\n                            path: `${userActionTypePath}/${name}/config.json`\n                        });\n                        $file.write({\n                            data: $data({\n                                string: __ACTIONS__[type][name][\"README.md\"]\n                            }),\n                            path: `${userActionTypePath}/${name}/README.md`\n                        });\n                    }\n                });\n            });\n        } catch  {\n            $file.list(this.actionPath).forEach((type)=>{\n                const actionTypePath = `${this.actionPath}/${type}`;\n                if ($file.isDirectory(actionTypePath)) {\n                    const userActionTypePath = `${this.userActionPath}/${type}`;\n                    $file.list(actionTypePath).forEach((name)=>{\n                        if (!$file.exists(`${userActionTypePath}/${name}/main.js`)) {\n                            $file.mkdir(userActionTypePath);\n                            $file.copy({\n                                src: `${actionTypePath}/${name}`,\n                                dst: `${userActionTypePath}/${name}`\n                            });\n                        }\n                    });\n                }\n            });\n        }\n    }\n    checkUserAction() {\n        if (!$file.exists(this.userActionPath) || $file.list(this.userActionPath).length === 0) {\n            $file.mkdir(this.userActionPath);\n            this.importExampleAction();\n        }\n    }\n    getActionTypes() {\n        const type = [\n            \"clipboard\",\n            \"editor\"\n        ] // 保证 \"clipboard\", \"editor\" 排在前面\n        ;\n        return type.concat($file.list(this.userActionPath).filter((dir)=>{\n            // 获取 type.indexOf(dir) < 0 的文件夹名\n            if ($file.isDirectory(`${this.userActionPath}/${dir}`) && type.indexOf(dir) < 0) return dir;\n        }));\n    }\n    getActionOrder(type) {\n        const path = `${this.userActionPath}/${type}/${this.actionOrderFile}`;\n        if ($file.exists(path)) return JSON.parse($file.read(path).string);\n        else return [];\n    }\n    getActionHandler(type, name, basePath) {\n        if (!basePath) basePath = `${this.userActionPath}/${type}/${name}`;\n        const config = JSON.parse($file.read(`${basePath}/config.json`).string);\n        return async (data)=>{\n            try {\n                const script = $file.read(`${basePath}/main.js`).string;\n                const MyAction = new Function(\"Action\", `${script}\\n return MyAction`)($2uLFK);\n                const action = new MyAction(this.kernel, config, data);\n                return await action.do();\n            } catch (error) {\n                $ui.error(error);\n                this.kernel.error(error);\n            }\n        };\n    }\n    getActions(type) {\n        const actions = [];\n        const typePath = `${this.userActionPath}/${type}`;\n        if (!$file.exists(typePath)) return [];\n        const pushAction = (item)=>{\n            const basePath = `${typePath}/${item}/`;\n            if ($file.isDirectory(basePath)) {\n                const config = JSON.parse($file.read(basePath + \"config.json\").string);\n                actions.push(Object.assign(config, {\n                    dir: item,\n                    type: type,\n                    name: config.name ?? item,\n                    icon: config.icon\n                }));\n            }\n        };\n        // push 有顺序的 Action\n        const order = this.getActionOrder(type);\n        order.forEach((item)=>pushAction(item)\n        );\n        // push 剩下的 Action\n        $file.list(typePath).forEach((item)=>{\n            if (order.indexOf(item) === -1) pushAction(item);\n        });\n        return actions;\n    }\n    getTypeName(type) {\n        const typeUpperCase = type.toUpperCase();\n        const l10n = $l10n(typeUpperCase);\n        const name = l10n === typeUpperCase ? type : l10n;\n        this.typeNameMap[name] = type;\n        return name;\n    }\n    getTypeDir(name) {\n        return this.typeNameMap[name] ?? name;\n    }\n    actionToData(action) {\n        return {\n            name: {\n                text: action.name\n            },\n            icon: action.icon.slice(0, 5) === \"icon_\" ? {\n                icon: $icon(action.icon.slice(5, action.icon.indexOf(\".\")), $color(\"#ffffff\"))\n            } : {\n                image: $image(action.icon)\n            },\n            color: {\n                bgcolor: this.kernel.setting.getColor(action.color)\n            },\n            info: {\n                info: action\n            } // 此处实际上是 info 模板的 props，所以需要 { info: action }\n        };\n    }\n    titleView(title) {\n        return {\n            name: {\n                hidden: true\n            },\n            icon: {\n                hidden: true\n            },\n            color: {\n                hidden: true\n            },\n            button: {\n                hidden: true\n            },\n            bgcolor: {\n                hidden: true\n            },\n            info: {\n                hidden: false,\n                info: {\n                    title: title\n                }\n            }\n        };\n    }\n    getActionListView(props = {\n    }, events = {\n    }) {\n        const data = [];\n        this.getActionTypes().forEach((type)=>{\n            const section = {\n                title: this.getTypeName(type),\n                rows: []\n            };\n            this.getActions(type).forEach((action)=>{\n                section.rows.push(this.actionToData(action));\n            });\n            data.push(section);\n        });\n        return {\n            type: \"list\",\n            layout: (make, view)=>{\n                make.top.width.equalTo(view.super.safeArea);\n                make.bottom.inset(0);\n            },\n            events: events,\n            props: Object.assign({\n                reorder: false,\n                bgcolor: $color(\"clear\"),\n                rowHeight: 60,\n                sectionTitleHeight: 30,\n                stickyHeader: true,\n                data: data,\n                template: {\n                    props: {\n                        bgcolor: $color(\"clear\")\n                    },\n                    views: [\n                        {\n                            type: \"image\",\n                            props: {\n                                id: \"color\",\n                                cornerRadius: 8,\n                                smoothCorners: true\n                            },\n                            layout: (make, view)=>{\n                                make.centerY.equalTo(view.super);\n                                make.left.inset(15);\n                                make.size.equalTo($size(30, 30));\n                            }\n                        },\n                        {\n                            type: \"image\",\n                            props: {\n                                id: \"icon\",\n                                tintColor: $color(\"#ffffff\")\n                            },\n                            layout: (make, view)=>{\n                                make.centerY.equalTo(view.super);\n                                make.left.inset(20);\n                                make.size.equalTo($size(20, 20));\n                            }\n                        },\n                        {\n                            type: \"label\",\n                            props: {\n                                id: \"name\",\n                                lines: 1,\n                                font: $font(16)\n                            },\n                            layout: (make, view)=>{\n                                make.height.equalTo(30);\n                                make.centerY.equalTo(view.super);\n                                make.left.equalTo(view.prev.right).offset(15);\n                            }\n                        },\n                        {\n                            type: \"label\",\n                            props: {\n                                id: \"info\"\n                            }\n                        }\n                    ]\n                }\n            }, props)\n        };\n    }\n    editActionInfoPageSheet(info, done) {\n        const actionTypes = this.getActionTypes();\n        const actionTypesIndex = {\n        } // 用于反查索引\n        ;\n        actionTypes.forEach((key, index)=>{\n            actionTypesIndex[key] = index;\n        });\n        this.editingActionInfo = info ?? {\n            dir: this.kernel.uuid(),\n            type: \"clipboard\",\n            name: \"MyAction\",\n            color: \"#CC00CC\",\n            icon: \"icon_062.png\",\n            description: \"\"\n        };\n        const SettingUI = new $94d9b5cbbb0c4c47$require$Setting({\n            structure: {\n            },\n            set: (key, value)=>{\n                if (key === \"type\") this.editingActionInfo[key] = value[1];\n                else this.editingActionInfo[key] = value;\n                return true;\n            },\n            get: (key, _default = null)=>{\n                if (key === \"type\") return actionTypesIndex[this.editingActionInfo.type];\n                if (Object.prototype.hasOwnProperty.call(this.editingActionInfo, key)) return this.editingActionInfo[key];\n                else return _default;\n            }\n        });\n        const nameInput = SettingUI.createInput(\"name\", [\n            \"pencil.circle\",\n            \"#FF3366\"\n        ], $l10n(\"NAME\"));\n        const createColor = SettingUI.createColor(\"color\", [\n            \"pencil.tip.crop.circle\",\n            \"#0066CC\"\n        ], $l10n(\"COLOR\"));\n        const iconInput = SettingUI.createIcon(\"icon\", [\n            \"star.circle\",\n            \"#FF9933\"\n        ], $l10n(\"ICON\"), this.kernel.setting.getColor(this.editingActionInfo.color));\n        const typeMenu = SettingUI.createMenu(\"type\", [\n            \"tag.circle\",\n            \"#33CC33\"\n        ], $l10n(\"TYPE\"), actionTypes, true);\n        const description = {\n            type: \"view\",\n            views: [\n                {\n                    type: \"text\",\n                    props: {\n                        id: \"action-text\",\n                        textColor: $color(\"#000000\", \"secondaryText\"),\n                        bgcolor: $color(\"systemBackground\"),\n                        text: this.editingActionInfo.description,\n                        insets: $insets(10, 10, 10, 10)\n                    },\n                    layout: $layout.fill,\n                    events: {\n                        tapped: (sender)=>{\n                            $(\"actionInfoPageSheetList\").scrollToOffset($point(0, info ? 230 : 280));\n                            setTimeout(()=>sender.focus()\n                            , 200);\n                        },\n                        didChange: (sender)=>{\n                            this.editingActionInfo.description = sender.text;\n                        }\n                    }\n                }\n            ],\n            layout: $layout.fill\n        };\n        const data = [\n            {\n                title: $l10n(\"INFORMATION\"),\n                rows: [\n                    nameInput,\n                    createColor,\n                    iconInput\n                ]\n            },\n            {\n                title: $l10n(\"DESCRIPTION\"),\n                rows: [\n                    description\n                ]\n            }\n        ];\n        // 只有新建时才可选择类型\n        if (!info) data[0].rows = data[0].rows.concat(typeMenu);\n        const sheet = new $94d9b5cbbb0c4c47$require$Sheet();\n        sheet.setView({\n            type: \"list\",\n            props: {\n                id: \"actionInfoPageSheetList\",\n                bgcolor: $color(\"insetGroupedBackground\"),\n                style: 2,\n                separatorInset: $insets(0, 50, 0, 10),\n                data: data\n            },\n            layout: $layout.fill,\n            events: {\n                rowHeight: (sender, indexPath)=>indexPath.section === 1 ? 120 : 50\n            }\n        }).addNavBar({\n            title: \"\",\n            popButton: {\n                title: \"Done\",\n                tapped: ()=>{\n                    this.saveActionInfo(this.editingActionInfo);\n                    // 更新 clipboard 中的 menu\n                    const Clipboard = (parcelRequire(\"2Ygkq\"));\n                    Clipboard.updateMenu(this.kernel);\n                    if (done) done(this.editingActionInfo);\n                }\n            }\n        }).init().present();\n    }\n    editActionMainJs(text = \"\", info) {\n        const editor = new $dgvQV(this.kernel);\n        editor.pageSheet(text, (content)=>{\n            this.saveMainJs(info, content);\n        }, info.name, [\n            {\n                symbol: \"book.circle\",\n                tapped: ()=>{\n                    const content = $file.read(\"scripts/action/README.md\").string;\n                    const sheet = new $94d9b5cbbb0c4c47$require$Sheet();\n                    sheet.setView({\n                        type: \"markdown\",\n                        props: {\n                            content: content\n                        },\n                        layout: (make, view)=>{\n                            make.size.equalTo(view.super);\n                        }\n                    }).init().present();\n                }\n            }\n        ], \"code\");\n    }\n    saveActionInfo(info) {\n        const path = `${this.userActionPath}/${info.type}/${info.dir}`;\n        if (!$file.exists(path)) $file.mkdir(path);\n        $file.write({\n            data: $data({\n                string: JSON.stringify({\n                    icon: info.icon,\n                    color: info.color,\n                    name: info.name,\n                    description: info.description\n                })\n            }),\n            path: `${path}/config.json`\n        });\n    }\n    saveMainJs(info, content) {\n        const path = `${this.userActionPath}/${info.type}/${info.dir}`;\n        const mainJsPath = `${path}/main.js`;\n        if (!$file.exists(path)) $file.mkdir(path);\n        if ($text.MD5(content) === $text.MD5($file.read(mainJsPath)?.string ?? \"\")) return;\n        $file.write({\n            data: $data({\n                string: content\n            }),\n            path: mainJsPath\n        });\n    }\n    saveOrder(type, order) {\n        $file.write({\n            data: $data({\n                string: JSON.stringify(order)\n            }),\n            path: `${this.userActionPath}/${type}/${this.actionOrderFile}`\n        });\n    }\n    move(from, to, data) {\n        if (from.section === to.section && from.row === to.row) return;\n        // 处理 data 数据\n        data = data.map((section)=>{\n            section.rows = section.rows.map((item)=>item.info.info\n            );\n            return section;\n        });\n        const fromSection = data[from.section], toSection = data[to.section];\n        const getOrder = (section)=>{\n            const order = [];\n            data[section].rows.forEach((item)=>order.push(item.dir)\n            );\n            return order;\n        };\n        const updateUI = (insertFirst = true, type)=>{\n            const actionsView = this.matrix;\n            const toData = this.actionToData(Object.assign(toSection.rows[to.row], {\n                type: type\n            }));\n            if (insertFirst) {\n                actionsView.insert({\n                    indexPath: $indexPath(to.section, to.row + 1),\n                    value: toData\n                }, false);\n                actionsView.delete(from, false);\n            } else {\n                actionsView.delete(from, false);\n                actionsView.insert({\n                    indexPath: to,\n                    value: toData\n                }, false);\n            }\n        };\n        const fromType = this.getTypeDir(fromSection.title);\n        const toType = this.getTypeDir(toSection.title);\n        // 判断是否跨 section\n        if (from.section === to.section) this.saveOrder(fromType, getOrder(from.section));\n        else {\n            // 跨 section 则同时移动 Action 目录\n            this.saveOrder(fromType, getOrder(from.section));\n            this.saveOrder(toType, getOrder(to.section));\n            $file.move({\n                src: `${this.userActionPath}/${fromType}/${toSection.rows[to.row].dir}`,\n                dst: `${this.userActionPath}/${toType}/${toSection.rows[to.row].dir}`\n            });\n        }\n        // 跨 section 时先插入或先删除无影响，type 永远是 to 的 type\n        updateUI(from.row < to.row, toType);\n    }\n    delete(info) {\n        $file.delete(`${this.userActionPath}/${info.type}/${info.dir}`);\n    }\n    menuItems() {\n        // 卡片长按菜单\n        return [\n            {\n                // 编辑信息\n                title: $l10n(\"EDIT_DETAILS\"),\n                symbol: \"slider.horizontal.3\",\n                handler: (sender, indexPath)=>{\n                    const view = sender.cell(indexPath);\n                    const oldInfo = view.get(\"info\").info;\n                    this.editActionInfoPageSheet(oldInfo, (info)=>{\n                        // 更新视图信息\n                        view.get(\"info\").info = info;\n                        view.get(\"color\").bgcolor = this.kernel.setting.getColor(info.color);\n                        view.get(\"name\").text = info.name;\n                        if (info.icon.slice(0, 5) === \"icon_\") view.get(\"icon\").icon = $icon(info.icon.slice(5, info.icon.indexOf(\".\")), $color(\"#ffffff\"));\n                        else view.get(\"icon\").image = $image(info.icon);\n                    });\n                }\n            },\n            {\n                // 编辑脚本\n                title: $l10n(\"EDIT_SCRIPT\"),\n                symbol: \"square.and.pencil\",\n                handler: (sender, indexPath, data)=>{\n                    const info = data.info.info;\n                    if (!info) return;\n                    const path = `${this.userActionPath}/${info.type}/${info.dir}/main.js`;\n                    const main = $file.read(path).string;\n                    this.editActionMainJs(main, info);\n                }\n            },\n            {\n                // 删除\n                title: $l10n(\"DELETE\"),\n                symbol: \"trash\",\n                destructive: true,\n                handler: (sender, indexPath, data)=>{\n                    this.kernel.deleteConfirm($l10n(\"CONFIRM_DELETE_MSG\"), ()=>{\n                        this.delete(data.info.info);\n                        sender.delete(indexPath);\n                    });\n                }\n            }\n        ];\n    }\n    getNavButtons() {\n        return [\n            {\n                // 添加\n                symbol: \"plus.circle\",\n                menu: {\n                    pullDown: true,\n                    asPrimary: true,\n                    items: [\n                        {\n                            title: $l10n(\"CREATE_NEW_ACTION\"),\n                            handler: ()=>{\n                                this.editActionInfoPageSheet(null, (info)=>{\n                                    this.matrix.insert({\n                                        indexPath: $indexPath(this.getActionTypes().indexOf(info.type), 0),\n                                        value: this.actionToData(info)\n                                    });\n                                    const MainJsTemplate = $file.read(`${this.actionPath}/template.js`).string;\n                                    this.saveMainJs(info, MainJsTemplate);\n                                    this.editActionMainJs(MainJsTemplate, info);\n                                });\n                            }\n                        },\n                        {\n                            title: $l10n(\"CREATE_NEW_TYPE\"),\n                            handler: ()=>{\n                                $input.text({\n                                    text: \"\",\n                                    placeholder: $l10n(\"CREATE_NEW_TYPE\"),\n                                    handler: (text)=>{\n                                        text = text.trim();\n                                        if (text === \"\") {\n                                            $ui.toast($l10n(\"INVALID_VALUE\"));\n                                            return;\n                                        }\n                                        const path = `${this.userActionPath}/${text}`;\n                                        if ($file.isDirectory(path)) $ui.warning($l10n(\"TYPE_ALREADY_EXISTS\"));\n                                        else {\n                                            $file.mkdir(path);\n                                            $ui.success($l10n(\"SUCCESS\"));\n                                        }\n                                    }\n                                });\n                            }\n                        }\n                    ]\n                }\n            },\n            {\n                // 排序\n                symbol: \"arrow.up.arrow.down.circle\",\n                tapped: (animate, sender)=>{\n                    $ui.popover({\n                        sourceView: sender,\n                        directions: $popoverDirection.up,\n                        size: $size(200, 300),\n                        views: [\n                            this.getActionListView({\n                                reorder: true,\n                                actions: [\n                                    {\n                                        // 删除\n                                        title: \"delete\",\n                                        handler: (sender, indexPath)=>{\n                                            const matrixView = this.matrix;\n                                            const info = matrixView.object(indexPath, false).info.info;\n                                            this.delete(info);\n                                            matrixView.delete(indexPath, false);\n                                        }\n                                    }\n                                ]\n                            }, {\n                                reorderBegan: (indexPath)=>{\n                                    this.reorder.from = indexPath;\n                                    this.reorder.to = undefined;\n                                },\n                                reorderMoved: (fromIndexPath, toIndexPath)=>{\n                                    this.reorder.to = toIndexPath;\n                                },\n                                reorderFinished: (data)=>{\n                                    if (this.reorder.to === undefined) return;\n                                    this.move(this.reorder.from, this.reorder.to, data);\n                                }\n                            })\n                        ]\n                    });\n                }\n            }\n        ];\n    }\n    actionsToData() {\n        // 格式化数据供 matrix 使用\n        const data = [];\n        this.getActionTypes().forEach((type)=>{\n            const section = {\n                title: this.getTypeName(type),\n                items: []\n            };\n            this.getActions(type).forEach((action)=>{\n                section.items.push(this.actionToData(action));\n            });\n            data.push(section);\n        });\n        return data;\n    }\n    getMatrixView({ columns: columns = 2 , spacing: spacing = 15 , itemHeight: itemHeight = 100  } = {\n    }) {\n        this.matrix = $94d9b5cbbb0c4c47$require$Matrix.create({\n            type: \"matrix\",\n            props: {\n                id: this.matrixId,\n                columns: columns,\n                itemHeight: itemHeight,\n                spacing: spacing,\n                bgcolor: $94d9b5cbbb0c4c47$require$UIKit.scrollViewBackgroundColor,\n                menu: {\n                    items: this.menuItems()\n                },\n                data: this.actionsToData(),\n                template: {\n                    props: {\n                        smoothCorners: true,\n                        cornerRadius: 10,\n                        bgcolor: $color(\"#ffffff\", \"#242424\")\n                    },\n                    views: [\n                        {\n                            type: \"image\",\n                            props: {\n                                id: \"color\",\n                                cornerRadius: 8,\n                                smoothCorners: true\n                            },\n                            layout: (make)=>{\n                                make.top.left.inset(10);\n                                make.size.equalTo($size(30, 30));\n                            }\n                        },\n                        {\n                            type: \"image\",\n                            props: {\n                                id: \"icon\",\n                                tintColor: $color(\"#ffffff\")\n                            },\n                            layout: (make)=>{\n                                make.top.left.inset(15);\n                                make.size.equalTo($size(20, 20));\n                            }\n                        },\n                        {\n                            // button\n                            type: \"button\",\n                            props: {\n                                bgcolor: $color(\"clear\"),\n                                tintColor: $94d9b5cbbb0c4c47$require$UIKit.textColor,\n                                titleColor: $94d9b5cbbb0c4c47$require$UIKit.textColor,\n                                contentEdgeInsets: $insets(0, 0, 0, 0),\n                                titleEdgeInsets: $insets(0, 0, 0, 0),\n                                imageEdgeInsets: $insets(0, 0, 0, 0)\n                            },\n                            views: [\n                                {\n                                    type: \"image\",\n                                    props: {\n                                        symbol: \"ellipsis.circle\"\n                                    },\n                                    layout: (make, view)=>{\n                                        make.center.equalTo(view.super);\n                                        make.size.equalTo($94d9b5cbbb0c4c47$require$BarButtonItem.iconSize);\n                                    }\n                                }\n                            ],\n                            events: {\n                                tapped: (sender)=>{\n                                    const info = sender.next.info;\n                                    if (!info) return;\n                                    const path = `${this.userActionPath}/${info.type}/${info.dir}/main.js`;\n                                    const main = $file.read(path).string;\n                                    this.editActionMainJs(main, info);\n                                }\n                            },\n                            layout: (make)=>{\n                                make.top.right.inset(0);\n                                make.size.equalTo($94d9b5cbbb0c4c47$require$BarButtonItem.size);\n                            }\n                        },\n                        {\n                            // 用来保存信息\n                            type: \"view\",\n                            props: {\n                                id: \"info\",\n                                hidden: true\n                            }\n                        },\n                        {\n                            type: \"label\",\n                            props: {\n                                id: \"name\",\n                                font: $font(16)\n                            },\n                            layout: (make, view)=>{\n                                make.bottom.left.inset(10);\n                                make.width.equalTo(view.super);\n                            }\n                        }\n                    ]\n                }\n            },\n            layout: $layout.fill,\n            events: {\n                didSelect: (sender, indexPath, data)=>{\n                    const info = data.info.info;\n                    this.getActionHandler(info.type, info.dir)({\n                        text: info.type === \"clipboard\" || info.type === \"uncategorized\" ? $clipboard.text : null,\n                        uuid: null\n                    });\n                },\n                pulled: (sender)=>{\n                    $delay(0.5, ()=>{\n                        sender.endRefreshing();\n                        this.matrix.update(this.actionsToData());\n                    });\n                }\n            }\n        });\n        return this.matrix.definition;\n    }\n    getPageView() {\n        const pageController = new $94d9b5cbbb0c4c47$require$PageController();\n        pageController.navigationItem.setTitle($l10n(\"ACTIONS\")).setRightButtons(this.getNavButtons());\n        pageController.setView(this.getMatrixView());\n        return pageController.getPage();\n    }\n    present() {\n        const actionSheet = new $94d9b5cbbb0c4c47$require$Sheet();\n        actionSheet.setView(this.getMatrixView()).addNavBar({\n            title: $l10n(\"ACTIONS\"),\n            popButton: {\n                symbol: \"xmark.circle\"\n            },\n            rightButtons: this.getNavButtons()\n        }).init().present();\n    }\n}\nmodule.exports = $94d9b5cbbb0c4c47$var$ActionManager;\n\n});\nparcelRequire.register(\"2uLFK\", function(module, exports) {\n\nvar $1cJLV = parcelRequire(\"1cJLV\");\nvar $1d135cd4f734fd97$require$Sheet = $1cJLV.Sheet;\n/**\n * @typedef {import(\"../app\").AppKernel} AppKernel\n */ /**\n * @typedef {Action} Action\n */ class $1d135cd4f734fd97$var$Action {\n    /**\n     *\n     * @param {AppKernel} kernel\n     * @param {*} config\n     * @param {*} data\n     */ constructor(kernel, config, data){\n        this.kernel = kernel;\n        this.config = config;\n        Object.assign(this, data);\n        const l10n = this.l10n();\n        Object.keys(l10n).forEach((language)=>{\n            this.kernel.l10n(language, l10n[language]);\n        });\n    }\n    l10n() {\n        return {\n        };\n    }\n    push(args) {\n        this.pageSheet(args);\n    }\n    /**\n     * page sheet\n     * @param {*} args \n     *  {\n            view: 视图对象\n            title: 中间标题\n            done: 点击左上角按钮后的回调函数\n            doneText: 左上角文本\n        }\n     */ pageSheet({ view: view , title: title = \"\" , done: done , doneText: doneText = $l10n(\"DONE\")  }) {\n        const sheet = new $1d135cd4f734fd97$require$Sheet();\n        sheet.setView(view).addNavBar({\n            title: title,\n            popButton: {\n                title: doneText,\n                tapped: ()=>{\n                    if (done) done();\n                }\n            }\n        }).init().present();\n    }\n    /**\n     * 获取所有剪切板数据\n     * @returns Array\n     */ getAllClipboard() {\n        return this.kernel.storage.all().map((item)=>item.text\n        );\n    }\n    getAllContent() {\n        return this.getAllClipboard();\n    }\n    setContent(text) {\n        this.text = text;\n        this.kernel.editor.setContent(text);\n    }\n    get originalContent() {\n        return this.kernel.editor.originalContent;\n    }\n    async runAction(type, name) {\n        const handler = this.kernel.actionManager.getActionHandler(type, name);\n        return new Promise(async (resolve, reject)=>{\n            if (typeof handler === \"function\") {\n                const result = await handler();\n                resolve(result);\n            } else reject(`No such Action: ${type}/${name}`);\n        });\n    }\n}\nmodule.exports = $1d135cd4f734fd97$var$Action;\n\n});\n\n\nparcelRequire.register(\"4lgvP\", function(module, exports) {\n\nvar $1cJLV = parcelRequire(\"1cJLV\");\nvar $3295ee9f84916aa3$require$versionCompare = $1cJLV.versionCompare;\nvar $3295ee9f84916aa3$require$UIKit = $1cJLV.UIKit;\nvar $3295ee9f84916aa3$require$Sheet = $1cJLV.Sheet;\n\nvar $iRMmt = parcelRequire(\"iRMmt\");\n\nvar $5oABG = parcelRequire(\"5oABG\");\n/**\r\n * @typedef {import(\"./app\").AppKernel} AppKernel\r\n */ /**\r\n * @type {AppKernel}\r\n */ let $3295ee9f84916aa3$var$kernel;\nfunction $3295ee9f84916aa3$var$clipboard() {\n    $3295ee9f84916aa3$var$kernel.setting.method.exportClipboard = (animate)=>{\n        animate.actionStart();\n        $3295ee9f84916aa3$var$kernel.storage.export((success)=>{\n            if (success) animate.actionDone();\n            else animate.actionCancel();\n        });\n    };\n    $3295ee9f84916aa3$var$kernel.setting.method.importClipboard = (animate)=>{\n        animate.actionStart();\n        $ui.alert({\n            title: $l10n(\"ALERT_INFO\"),\n            message: $l10n(\"OVERWRITE_ALERT\"),\n            actions: [\n                {\n                    title: $l10n(\"OK\"),\n                    handler: ()=>{\n                        $drive.open({\n                            handler: (data)=>{\n                                if (data === undefined) {\n                                    animate.actionCancel();\n                                    return;\n                                }\n                                if (data.fileName.slice(-2) === \"db\" || data.fileName.slice(-3) === \"zip\") $3295ee9f84916aa3$var$kernel.storage.import(data).then(()=>{\n                                    animate.actionDone();\n                                    $delay(0.3, ()=>{\n                                        $addin.restart();\n                                    });\n                                }).catch((error)=>{\n                                    $ui.error(error);\n                                    $3295ee9f84916aa3$var$kernel.print(error);\n                                    animate.actionCancel();\n                                });\n                                else {\n                                    $ui.warning($l10n(\"FILE_TYPE_ERROR\"));\n                                    animate.actionCancel();\n                                }\n                            }\n                        });\n                    }\n                },\n                {\n                    title: $l10n(\"CANCEL\"),\n                    handler: ()=>animate.actionCancel()\n                }\n            ]\n        });\n    };\n    $3295ee9f84916aa3$var$kernel.setting.method.sync = (animate)=>{\n        $ui.alert({\n            title: $l10n(\"SYNC_NOW\"),\n            message: $l10n(\"SYNC_ALERT_INFO\"),\n            actions: [\n                {\n                    title: $l10n(\"CANCEL\")\n                },\n                {\n                    title: $l10n(\"OK\"),\n                    handler: ()=>{\n                        animate.actionStart();\n                        setTimeout(()=>{\n                            $3295ee9f84916aa3$var$kernel.storage.syncByiCloud(true).then(()=>{\n                                animate.actionDone();\n                            }).catch((error)=>{\n                                $ui.error(error);\n                                $3295ee9f84916aa3$var$kernel.print(error);\n                                animate.actionCancel();\n                            });\n                        }, 200);\n                    }\n                }\n            ]\n        });\n    };\n    $3295ee9f84916aa3$var$kernel.setting.method.deleteICloudData = (animate)=>{\n        $3295ee9f84916aa3$var$kernel.deleteConfirm($l10n(\"CONFIRM_DELETE_MSG\"), ()=>{\n            if ($3295ee9f84916aa3$var$kernel.storage.deleteICloudData()) animate.actionDone();\n            else $ui.toast($l10n(\"DELETE_ERROR\"));\n        });\n    };\n    $3295ee9f84916aa3$var$kernel.setting.method.rebuildDatabase = (animate)=>{\n        animate.actionStart();\n        const rebuildDatabase = ()=>{\n            try {\n                $3295ee9f84916aa3$var$kernel.storage.rebuild();\n                animate.actionDone();\n                $delay(0.8, ()=>$addin.restart()\n                );\n            } catch (error) {\n                animate.actionCancel();\n                $ui.alert(error);\n            }\n        };\n        $ui.alert({\n            title: $l10n(\"REBUILD_DATABASE_ALERT\"),\n            actions: [\n                {\n                    title: $l10n(\"REBUILD\"),\n                    style: $alertActionType.destructive,\n                    handler: ()=>{\n                        rebuildDatabase();\n                    }\n                },\n                {\n                    title: $l10n(\"CANCEL\")\n                }\n            ]\n        });\n    };\n}\nfunction $3295ee9f84916aa3$var$action() {\n    $3295ee9f84916aa3$var$kernel.setting.method.exportAction = (animate)=>{\n        animate.actionStart();\n        // 备份动作\n        const fileName = \"actions.zip\";\n        const tempPath = `${$3295ee9f84916aa3$var$kernel.fileStorage.basePath}/${fileName}`;\n        $archiver.zip({\n            directory: $3295ee9f84916aa3$var$kernel.actionManager.userActionPath,\n            dest: tempPath,\n            handler: ()=>{\n                $share.sheet({\n                    items: [\n                        {\n                            name: fileName,\n                            data: $data({\n                                path: tempPath\n                            })\n                        }\n                    ],\n                    handler: (success)=>{\n                        if (success) animate.actionDone();\n                        else animate.actionCancel();\n                        $file.delete(tempPath);\n                    }\n                });\n            }\n        });\n    };\n    $3295ee9f84916aa3$var$kernel.setting.method.importAction = (animate)=>{\n        animate.actionStart();\n        $drive.open({\n            handler: (data)=>{\n                if (data === undefined) {\n                    animate.actionCancel();\n                    return;\n                }\n                if (data.fileName.slice(-3) === \"zip\") {\n                    const path = `${$3295ee9f84916aa3$var$kernel.fileStorage.basePath}/action_import`;\n                    $archiver.unzip({\n                        file: data,\n                        dest: path,\n                        handler: ()=>{\n                            $file.list(path).forEach((item)=>{\n                                if ($file.isDirectory(`${path}/${item}`)) $file.copy({\n                                    src: `${path}/${item}`,\n                                    dst: `${$3295ee9f84916aa3$var$kernel.actionManager.userActionPath}${item}`\n                                });\n                            });\n                            $file.delete(path);\n                            animate.actionDone();\n                        }\n                    });\n                } else {\n                    $ui.warning($l10n(\"FILE_TYPE_ERROR\"));\n                    animate.actionCancel();\n                }\n            }\n        });\n    };\n    $3295ee9f84916aa3$var$kernel.setting.method.importExampleAction = (animate)=>{\n        animate.actionStart();\n        $3295ee9f84916aa3$var$kernel.actionManager.importExampleAction();\n        animate.actionDone();\n    };\n    $3295ee9f84916aa3$var$kernel.setting.method.rebuildAction = (animate)=>{\n        animate.actionStart();\n        $ui.alert({\n            title: $l10n(\"REBUILD_ACTION_DATABASE_ALERT\"),\n            actions: [\n                {\n                    title: $l10n(\"REBUILD\"),\n                    style: $alertActionType.destructive,\n                    handler: ()=>{\n                        $file.delete($3295ee9f84916aa3$var$kernel.actionManager.userActionPath);\n                        animate.actionDone();\n                        $delay(0.8, ()=>$addin.restart()\n                        );\n                    }\n                },\n                {\n                    title: $l10n(\"CANCEL\")\n                }\n            ]\n        });\n    };\n}\n\nfunction $3295ee9f84916aa3$var$keyboard() {\n    $3295ee9f84916aa3$var$kernel.setting.method.previewKeyboard = (animate)=>{\n        animate.touchHighlightStart();\n        const Keyboard = (parcelRequire(\"ehiE8\"));\n        const keyboard = new Keyboard($3295ee9f84916aa3$var$kernel).getView();\n        $3295ee9f84916aa3$require$UIKit.push({\n            views: [\n                keyboard\n            ],\n            disappeared: ()=>animate.touchHighlightEnd()\n        });\n    };\n    $3295ee9f84916aa3$var$kernel.setting.method.setKeyboardQuickStart = (animate)=>{\n        $iRMmt.sheet();\n    };\n}\n\nfunction $3295ee9f84916aa3$var$todayWidget() {\n    $3295ee9f84916aa3$var$kernel.setting.method.previewTodayWidget = (animate)=>{\n        animate.touchHighlightStart();\n        const Today = (parcelRequire(\"knL6n\"));\n        const today = new Today($3295ee9f84916aa3$var$kernel).getView();\n        $3295ee9f84916aa3$require$UIKit.push({\n            views: [\n                today\n            ],\n            disappeared: ()=>animate.touchHighlightEnd()\n        });\n    };\n    $3295ee9f84916aa3$var$kernel.setting.method.setTodayWidgetActions = (animate)=>{\n        $5oABG.sheet($3295ee9f84916aa3$var$kernel);\n    };\n}\n\n/**\r\n * 注入设置中的脚本类型方法\r\n * @param {AppKernel} kernel\r\n */ function $3295ee9f84916aa3$var$settingMethods(appKernel) {\n    $3295ee9f84916aa3$var$kernel = appKernel;\n    $3295ee9f84916aa3$var$kernel.setting.method.readme = (animate)=>{\n        const content = (()=>{\n            const file = $device.info?.language?.startsWith(\"zh\") ? \"README_CN.md\" : \"README.md\";\n            try {\n                return __README__[file];\n            } catch  {\n                return $file.read(file).string;\n            }\n        })();\n        const sheet = new $3295ee9f84916aa3$require$Sheet();\n        sheet.setView({\n            type: \"markdown\",\n            props: {\n                content: content\n            },\n            layout: (make, view)=>{\n                make.size.equalTo(view.super);\n            }\n        }).init().present();\n    };\n    $3295ee9f84916aa3$var$kernel.setting.method.checkUpdate = (animate)=>{\n        animate.actionStart();\n        $3295ee9f84916aa3$var$kernel.checkUpdate((content)=>{\n            $file.write({\n                data: $data({\n                    string: content\n                }),\n                path: \"scripts/libs/easy-jsbox.js\"\n            });\n            $ui.toast(\"The framework has been updated.\");\n        });\n        $http.get({\n            url: \"https://raw.githubusercontent.com/ipuppet/CAIO/master/config.json\",\n            handler: (resp)=>{\n                const version = resp.data?.info.version;\n                const config = JSON.parse($file.read(\"config.json\").string);\n                if ($3295ee9f84916aa3$require$versionCompare(version, config.info.version) > 0) $ui.alert({\n                    title: \"New Version\",\n                    message: `New version found: ${version}\\nUpdate via Github or click the button to open Erots.`,\n                    actions: [\n                        {\n                            title: $l10n(\"CANCEL\")\n                        },\n                        {\n                            title: \"Erots\",\n                            handler: ()=>{\n                                $addin.run({\n                                    name: \"Erots\",\n                                    query: {\n                                        q: \"show\",\n                                        objectId: \"603e6eaaca0dd64fcef93e2d\"\n                                    }\n                                });\n                            }\n                        }\n                    ]\n                });\n                else $ui.toast(\"No need to update\");\n                animate.actionDone();\n            }\n        });\n    };\n    $3295ee9f84916aa3$var$kernel.setting.method.previewWidget = (animate)=>{\n        const { Widget: Widget  } = (parcelRequire(\"l35Ko\"));\n        const widgets = {\n        };\n        try {\n            JSON.parse($file.read(\"widget-options.json\").string).forEach((item)=>{\n                widgets[item.name] = item.value;\n            });\n        } catch (error) {\n            $ui.error(error);\n            return;\n        }\n        $ui.menu({\n            items: Object.keys(widgets),\n            handler: (name)=>{\n                Widget.render(widgets[name]);\n            }\n        });\n    };\n    $3295ee9f84916aa3$var$clipboard();\n    $3295ee9f84916aa3$var$action();\n    $3295ee9f84916aa3$var$keyboard();\n    $3295ee9f84916aa3$var$todayWidget();\n}\nmodule.exports = $3295ee9f84916aa3$var$settingMethods;\n\n});\nparcelRequire.register(\"iRMmt\", function(module, exports) {\n\nvar $1cJLV = parcelRequire(\"1cJLV\");\nvar $dbc2b0d4164c0529$require$UIKit = $1cJLV.UIKit;\nvar $dbc2b0d4164c0529$require$Sheet = $1cJLV.Sheet;\nvar $dbc2b0d4164c0529$require$NavigationItem = $1cJLV.NavigationItem;\nvar $dbc2b0d4164c0529$require$PageController = $1cJLV.PageController;\nclass $dbc2b0d4164c0529$var$KeyboardScripts {\n    constructor(){\n        this.listId = \"keyboard-script-list\";\n    }\n    static getAddins() {\n        const addins = $cache.get(\"keyboard.addins\");\n        if (addins === undefined) {\n            this.setAddins();\n            return [];\n        }\n        return JSON.parse(addins);\n    }\n    static setAddins(list = []) {\n        list.map((item, i)=>{\n            if (item === null) list.splice(i, 1);\n        });\n        $cache.set(\"keyboard.addins\", JSON.stringify(list));\n    }\n    getUnsetAddins() {\n        const current = $addin.current.name // 用于排除自身\n        ;\n        const addins = $dbc2b0d4164c0529$var$KeyboardScripts.getAddins();\n        const res = [];\n        $addin.list?.forEach((addin)=>{\n            const name = addin.displayName;\n            if (addins.indexOf(name) === -1 && current !== name) res.push(name);\n        });\n        return res;\n    }\n    add() {\n        const view = {\n            type: \"list\",\n            props: {\n                data: this.getUnsetAddins()\n            },\n            events: {\n                didSelect: (sender, indexPath, data)=>{\n                    const addins = $dbc2b0d4164c0529$var$KeyboardScripts.getAddins();\n                    addins.unshift(data);\n                    $dbc2b0d4164c0529$var$KeyboardScripts.setAddins(addins);\n                    $(this.listId).insert({\n                        indexPath: $indexPath(0, 0),\n                        value: data\n                    });\n                    sender.delete(indexPath);\n                }\n            },\n            layout: $layout.fill\n        };\n        const sheet = new $dbc2b0d4164c0529$require$Sheet();\n        sheet.setView(view).addNavBar({\n            title: $l10n(\"ADD\")\n        }).init().present();\n    }\n    getNavButtons() {\n        return [\n            {\n                symbol: \"plus\",\n                tapped: ()=>this.add()\n            }\n        ];\n    }\n    getListView() {\n        return {\n            type: \"list\",\n            props: {\n                id: this.listId,\n                reorder: true,\n                data: $dbc2b0d4164c0529$var$KeyboardScripts.getAddins(),\n                actions: [\n                    {\n                        title: \"delete\",\n                        handler: (sender, indexPath)=>{\n                            $dbc2b0d4164c0529$var$KeyboardScripts.setAddins(sender.data);\n                        }\n                    }\n                ]\n            },\n            events: {\n                reorderFinished: (data)=>{\n                    $dbc2b0d4164c0529$var$KeyboardScripts.setAddins(data);\n                }\n            },\n            layout: $layout.fill\n        };\n    }\n    static sheet() {\n        const sheet = new $dbc2b0d4164c0529$require$Sheet();\n        const keyboardScripts = new $dbc2b0d4164c0529$var$KeyboardScripts();\n        sheet.setView(keyboardScripts.getListView()).addNavBar({\n            title: $l10n(\"QUICK_START_SCRIPTS\"),\n            popButton: {\n                title: $l10n(\"CANCEL\")\n            },\n            rightButtons: keyboardScripts.getNavButtons()\n        });\n        sheet.init().present();\n    }\n}\nmodule.exports = $dbc2b0d4164c0529$var$KeyboardScripts;\n\n});\n\nparcelRequire.register(\"5oABG\", function(module, exports) {\n\nvar $1cJLV = parcelRequire(\"1cJLV\");\nvar $3edb96f81f4b31ed$require$UIKit = $1cJLV.UIKit;\nvar $3edb96f81f4b31ed$require$Sheet = $1cJLV.Sheet;\nvar $3edb96f81f4b31ed$require$NavigationItem = $1cJLV.NavigationItem;\nvar $3edb96f81f4b31ed$require$PageController = $1cJLV.PageController;\n/**\r\n * @typedef {import(\"../../app\").AppKernel} AppKernel\r\n */ class $3edb96f81f4b31ed$var$TodayActions {\n    /**\r\n     * @param {AppKernel} kernel\r\n     */ constructor(kernel){\n        this.listId = \"today-action-list\";\n        this.kernel = kernel;\n    }\n    getActions() {\n        let cache = $cache.get(\"today.actions\") ?? [];\n        if (typeof cache === \"string\") {\n            cache = JSON.parse(cache);\n            this.setActions(cache);\n        }\n        const actions = {\n        };\n        this.kernel.actionManager.getActionTypes().forEach((type)=>{\n            this.kernel.actionManager.getActions(type).forEach((action)=>{\n                actions[action.type + action.dir] = action;\n            });\n        });\n        const savedActions = [];\n        cache.forEach((action)=>{\n            savedActions.push(actions[action.type + action.dir]);\n        });\n        return savedActions;\n    }\n    setActions(list = []) {\n        list.map((item, i)=>{\n            if (item === null) list.splice(i, 1);\n        });\n        $cache.set(\"today.actions\", list);\n    }\n    getAllActions() {\n        let actions = [];\n        this.kernel.actionManager.getActionTypes().forEach((type)=>{\n            actions = actions.concat(this.kernel.actionManager.getActions(type));\n        });\n        return actions;\n    }\n    getUnsetActions() {\n        const actions = this.getActions().map((action)=>action.name\n        );\n        const res = [];\n        this.getAllActions().forEach((action)=>{\n            const name = action.name;\n            if (actions.indexOf(name) === -1) res.push(action);\n        });\n        return res;\n    }\n    getListData(actions) {\n        return actions.map((action)=>{\n            return {\n                action: {\n                    text: action.name,\n                    info: action\n                },\n                icon: action.icon.slice(0, 5) === \"icon_\" ? {\n                    icon: $icon(action.icon.slice(5, action.icon.indexOf(\".\")), $color(\"#ffffff\"))\n                } : {\n                    image: $image(action.icon)\n                },\n                color: {\n                    bgcolor: this.kernel.setting.getColor(action.color)\n                }\n            };\n        });\n    }\n    getListTemplate() {\n        return {\n            views: [\n                {\n                    type: \"image\",\n                    props: {\n                        id: \"color\",\n                        cornerRadius: 8,\n                        smoothCorners: true\n                    },\n                    layout: (make)=>{\n                        make.top.left.inset(10);\n                        make.size.equalTo($size(30, 30));\n                    }\n                },\n                {\n                    type: \"image\",\n                    props: {\n                        id: \"icon\",\n                        tintColor: $color(\"#ffffff\")\n                    },\n                    layout: (make)=>{\n                        make.top.left.inset(15);\n                        make.size.equalTo($size(20, 20));\n                    }\n                },\n                {\n                    type: \"label\",\n                    props: {\n                        id: \"action\"\n                    },\n                    layout: (make, view)=>{\n                        make.bottom.top.inset(10);\n                        make.left.equalTo(view.prev.prev.right).offset(10);\n                        make.right.inset(10);\n                    }\n                }\n            ]\n        };\n    }\n    add() {\n        const view = {\n            type: \"list\",\n            props: {\n                data: this.getListData(this.getUnsetActions()),\n                template: this.getListTemplate(),\n                rowHeight: 50\n            },\n            events: {\n                didSelect: (sender, indexPath, data)=>{\n                    const action = data.action.info;\n                    const actions = this.getActions();\n                    actions.unshift(action);\n                    this.setActions(actions);\n                    $(this.listId).insert({\n                        indexPath: $indexPath(0, 0),\n                        value: this.getListData([\n                            action\n                        ])[0]\n                    });\n                    sender.delete(indexPath);\n                }\n            },\n            layout: $layout.fill\n        };\n        const sheet = new $3edb96f81f4b31ed$require$Sheet();\n        sheet.setView(view).addNavBar({\n            title: $l10n(\"ADD\")\n        }).init().present();\n    }\n    getNavButtons() {\n        return [\n            {\n                symbol: \"plus\",\n                tapped: ()=>this.add()\n            }\n        ];\n    }\n    getListView() {\n        return {\n            type: \"list\",\n            props: {\n                id: this.listId,\n                data: this.getListData(this.getActions()),\n                template: this.getListTemplate(),\n                rowHeight: 50,\n                reorder: true,\n                actions: [\n                    {\n                        title: \"delete\",\n                        handler: (sender, indexPath)=>{\n                            this.setActions(sender.data.map((data)=>data.action.info\n                            ));\n                        }\n                    }\n                ]\n            },\n            events: {\n                reorderFinished: (data1)=>{\n                    const actions = [];\n                    data1.forEach((data)=>{\n                        actions.push(data.action.info);\n                    });\n                    this.setActions(actions);\n                }\n            },\n            layout: $layout.fill\n        };\n    }\n    static sheet(kernel) {\n        const sheet = new $3edb96f81f4b31ed$require$Sheet();\n        const todayActions = new $3edb96f81f4b31ed$var$TodayActions(kernel);\n        sheet.setView(todayActions.getListView()).addNavBar({\n            title: $l10n(\"ACTIONS\"),\n            popButton: {\n                title: $l10n(\"CANCEL\")\n            },\n            rightButtons: todayActions.getNavButtons()\n        });\n        sheet.init().present();\n    }\n}\nmodule.exports = $3edb96f81f4b31ed$var$TodayActions;\n\n});\n\nparcelRequire.register(\"ehiE8\", function(module, exports) {\n\nvar $1cJLV = parcelRequire(\"1cJLV\");\nvar $a6511e02841ff728$require$UIKit = $1cJLV.UIKit;\nvar $a6511e02841ff728$require$BarButtonItem = $1cJLV.BarButtonItem;\nvar $a6511e02841ff728$require$NavigationItem = $1cJLV.NavigationItem;\nvar $a6511e02841ff728$require$NavigationBar = $1cJLV.NavigationBar;\n\nvar $2Ygkq = parcelRequire(\"2Ygkq\");\n\nvar $iRMmt = parcelRequire(\"iRMmt\");\n/**\r\n * @typedef {import(\"../app\").AppKernel} AppKernel\r\n */ class $a6511e02841ff728$var$Keyboard extends $2Ygkq {\n    #readClipboardTimer;\n    /**\r\n     * @param {AppKernel} kernel\r\n     */ constructor(kernel){\n        super(kernel);\n        this.listId = \"keyboard-clipboard-list\";\n        // 剪贴板列个性化设置\n        this.left_right = 20 // 列表边距\n        ;\n        this.top_bottom = 10 // 列表边距\n        ;\n        this.fontSize = 14 // 字体大小\n        ;\n        this.navHeight = 50;\n        this.navBarSeparatorId = \"navBarSeparator\";\n        this.keyboardSetting();\n        this.taptic = 1;\n        this.deleteTimer = undefined;\n        this.continuousDeleteTimer = undefined;\n        this.deleteDelay = this.kernel.setting.get(\"keyboard.deleteDelay\");\n        this.continuousDeleteDelay = 0.5;\n        this.loadDataWithSingleLine();\n    }\n    listReady() {\n        // readClipboard\n        if (this.kernel.setting.get(\"clipboard.autoSave\") && $app.env === $env.keyboard) this.#readClipboardTimer = $timer.schedule({\n            interval: 1,\n            handler: ()=>{\n                this.readClipboard();\n            }\n        });\n    }\n    keyboardSetting() {\n        if (!this.kernel.setting.get(\"keyboard.showJSBoxToolbar\")) $keyboard.barHidden = true;\n    }\n    keyboardTapped(tapped, tapticEngine = true) {\n        return (...args)=>{\n            if (tapticEngine && this.kernel.setting.get(\"keyboard.tapticEngine\")) $device.taptic(this.taptic);\n            tapped(...args);\n        };\n    }\n    navButtons() {\n        const buttons = [\n            {\n                // 关闭键盘\n                symbol: \"keyboard.chevron.compact.down\",\n                tapped: this.keyboardTapped(()=>$keyboard.dismiss()\n                )\n            },\n            {\n                // 手动读取剪切板\n                symbol: \"square.and.arrow.down.on.square\",\n                tapped: this.keyboardTapped((animate)=>{\n                    animate.start();\n                    this.readClipboard(true);\n                    animate.done();\n                })\n            },\n            {\n                // Action\n                symbol: \"bolt.circle\",\n                tapped: this.keyboardTapped((animate, sender)=>{\n                    const popover = $ui.popover({\n                        sourceView: sender,\n                        directions: $popoverDirection.up,\n                        size: $size(200, 300),\n                        views: [\n                            this.kernel.actionManager.getActionListView({\n                            }, {\n                                didSelect: (sender, indexPath, data)=>{\n                                    popover.dismiss();\n                                    const action = this.kernel.actionManager.getActionHandler(data.info.info.type, data.info.info.dir);\n                                    setTimeout(()=>action({\n                                            text: $clipboard.text\n                                        })\n                                    , 500);\n                                }\n                            })\n                        ]\n                    });\n                })\n            }\n        ];\n        return buttons.map((button)=>{\n            const barButtonItem = new $a6511e02841ff728$require$BarButtonItem();\n            return barButtonItem.setAlign($a6511e02841ff728$require$UIKit.align.right).setSymbol(button.symbol).setEvent(\"tapped\", button.tapped).definition;\n        });\n    }\n    getNavBarView() {\n        return {\n            // 顶部按钮栏\n            type: \"view\",\n            props: {\n                bgcolor: $color(\"backgroundColor\")\n            },\n            views: [\n                {\n                    type: \"view\",\n                    layout: $layout.fill,\n                    views: [\n                        {\n                            type: \"label\",\n                            props: {\n                                text: $l10n(\"CLIPBOARD\"),\n                                font: $font(\"bold\", 20)\n                            },\n                            layout: (make, view)=>{\n                                make.centerY.equalTo(view.super);\n                                make.left.equalTo(view.super).offset(this.left_right);\n                            }\n                        }\n                    ].concat(this.navButtons())\n                }\n            ],\n            layout: (make, view)=>{\n                make.top.width.equalTo(view.super);\n                make.height.equalTo(this.navHeight);\n            }\n        };\n    }\n    getBottomBarView() {\n        const navigationBar = new $a6511e02841ff728$require$NavigationBar();\n        const navigationItem = new $a6511e02841ff728$require$NavigationItem();\n        navigationItem.setLeftButtons([\n            {\n                symbol: \"paperplane\",\n                menu: {\n                    pullDown: true,\n                    asPrimary: true,\n                    items: $iRMmt.getAddins().reverse().map((addin)=>{\n                        return {\n                            title: addin,\n                            handler: this.keyboardTapped(()=>$addin.run(addin)\n                            )\n                        };\n                    })\n                }\n            }\n        ]);\n        if (!$device.isIphoneX) // TODO 切换键盘\n        navigationItem.addLeftButton({\n            symbol: \"globe\",\n            tapped: this.keyboardTapped(()=>$keyboard.next()\n            ),\n            menu: {\n                pullDown: true,\n                items: [\n                    {\n                        title: \"Next Keyboard\",\n                        handler: this.keyboardTapped(()=>$keyboard.next()\n                        )\n                    }\n                ]\n            }\n        });\n        navigationItem.setRightButtons([\n            {\n                // send\n                title: \"Send\",\n                tapped: this.keyboardTapped(()=>$keyboard.send()\n                )\n            },\n            {\n                // delete\n                symbol: \"delete.left\",\n                events: {\n                    touchesBegan: this.keyboardTapped(()=>{\n                        $keyboard.delete();\n                        this.continuousDeleteTimer = $delay(this.continuousDeleteDelay, ()=>{\n                            this.deleteTimer = $timer.schedule({\n                                interval: this.deleteDelay,\n                                handler: this.keyboardTapped(()=>$keyboard.delete()\n                                , this.kernel.setting.get(\"keyboard.tapticEngineForDelete\"))\n                            });\n                        });\n                    }),\n                    touchesEnded: ()=>{\n                        this.deleteTimer?.invalidate();\n                        this.continuousDeleteTimer?.cancel();\n                    }\n                }\n            }\n        ]);\n        navigationBar.setNavigationItem(navigationItem);\n        const view1 = navigationBar.getNavigationBarView();\n        view1.layout = (make, view)=>{\n            make.bottom.left.right.equalTo(view.super.safeArea);\n            make.top.equalTo(view.prev.bottom).offset(3);\n        };\n        return view1;\n    }\n    getListView() {\n        return {\n            // 剪切板列表\n            type: \"list\",\n            props: {\n                id: this.listId,\n                bgcolor: $color(\"clear\"),\n                menu: {\n                    items: this.menuItems()\n                },\n                separatorInset: $insets(0, this.left_right, 0, this.left_right),\n                separatorColor: $color(\"lightGray\"),\n                data: this.savedClipboard,\n                template: this.listTemplate(1)\n            },\n            events: {\n                ready: ()=>this.listReady()\n                ,\n                rowHeight: (sender, indexPath)=>{\n                    const content = sender.object(indexPath).content;\n                    return content.info.height + this.top_bottom * 2 + 1;\n                },\n                didSelect: this.keyboardTapped((sender, indexPath, data)=>{\n                    const content = data.content;\n                    const text = content.info.text;\n                    const path = this.kernel.storage.keyToPath(text);\n                    if (path && $file.exists(path.original)) {\n                        $clipboard.image = $file.read(path.original).image;\n                        $ui.toast($l10n(\"COPIED\"));\n                    } else $keyboard.insert(data.content.info.text);\n                }),\n                didScroll: (sender)=>{\n                    if (sender.contentOffset.y > 0) $(this.navBarSeparatorId).hidden = false;\n                    else $(this.navBarSeparatorId).hidden = true;\n                }\n            },\n            layout: (make, view)=>{\n                make.top.equalTo(this.navHeight);\n                make.width.equalTo(view.super);\n                make.bottom.equalTo(view.super).offset(-this.navHeight);\n            }\n        };\n    }\n    getView() {\n        let backgroundImage = this.kernel.setting.getImage(\"keyboard.background.image\");\n        const backgroundColor = this.kernel.setting.getColor(this.kernel.setting.get(\"keyboard.background.color\"));\n        const backgroundColorDark = this.kernel.setting.getColor(this.kernel.setting.get(\"keyboard.background.color.dark\"));\n        return {\n            type: \"view\",\n            props: {\n                id: \"keyboard.main\",\n                bgcolor: $color(backgroundColor, backgroundColorDark)\n            },\n            views: [\n                backgroundImage !== null ? {\n                    type: \"image\",\n                    props: {\n                        image: backgroundImage\n                    },\n                    layout: $layout.fill\n                } : {\n                },\n                this.getNavBarView(),\n                $a6511e02841ff728$require$UIKit.separatorLine({\n                    id: this.navBarSeparatorId,\n                    hidden: true,\n                    bgcolor: $color(\"lightGray\")\n                }),\n                this.getListView(),\n                $a6511e02841ff728$require$UIKit.separatorLine({\n                    bgcolor: $color(\"lightGray\")\n                }),\n                this.getBottomBarView()\n            ],\n            layout: $layout.fill\n        };\n    }\n}\nmodule.exports = $a6511e02841ff728$var$Keyboard;\n\n});\n\nparcelRequire.register(\"knL6n\", function(module, exports) {\n\nvar $1cJLV = parcelRequire(\"1cJLV\");\nvar $ed6a7e18b44bee46$require$UIKit = $1cJLV.UIKit;\nvar $ed6a7e18b44bee46$require$BarButtonItem = $1cJLV.BarButtonItem;\nvar $ed6a7e18b44bee46$require$NavigationItem = $1cJLV.NavigationItem;\nvar $ed6a7e18b44bee46$require$NavigationBar = $1cJLV.NavigationBar;\n\nvar $2Ygkq = parcelRequire(\"2Ygkq\");\n\nvar $5oABG = parcelRequire(\"5oABG\");\n/**\r\n * @typedef {import(\"../app\").AppKernel} AppKernel\r\n */ class $ed6a7e18b44bee46$var$Today extends $2Ygkq {\n    /**\r\n     * @param {AppKernel} kernel\r\n     */ constructor(kernel){\n        super(kernel);\n        this.actionsId = \"today-list-actions\";\n        this.listContainerId = \"today-list-container\";\n        this.readClipboardButtonId = \"today-nav-readClipboard\";\n        this.listId = \"today-list\";\n        this.bottomBar = new $ed6a7e18b44bee46$require$NavigationBar();\n        // 剪贴板列个性化设置\n        this.left_right = 20 // 列表边距\n        ;\n        this.top_bottom = 10 // 列表边距\n        ;\n        this.fontSize = 14 // 字体大小\n        ;\n        this.navHeight = 38;\n        this.taptic = 1;\n        this.setSingleLine();\n        // 剪切板分页显示\n        this.setClipboarPageSize($widget.mode);\n        this.listPageNow = [\n            0,\n            0\n        ] // 剪切板当前页\n        ;\n        this.listSection = Math.min(this.tabIndex, 1) // 当前选中列表，只取 0 或 1，默认 1\n        ;\n        this.todayActions = new $5oABG(this.kernel);\n        // 监听展开状态\n        $widget.modeChanged = (mode)=>{\n            this.setClipboarPageSize(mode);\n            this.updateList();\n        };\n    }\n    get isActionPage() {\n        return this.tabIndex === 2;\n    }\n    set tabIndex(index) {\n        $cache.set(\"caio.today.tab.index\", index);\n    }\n    get tabIndex() {\n        return $cache.get(\"caio.today.tab.index\") ?? 0;\n    }\n    get tabItems() {\n        return [\n            $l10n(\"PIN\"),\n            $l10n(\"CLIPBOARD\"),\n            $l10n(\"ACTIONS\")\n        ];\n    }\n    listReady() {\n        this.updateList();\n        $delay(0.5, ()=>this.readClipboard()\n        );\n    }\n    readClipboard(manual = false) {\n        if (!this.isActionPage) {\n            if (super.readClipboard(manual)) {\n                this.listSection = 1;\n                this.listPageNow[this.listSection] = 0;\n                this.updateList();\n            }\n            return true;\n        }\n        return false;\n    }\n    setClipboarPageSize(mode) {\n        if (mode === 0) this.listPageSize = 1;\n        else {\n            const viewHeight = $app.env === $env.app ? $ed6a7e18b44bee46$require$UIKit.windowSize.height : $widget.height;\n            const height = viewHeight - this.navHeight * 2;\n            const f_line = height / (this.getSingleLineHeight() + this.top_bottom * 2);\n            const floor = Math.floor(f_line);\n            this.listPageSize = floor;\n            if (f_line - floor >= 0.6) this.listPageSize++;\n        }\n    }\n    buttonTapped(tapped, tapticEngine = true) {\n        return (...args)=>{\n            if (tapticEngine && this.kernel.setting.get(\"keyboard.tapticEngine\")) $device.taptic(this.taptic);\n            tapped(...args);\n        };\n    }\n    navButtons() {\n        const buttons = [\n            {\n                // 手动读取剪切板\n                symbol: \"square.and.arrow.down.on.square\",\n                props: {\n                    id: this.readClipboardButtonId,\n                    hidden: this.isActionPage\n                },\n                tapped: this.buttonTapped((animate)=>{\n                    animate.start();\n                    if (this.readClipboard(true)) animate.done();\n                    else animate.cancel();\n                })\n            }\n        ];\n        return buttons.map((button)=>{\n            const barButtonItem = new $ed6a7e18b44bee46$require$BarButtonItem();\n            barButtonItem.setAlign($ed6a7e18b44bee46$require$UIKit.align.right).setSymbol(button.symbol).setEvent(\"tapped\", button.tapped).setProps(button.props ?? {\n            });\n            return barButtonItem.definition;\n        });\n    }\n    tabView() {\n        const switchTab = (index)=>{\n            this.tabIndex = index;\n            if (index === 2) {\n                $(this.listContainerId).hidden = true;\n                $(this.actionsId).hidden = false;\n                $(this.readClipboardButtonId).hidden = true;\n            } else {\n                this.listSection = index;\n                $(this.actionsId).hidden = true;\n                $(this.listContainerId).hidden = false;\n                $(this.readClipboardButtonId).hidden = false;\n                this.updateList();\n            }\n        };\n        return {\n            type: \"tab\",\n            props: {\n                items: this.tabItems,\n                index: this.tabIndex,\n                dynamicWidth: true\n            },\n            events: {\n                changed: (sender)=>{\n                    switchTab(sender.index);\n                }\n            },\n            layout: (make, view)=>{\n                make.centerY.equalTo(view.super);\n                make.left.equalTo(view.super.saveArea).offset(10);\n            }\n        };\n    }\n    getNavBarView() {\n        return {\n            // 顶部按钮栏\n            type: \"view\",\n            views: [\n                {\n                    type: \"view\",\n                    layout: $layout.fill,\n                    views: [\n                        this.tabView(),\n                        {\n                            type: \"label\"\n                        },\n                        ...this.navButtons()\n                    ]\n                }\n            ],\n            layout: (make, view)=>{\n                make.top.width.equalTo(view.super);\n                make.height.equalTo(this.navHeight);\n            }\n        };\n    }\n    getBottomBarView() {\n        const navigationItem = new $ed6a7e18b44bee46$require$NavigationItem();\n        navigationItem.setLeftButtons([\n            {\n                title: $l10n(\"PREV_PAGE\"),\n                tapped: this.buttonTapped(()=>{\n                    this.clipboardPrevPage();\n                })\n            }\n        ]).setRightButtons([\n            {\n                title: $l10n(\"NEXT_PAGE\"),\n                tapped: this.buttonTapped(()=>{\n                    this.clipboardNextPage();\n                })\n            }\n        ]).setTitle(this.listPageNow[this.listSection] + 1).setLargeTitleDisplayMode($ed6a7e18b44bee46$require$NavigationItem.largeTitleDisplayModeNever);\n        this.bottomBar.setNavigationItem(navigationItem);\n        const view1 = this.bottomBar.getNavigationBarView();\n        view1.layout = (make, view)=>{\n            make.bottom.left.right.equalTo(view.super.safeArea);\n            make.top.equalTo(view.prev.bottom);\n        };\n        return view1;\n    }\n    updateList() {\n        $(this.listId).data = this.getClipboardPage();\n        $(this.bottomBar.id + \"-small-title\").text = this.listPageNow[this.listSection] + 1;\n    }\n    clipboardPrevPage() {\n        if (this.listPageNow[this.listSection] > 0) {\n            this.listPageNow[this.listSection]--;\n            this.updateList();\n        }\n    }\n    clipboardNextPage() {\n        const maxPage = Math.ceil(this.savedClipboard[this.listSection].rows.length / this.listPageSize);\n        if (this.listPageNow[this.listSection] < maxPage - 1) {\n            this.listPageNow[this.listSection]++;\n            this.updateList();\n        }\n    }\n    getClipboardPage() {\n        const start = this.listPageNow[this.listSection] * this.listPageSize;\n        const end = start + this.listPageSize;\n        return this.savedClipboard[this.listSection].rows.slice(start, end);\n    }\n    getListView() {\n        return {\n            type: \"view\",\n            props: {\n                id: this.listContainerId,\n                hidden: this.isActionPage\n            },\n            views: [\n                {\n                    // 剪切板列表\n                    type: \"list\",\n                    props: {\n                        id: this.listId,\n                        scrollEnabled: false,\n                        bgcolor: $color(\"clear\"),\n                        menu: {\n                            items: this.menuItems(false)\n                        },\n                        separatorInset: $insets(0, this.left_right, 0, this.left_right),\n                        rowHeight: this.getSingleLineHeight() + this.top_bottom * 2,\n                        data: [],\n                        template: this.listTemplate(1)\n                    },\n                    events: {\n                        ready: ()=>this.listReady()\n                        ,\n                        didSelect: this.buttonTapped((sender, indexPath, data)=>{\n                            const content = data.content;\n                            const text = content.info.text;\n                            const path = this.kernel.storage.keyToPath(text);\n                            if (path && $file.exists(path.original)) $clipboard.image = $file.read(path.original).image;\n                            else {\n                                this.setCopied(data.content.info.uuid, $indexPath(this.listSection, indexPath.row));\n                                this.setClipboardText(data.content.info.text);\n                            }\n                            $ui.toast($l10n(\"COPIED\"));\n                        })\n                    },\n                    layout: (make, view)=>{\n                        make.top.width.equalTo(view.super);\n                        make.bottom.equalTo(view.super).offset(-this.navHeight);\n                    }\n                },\n                this.getBottomBarView()\n            ],\n            layout: (make, view)=>{\n                make.top.equalTo(this.navHeight);\n                make.bottom.left.right.equalTo(view.super.safeArea);\n            }\n        };\n    }\n    getMatrixView() {\n        let data1 = this.todayActions.getActions();\n        if (data1.length === 0) data1 = this.todayActions.getAllActions();\n        return {\n            type: \"matrix\",\n            props: {\n                id: this.matrixId,\n                columns: 2,\n                itemHeight: 50,\n                spacing: 8,\n                data: data1.map((action)=>{\n                    return this.kernel.actionManager.actionToData(action);\n                }),\n                template: {\n                    props: {\n                        smoothCorners: true,\n                        cornerRadius: 10,\n                        bgcolor: $color($rgba(255, 255, 255, 0.3), $rgba(0, 0, 0, 0.3))\n                    },\n                    views: [\n                        {\n                            type: \"image\",\n                            props: {\n                                id: \"color\",\n                                cornerRadius: 8,\n                                smoothCorners: true\n                            },\n                            layout: (make)=>{\n                                make.top.left.inset(10);\n                                make.size.equalTo($size(30, 30));\n                            }\n                        },\n                        {\n                            type: \"image\",\n                            props: {\n                                id: \"icon\",\n                                tintColor: $color(\"#ffffff\")\n                            },\n                            layout: (make)=>{\n                                make.top.left.inset(15);\n                                make.size.equalTo($size(20, 20));\n                            }\n                        },\n                        {\n                            type: \"label\",\n                            props: {\n                                id: \"name\",\n                                font: $font(14)\n                            },\n                            layout: (make, view)=>{\n                                make.bottom.top.inset(10);\n                                make.left.equalTo(view.prev.prev.right).offset(10);\n                                make.right.inset(10);\n                            }\n                        },\n                        {\n                            // 用来保存信息\n                            type: \"view\",\n                            props: {\n                                id: \"info\",\n                                hidden: true\n                            }\n                        }\n                    ]\n                }\n            },\n            layout: $layout.fill,\n            events: {\n                didSelect: (sender, indexPath, data)=>{\n                    const info = data.info.info;\n                    this.kernel.actionManager.getActionHandler(info.type, info.dir)({\n                        text: info.type === \"clipboard\" || info.type === \"uncategorized\" ? $clipboard.text : null,\n                        uuid: null\n                    });\n                }\n            }\n        };\n    }\n    getActionView() {\n        return {\n            type: \"view\",\n            props: {\n                id: this.actionsId,\n                hidden: this.tabIndex !== 2\n            },\n            views: [\n                this.getMatrixView()\n            ],\n            layout: (make, view)=>{\n                make.top.equalTo(this.navHeight);\n                make.bottom.left.right.equalTo(view.super.safeArea);\n            }\n        };\n    }\n    getView() {\n        return {\n            type: \"view\",\n            views: [\n                this.getNavBarView(),\n                this.getListView(),\n                this.getActionView()\n            ],\n            layout: $layout.fill\n        };\n    }\n}\nmodule.exports = $ed6a7e18b44bee46$var$Today;\n\n});\n\n\n\n$app.strings = {\n    \"en\": {\n        \"ALERT_INFO\": \"Alert\",\n        \"NONE\": \"None\",\n        \"FAILED_TO_LOAD_VIEW\": \"Faild to load view\",\n        \"VIEW_NOT_PROVIDED\": \"The view is not provided\",\n        \"UNCATEGORIZED\": \"Uncategorized\",\n        \"SHARE\": \"Share\",\n        \"CLIPBOARD\": \"Clipboard\",\n        \"UNIVERSAL_CLIPBOARD\": \"Universal Clipboard\",\n        \"UNIVERSAL_CLIPBOARD_TIPS\": \"Universal Clipboard allows you to copy something on your iPhone, and paste it on your Mac–or vice-versa–using iCloud.\",\n        \"CLIPBOARD_STRUCTURE_ERROR\": \"Clipboard data structure is abnormal\",\n        \"ADD\": \"Add\",\n        \"EDIT\": \"Edit\",\n        \"SEARCH\": \"Search\",\n        \"PIN\": \"Pin\",\n        \"COPY\": \"Copy\",\n        \"COPIED\": \"Copied\",\n        \"SORT\": \"Sort\",\n        \"ACTIONS\": \"Actions\",\n        \"PREVIEW\": \"Preview\",\n        \"MAX_ITEM_LENGTH\": \"Line Limit\",\n        \"TEXT_MAX_LENGTH\": \"Display Character Length\",\n        \"AUTO_SAVE\": \"Auto Save\",\n        \"AUTO_SYNC\": \"Auto Sync\",\n        \"SYNC_NOW\": \"Sync Now\",\n        \"UNZIP_FAILED\": \"Unzip file failed\",\n        \"SYNC_ALERT_INFO\": \"If it has not been synced locally, the iCloud data will be pulled directly. \\\\nDo you want to continue?\",\n        \"DELETE_ICLOUD_DATA\": \"Delete iCloud Data\",\n        \"REBUILD\": \"Rebuild\",\n        \"REBUILD_DATABASE\": \"Rebuild Database\",\n        \"REBUILD_DATABASE_ALERT\": \"Rebuilding the database will lose the order information, do you want to confirm the rebuild?\",\n        \"EDITOR\": \"Editor\",\n        \"CREATE_NEW\": \"Create New\",\n        \"CREATE_NEW_ACTION\": \"New Action\",\n        \"CREATE_NEW_TYPE\": \"New Category\",\n        \"TYPE_ALREADY_EXISTS\": \"This category already exists\",\n        \"EDIT_DETAILS\": \"Edit Details\",\n        \"EDIT_SCRIPT\": \"Edit Script\",\n        \"INFORMATION\": \"Information\",\n        \"NAME\": \"Name\",\n        \"ICON\": \"Icon\",\n        \"TYPE\": \"Category\",\n        \"DESCRIPTION\": \"Description\",\n        \"CODE\": \"Code\",\n        \"TEXT_INSETS\": \"Text bottom margin\",\n        \"SHOW_LINE_NUMBER\": \"Show line number\",\n        \"LIGHT_MODE_THEME\": \"Light Mode Theme\",\n        \"DARK_MODE_THEME\": \"Dark Mode Theme\",\n        \"SAVE\": \"Save\",\n        \"SAVE_SUCCESS\": \"Save success\",\n        \"SAVE_ERROR\": \"Save failed\",\n        \"DELETE\": \"Delete\",\n        \"CONFIRM_DELETE_MSG\": \"Are you sure you want to delete?\",\n        \"DELETE_SUCCESS\": \"Delete success\",\n        \"DELETE_ERROR\": \"Delete failed\",\n        \"IMPORT_EXAMPLE_ACTIONS\": \"Import example actions\",\n        \"REBUILD_ACTION_DATABASE\": \"Rebuild Action Database\",\n        \"REBUILD_ACTION_DATABASE_ALERT\": \"Are you sure you want to rebuild?\",\n        \"EXPORT\": \"Export\",\n        \"IMPORT\": \"Import\",\n        \"FILE_TYPE_ERROR\": \"File type does not match\",\n        \"OVERWRITE_ALERT\": \"This operation will overwrite the current data. Do you want to continue?\",\n        \"KEYBOARD\": \"Keyboard\",\n        \"BACKGROUND_COLOR\": \"Background Color\",\n        \"BACKGROUND_COLOR_DARK\": \"Dark Background Color\",\n        \"BACKGROUND_IMAGE\": \"Background Image\",\n        \"DELETE_DELAY\": \"Delete Delay\",\n        \"JSBOX_TOOLBAR\": \"JSBox Toolbar\",\n        \"QUICK_START_SCRIPTS\": \"Quick Start Scripts\",\n        \"CHECK_UPDATE\": \"Check Update\",\n        \"UPDATE\": \"Update\",\n        \"WIDGET\": \"Widget\",\n        \"RECENT\": \"Recent\",\n        \"CLICK_ACTION\": \"Click Action\",\n        \"TODAY_WIDGET\": \"Today Widget\",\n        \"PREV_PAGE\": \"Prev\",\n        \"NEXT_PAGE\": \"Next\",\n        \"DISPLAY_MODE\": \"Display Mode\",\n        \"CLASSIC\": \"Classic\",\n        \"MODERN\": \"Modern\"\n    },\n    \"zh-Hans\": {\n        \"ALERT_INFO\": \"提示\",\n        \"NONE\": \"什么都没有\",\n        \"FAILED_TO_LOAD_VIEW\": \"加载视图失败\",\n        \"VIEW_NOT_PROVIDED\": \"未提供该视图\",\n        \"UNCATEGORIZED\": \"未分类\",\n        \"SHARE\": \"分享\",\n        \"CLIPBOARD\": \"剪切板\",\n        \"UNIVERSAL_CLIPBOARD\": \"通用剪贴板\",\n        \"UNIVERSAL_CLIPBOARD_TIPS\": \"用剪贴板允许您在iPhone上复制某些内容，然后使用iCloud将其粘贴到Mac上(反之亦然)。\",\n        \"CLIPBOARD_STRUCTURE_ERROR\": \"剪切板数据结构异常\",\n        \"ADD\": \"添加\",\n        \"EDIT\": \"编辑\",\n        \"SEARCH\": \"搜索\",\n        \"PIN\": \"置顶\",\n        \"COPY\": \"复制\",\n        \"COPIED\": \"已复制\",\n        \"SORT\": \"排序\",\n        \"ACTIONS\": \"动作\",\n        \"PREVIEW\": \"预览\",\n        \"MAX_ITEM_LENGTH\": \"行数限制\",\n        \"TEXT_MAX_LENGTH\": \"显示字符长度\",\n        \"AUTO_SAVE\": \"自动保存\",\n        \"AUTO_SYNC\": \"自动同步\",\n        \"SYNC_NOW\": \"立即同步\",\n        \"UNZIP_FAILED\": \"解压文件失败\",\n        \"SYNC_ALERT_INFO\": \"若未在本机进行过同步则会直接拉取 iCloud 数据。\\\\n是否继续？\",\n        \"DELETE_ICLOUD_DATA\": \"删除 iCloud 数据\",\n        \"REBUILD\": \"重建\",\n        \"REBUILD_DATABASE\": \"重建数据库\",\n        \"REBUILD_DATABASE_ALERT\": \"重建数据库将会丢失顺序信息，是否确认重建？\",\n        \"EDITOR\": \"编辑器\",\n        \"CREATE_NEW\": \"新建\",\n        \"CREATE_NEW_ACTION\": \"新建动作\",\n        \"CREATE_NEW_TYPE\": \"新建分类\",\n        \"TYPE_ALREADY_EXISTS\": \"该类别已经存在\",\n        \"EDIT_DETAILS\": \"编辑信息\",\n        \"EDIT_SCRIPT\": \"编辑脚本\",\n        \"INFORMATION\": \"信息\",\n        \"NAME\": \"名称\",\n        \"ICON\": \"图标\",\n        \"TYPE\": \"分类\",\n        \"DESCRIPTION\": \"描述\",\n        \"CODE\": \"代码\",\n        \"TEXT_INSETS\": \"文本下边距\",\n        \"SHOW_LINE_NUMBER\": \"显示行号\",\n        \"LIGHT_MODE_THEME\": \"浅色模式主题\",\n        \"DARK_MODE_THEME\": \"深色模式主题\",\n        \"SAVE\": \"保存\",\n        \"SAVE_SUCCESS\": \"保存成功\",\n        \"SAVE_ERROR\": \"保存失败\",\n        \"DELETE\": \"删除\",\n        \"CONFIRM_DELETE_MSG\": \"确认要删除吗？\",\n        \"DELETE_SUCCESS\": \"删除成功\",\n        \"DELETE_ERROR\": \"删除失败\",\n        \"IMPORT_EXAMPLE_ACTIONS\": \"导入示例动作\",\n        \"REBUILD_ACTION_DATABASE\": \"重建动作库\",\n        \"REBUILD_ACTION_DATABASE_ALERT\": \"您确认要重建？\",\n        \"EXPORT\": \"导出\",\n        \"IMPORT\": \"导入\",\n        \"FILE_TYPE_ERROR\": \"文件类型不符\",\n        \"OVERWRITE_ALERT\": \"该操作将会覆盖当前数据，是否继续？\",\n        \"KEYBOARD\": \"键盘\",\n        \"BACKGROUND_COLOR\": \"背景色\",\n        \"BACKGROUND_COLOR_DARK\": \"深色模式背景色\",\n        \"BACKGROUND_IMAGE\": \"背景图片\",\n        \"DELETE_DELAY\": \"删除延时\",\n        \"JSBOX_TOOLBAR\": \"JSBox 工具栏\",\n        \"QUICK_START_SCRIPTS\": \"快速启动脚本\",\n        \"CHECK_UPDATE\": \"检查更新\",\n        \"UPDATE\": \"更新\",\n        \"WIDGET\": \"小组件\",\n        \"RECENT\": \"最近内容\",\n        \"CLICK_ACTION\": \"点击事件\",\n        \"TODAY_WIDGET\": \"通知中心小组件\",\n        \"PREV_PAGE\": \"上一页\",\n        \"NEXT_PAGE\": \"下一页\",\n        \"DISPLAY_MODE\": \"显示模式\",\n        \"CLASSIC\": \"经典\",\n        \"MODERN\": \"现代\"\n    }\n};\n$app.theme = \"auto\";\n$app.minSDKVer = \"2.19.0\";\n$app.minOSVer = \"14.0.0\";\n$app.idleTimerDisabled = false;\n$app.keyboardToolbarEnabled = true;\n$app.rotateDisabled = false;\n__INFO__ = {\n    \"name\": \"CAIO\",\n    \"version\": \"1.6.0\",\n    \"author\": \"ipuppet\",\n    \"module\": false\n};\n__README__ = {\n    \"README.md\": \"# CAIO\\n\\n> Clipboard all in one.\\n> \\n> A Clipboard tool based on JSBox.\\n\\n支持桌面小组件和通知中心小组件\\n\\n## Actions\\n\\n> 编写方式详见 `scripts/action/README.md` 或应用内 `Action` 编辑页面右上角图书按钮。\\n\\n### 不同环境中 `Action` 数据区别\\n\\n- 首页顶部 `Action` 按钮处理的数据为当前复制的内容\\n- 长按列表弹出的 `Action` 菜单处理的数据为被选中的内容\\n- 编辑器中顶部 `Action` 按钮（闪电图形按钮）处理的数据为正在编辑的所有内容\\n\\n\\n## Today Widget\\n\\n> 点击复制，长按触发动作。\\n\\n请尽量避免在 JSBox 运行 CAIO 时使用 Today Widget\",\n    \"README_CN.md\": \"# CAIO\\n\\n> Clipboard all in one.\\n> \\n> A Clipboard tool based on JSBox.\\n\\n支持桌面小组件和通知中心小组件\\n\\n## Actions\\n\\n> 编写方式详见 `scripts/action/README.md` 或应用内 `Action` 编辑页面右上角图书按钮。\\n\\n### 不同环境中 `Action` 数据区别\\n\\n- 首页顶部 `Action` 按钮处理的数据为当前复制的内容\\n- 长按列表弹出的 `Action` 菜单处理的数据为被选中的内容\\n- 编辑器中顶部 `Action` 按钮（闪电图形按钮）处理的数据为正在编辑的所有内容\\n\\n\\n## Today Widget\\n\\n> 点击复制，长按触发动作。\\n\\n请尽量避免在 JSBox 运行 CAIO 时使用 Today Widget\"\n};\n__SETTING__ = [\n    {\n        \"items\": [\n            {\n                \"icon\": [\n                    \"doc.on.clipboard\",\n                    \"#FFCC66\"\n                ],\n                \"type\": \"child\",\n                \"title\": \"CLIPBOARD\",\n                \"key\": \"clipboard\",\n                \"children\": [\n                    {\n                        \"items\": [\n                            {\n                                \"icon\": [\n                                    \"link\",\n                                    \"#FF6633\"\n                                ],\n                                \"title\": \"UNIVERSAL_CLIPBOARD\",\n                                \"type\": \"switch\",\n                                \"key\": \"clipboard.universal\",\n                                \"value\": true\n                            },\n                            {\n                                \"icon\": [\n                                    \"cursorarrow.rays\",\n                                    \"#FF6633\"\n                                ],\n                                \"title\": \"Tips\",\n                                \"type\": \"script\",\n                                \"key\": \"clipboard.tips.universal\",\n                                \"value\": \"$ui.alert({title:$l10n('UNIVERSAL_CLIPBOARD'),message:$l10n('UNIVERSAL_CLIPBOARD_TIPS')})\"\n                            }\n                        ]\n                    },\n                    {\n                        \"items\": [\n                            {\n                                \"icon\": [\n                                    \"text.alignleft\",\n                                    \"#FFCC66\"\n                                ],\n                                \"title\": \"MAX_ITEM_LENGTH\",\n                                \"type\": \"number\",\n                                \"key\": \"clipboard.maxItemLength\",\n                                \"value\": 100\n                            },\n                            {\n                                \"icon\": [\n                                    \"pencil.and.ellipsis.rectangle\",\n                                    \"#CC0099\"\n                                ],\n                                \"title\": \"TEXT_MAX_LENGTH\",\n                                \"type\": \"number\",\n                                \"key\": \"clipboard.textMaxLength\",\n                                \"value\": 35\n                            },\n                            {\n                                \"icon\": [\n                                    \"square.and.arrow.down.on.square\",\n                                    \"#FF6633\"\n                                ],\n                                \"title\": \"AUTO_SAVE\",\n                                \"type\": \"switch\",\n                                \"key\": \"clipboard.autoSave\",\n                                \"value\": true\n                            }\n                        ]\n                    },\n                    {\n                        \"items\": [\n                            {\n                                \"icon\": [\n                                    \"arrow.2.circlepath\"\n                                ],\n                                \"title\": \"AUTO_SYNC\",\n                                \"type\": \"switch\",\n                                \"key\": \"clipboard.autoSync\",\n                                \"value\": false\n                            },\n                            {\n                                \"icon\": [\n                                    \"arrow.2.circlepath\",\n                                    \"#FFCC66\"\n                                ],\n                                \"title\": \"SYNC_NOW\",\n                                \"type\": \"script\",\n                                \"key\": \"clipboard.sync\",\n                                \"value\": \"this.method.sync\"\n                            },\n                            {\n                                \"icon\": [\n                                    \"trash\",\n                                    \"red\"\n                                ],\n                                \"title\": \"DELETE_ICLOUD_DATA\",\n                                \"type\": \"script\",\n                                \"key\": \"clipboard.deleteICloudData\",\n                                \"value\": \"this.method.deleteICloudData\"\n                            }\n                        ]\n                    },\n                    {\n                        \"items\": [\n                            {\n                                \"icon\": [\n                                    \"arrow.2.circlepath\",\n                                    \"red\"\n                                ],\n                                \"title\": \"REBUILD_DATABASE\",\n                                \"type\": \"script\",\n                                \"key\": \"clipboard.rebuildDatabase\",\n                                \"value\": \"this.method.rebuildDatabase\"\n                            }\n                        ]\n                    },\n                    {\n                        \"items\": [\n                            {\n                                \"icon\": [\n                                    \"square.and.arrow.up\"\n                                ],\n                                \"title\": \"EXPORT\",\n                                \"type\": \"script\",\n                                \"key\": \"clipboard.export\",\n                                \"value\": \"this.method.exportClipboard\"\n                            },\n                            {\n                                \"icon\": [\n                                    \"square.and.arrow.down\",\n                                    \"#FFCC33\"\n                                ],\n                                \"title\": \"IMPORT\",\n                                \"type\": \"script\",\n                                \"key\": \"clipboard.import\",\n                                \"value\": \"this.method.importClipboard\"\n                            }\n                        ]\n                    }\n                ]\n            },\n            {\n                \"icon\": [\n                    \"bolt.circle\",\n                    \"#FF6633\"\n                ],\n                \"type\": \"child\",\n                \"title\": \"ACTIONS\",\n                \"key\": \"action\",\n                \"children\": [\n                    {\n                        \"items\": [\n                            {\n                                \"icon\": [\n                                    \"bolt.circle\",\n                                    \"#FF6633\"\n                                ],\n                                \"title\": \"IMPORT_EXAMPLE_ACTIONS\",\n                                \"type\": \"script\",\n                                \"key\": \"action.importExampleAction\",\n                                \"value\": \"this.method.importExampleAction\"\n                            }\n                        ]\n                    },\n                    {\n                        \"items\": [\n                            {\n                                \"icon\": [\n                                    \"arrow.2.circlepath\",\n                                    \"red\"\n                                ],\n                                \"title\": \"REBUILD_ACTION_DATABASE\",\n                                \"type\": \"script\",\n                                \"key\": \"action.rebuildAction\",\n                                \"value\": \"this.method.rebuildAction\"\n                            }\n                        ]\n                    },\n                    {\n                        \"items\": [\n                            {\n                                \"icon\": [\n                                    \"square.and.arrow.up\"\n                                ],\n                                \"title\": \"EXPORT\",\n                                \"type\": \"script\",\n                                \"key\": \"action.export\",\n                                \"value\": \"this.method.exportAction\"\n                            },\n                            {\n                                \"icon\": [\n                                    \"square.and.arrow.down\",\n                                    \"#FFCC33\"\n                                ],\n                                \"title\": \"IMPORT\",\n                                \"type\": \"script\",\n                                \"key\": \"action.import\",\n                                \"value\": \"this.method.importAction\"\n                            }\n                        ]\n                    }\n                ]\n            },\n            {\n                \"icon\": [\n                    \"pencil.circle\",\n                    \"#CC0099\"\n                ],\n                \"type\": \"child\",\n                \"title\": \"EDITOR\",\n                \"key\": \"editor\",\n                \"children\": [\n                    {\n                        \"title\": \"CLIPBOARD\",\n                        \"items\": [\n                            {\n                                \"icon\": [\n                                    \"wand.and.stars\",\n                                    \"#FF6633\"\n                                ],\n                                \"title\": \"TEXT_INSETS\",\n                                \"type\": \"number\",\n                                \"key\": \"editor.text.insets\",\n                                \"value\": 300\n                            }\n                        ]\n                    },\n                    {\n                        \"title\": \"CODE\",\n                        \"items\": [\n                            {\n                                \"icon\": [\n                                    \"list.number\",\n                                    \"#6699CC\"\n                                ],\n                                \"title\": \"SHOW_LINE_NUMBER\",\n                                \"type\": \"switch\",\n                                \"key\": \"editor.code.lineNumbers\",\n                                \"value\": false\n                            },\n                            {\n                                \"icon\": [\n                                    \"wand.and.stars\",\n                                    \"#FF6633\"\n                                ],\n                                \"title\": \"LIGHT_MODE_THEME\",\n                                \"type\": \"input\",\n                                \"key\": \"editor.code.lightTheme\",\n                                \"value\": \"atom-one-light\"\n                            },\n                            {\n                                \"icon\": [\n                                    \"wand.and.stars\",\n                                    \"#FF6633\"\n                                ],\n                                \"title\": \"DARK_MODE_THEME\",\n                                \"type\": \"input\",\n                                \"key\": \"editor.code.darkTheme\",\n                                \"value\": \"atom-one-dark\"\n                            }\n                        ]\n                    }\n                ]\n            },\n            {\n                \"icon\": [\n                    \"keyboard\",\n                    \"#a2a5a6\"\n                ],\n                \"type\": \"child\",\n                \"title\": \"KEYBOARD\",\n                \"key\": \"keyboard\",\n                \"children\": [\n                    {\n                        \"items\": [\n                            {\n                                \"icon\": [\n                                    \"rectangle.3.offgrid.fill\"\n                                ],\n                                \"title\": \"PREVIEW\",\n                                \"type\": \"script\",\n                                \"key\": \"keyboard.preview\",\n                                \"value\": \"this.method.previewKeyboard\"\n                            }\n                        ]\n                    },\n                    {\n                        \"items\": [\n                            {\n                                \"icon\": [\n                                    \"sun.min\",\n                                    \"#A569BD\"\n                                ],\n                                \"title\": \"BACKGROUND_COLOR\",\n                                \"type\": \"color\",\n                                \"key\": \"keyboard.background.color\",\n                                \"value\": \"#D1D3D9\"\n                            },\n                            {\n                                \"icon\": [\n                                    \"sun.min\",\n                                    \"#A569BD\"\n                                ],\n                                \"title\": \"BACKGROUND_COLOR_DARK\",\n                                \"type\": \"color\",\n                                \"key\": \"keyboard.background.color.dark\",\n                                \"value\": \"#313131\"\n                            },\n                            {\n                                \"icon\": [\n                                    \"photo\",\n                                    \"#FFCC66\"\n                                ],\n                                \"title\": \"BACKGROUND_IMAGE\",\n                                \"type\": \"image\",\n                                \"key\": \"keyboard.background.image\"\n                            }\n                        ]\n                    },\n                    {\n                        \"items\": [\n                            {\n                                \"icon\": [\n                                    \"cursor.rays\",\n                                    \"#FF8C00\"\n                                ],\n                                \"title\": \"Taptic Engine\",\n                                \"type\": \"switch\",\n                                \"key\": \"keyboard.tapticEngine\",\n                                \"value\": true\n                            },\n                            {\n                                \"icon\": [\n                                    \"option\",\n                                    \"#157EFB\"\n                                ],\n                                \"title\": \"JSBOX_TOOLBAR\",\n                                \"type\": \"switch\",\n                                \"key\": \"keyboard.showJSBoxToolbar\",\n                                \"value\": false\n                            },\n                            {\n                                \"icon\": [\n                                    \"paperplane\"\n                                ],\n                                \"title\": \"QUICK_START_SCRIPTS\",\n                                \"type\": \"script\",\n                                \"key\": \"keyboard.setKeyboardQuickStart\",\n                                \"value\": \"this.method.setKeyboardQuickStart\"\n                            }\n                        ]\n                    },\n                    {\n                        \"items\": [\n                            {\n                                \"icon\": [\n                                    \"cursor.rays\",\n                                    \"#FF8C00\"\n                                ],\n                                \"title\": \"Taptic Engine For Delete\",\n                                \"type\": \"switch\",\n                                \"key\": \"keyboard.tapticEngineForDelete\",\n                                \"value\": true\n                            },\n                            {\n                                \"icon\": [\n                                    \"rays\",\n                                    \"#FFCC33\"\n                                ],\n                                \"title\": \"DELETE_DELAY\",\n                                \"type\": \"number\",\n                                \"key\": \"keyboard.deleteDelay\",\n                                \"value\": 0.05\n                            }\n                        ]\n                    }\n                ]\n            },\n            {\n                \"icon\": [\n                    \"rectangle.3.offgrid.fill\",\n                    \"#1899c4\"\n                ],\n                \"type\": \"child\",\n                \"title\": \"WIDGET\",\n                \"key\": \"widget\",\n                \"children\": [\n                    {\n                        \"items\": [\n                            {\n                                \"icon\": [\n                                    \"rectangle.3.offgrid.fill\"\n                                ],\n                                \"title\": \"PREVIEW\",\n                                \"type\": \"script\",\n                                \"key\": \"previewWidget\",\n                                \"value\": \"this.method.previewWidget\"\n                            }\n                        ]\n                    },\n                    {\n                        \"title\": \"2x2\",\n                        \"items\": [\n                            {\n                                \"icon\": [\n                                    \"link\"\n                                ],\n                                \"title\": \"CLICK_ACTION\",\n                                \"type\": \"menu\",\n                                \"key\": \"widget.2x2.widgetURL\",\n                                \"items\": [\n                                    \"ADD\",\n                                    \"ACTIONS\",\n                                    \"CLIPBOARD\"\n                                ],\n                                \"value\": 2\n                            }\n                        ]\n                    }\n                ]\n            },\n            {\n                \"icon\": [\n                    \"filemenu.and.selection\",\n                    \"#ebcc34\"\n                ],\n                \"type\": \"child\",\n                \"title\": \"TODAY_WIDGET\",\n                \"key\": \"todayWidget\",\n                \"children\": [\n                    {\n                        \"items\": [\n                            {\n                                \"icon\": [\n                                    \"rectangle.3.offgrid.fill\"\n                                ],\n                                \"title\": \"PREVIEW\",\n                                \"type\": \"script\",\n                                \"key\": \"todayWidget.preview\",\n                                \"value\": \"this.method.previewTodayWidget\"\n                            }\n                        ]\n                    },\n                    {\n                        \"items\": [\n                            {\n                                \"icon\": [\n                                    \"bolt.circle\"\n                                ],\n                                \"title\": \"ACTIONS\",\n                                \"type\": \"script\",\n                                \"key\": \"todayWidget.setTodayWidgetActions\",\n                                \"value\": \"this.method.setTodayWidgetActions\"\n                            }\n                        ]\n                    }\n                ]\n            }\n        ]\n    },\n    {\n        \"items\": [\n            {\n                \"icon\": [\n                    \"rectangle.topthird.inset.filled\",\n                    \"#A569BD\"\n                ],\n                \"title\": \"DISPLAY_MODE\",\n                \"type\": \"tab\",\n                \"key\": \"mainUIDisplayMode\",\n                \"items\": [\n                    \"CLASSIC\",\n                    \"MODERN\"\n                ],\n                \"value\": 0\n            }\n        ]\n    },\n    {\n        \"items\": [\n            {\n                \"icon\": [\n                    \"/assets/icon/github.com.jpeg\",\n                    \"white\"\n                ],\n                \"title\": \"Github\",\n                \"type\": \"info\",\n                \"key\": \"github\",\n                \"value\": [\n                    \"ipuppet/CAIO\",\n                    \"https://github.com/ipuppet/CAIO\"\n                ]\n            },\n            {\n                \"icon\": [\n                    \"/assets/icon/telegram.png\",\n                    \"white\"\n                ],\n                \"title\": \"Telegram\",\n                \"type\": \"info\",\n                \"key\": \"telegram\",\n                \"value\": [\n                    \"JSBoxTG\",\n                    \"https://t.me/JSBoxTG\"\n                ]\n            },\n            {\n                \"icon\": [\n                    \"person.fill\",\n                    \"#FF9900\"\n                ],\n                \"title\": \"AUTHOR\",\n                \"type\": \"info\",\n                \"key\": \"author\",\n                \"value\": [\n                    \"ipuppet\",\n                    \"https://blog.ultagic.com\"\n                ]\n            },\n            {\n                \"icon\": [\n                    \"arrow.2.circlepath\"\n                ],\n                \"title\": \"CHECK_UPDATE\",\n                \"type\": \"script\",\n                \"key\": \"checkUpdate\",\n                \"value\": \"this.method.checkUpdate\"\n            },\n            {\n                \"icon\": [\n                    \"book.fill\",\n                    \"#A569BD\"\n                ],\n                \"title\": \"README\",\n                \"type\": \"script\",\n                \"key\": \"readme\",\n                \"value\": \"this.method.readme\"\n            }\n        ]\n    }\n];\n__ACTIONS__ = {\n    \"clipboard\": {\n        \"ClearClipboard\": {\n            \"config.json\": \"{\\n    \\\"icon\\\": \\\"trash\\\",\\n    \\\"color\\\": \\\"#FF0000\\\",\\n    \\\"name\\\": \\\"清除剪切板\\\",\\n    \\\"description\\\": \\\"清除剪切板内容\\\"\\n}\",\n            \"main.js\": \"/**\\n * @typedef {import(\\\"../../action\\\").Action} Action\\n */\\nclass MyAction extends Action {\\n    l10n() {\\n        return {\\n            \\\"zh-Hans\\\": {\\n                \\\"clipboard.clear.success\\\": \\\"剪切板已清空\\\"\\n            },\\n            en: {\\n                \\\"clipboard.clear.success\\\": \\\"Clipboard is cleared\\\"\\n            }\\n        }\\n    }\\n\\n    /**\\n     * 系统会调用 do() 方法\\n     */\\n    do() {\\n        $clipboard.clear()\\n        $ui.success($l10n(\\\"clipboard.clear.success\\\"))\\n    }\\n}\\n\",\n            \"README.md\": \"## ClearClipboard\"\n        },\n        \"DownloadFromUrl\": {\n            \"config.json\": \"{\\n    \\\"icon\\\": \\\"square.and.arrow.down\\\",\\n    \\\"color\\\": \\\"#FF0099\\\",\\n    \\\"name\\\": \\\"从链接下载\\\",\\n    \\\"description\\\": \\\"从链接下载内容，如 js 文件内容等\\\"\\n}\",\n            \"main.js\": \"class MyAction extends Action {\\n    async downloadContent(url) {\\n        const response = await $http.get({\\n            url,\\n            showsProgress: true\\n        })\\n        if (response.error) {\\n            $ui.alert(response.error.localizedDescription)\\n        } else {\\n            return response\\n        }\\n    }\\n\\n    async do() {\\n        const regex = /(https?:\\\\/\\\\/)([\\\\da-z\\\\.-]+)\\\\.([a-z\\\\.]{2,6})([:0-9])*([\\\\/\\\\w\\\\#\\\\.\\\\-\\\\?\\\\=\\\\&])*\\\\s?/ig\\n        const text = this.text ?? \\\"\\\"\\n        const url = text.match(regex, text) ?? []\\n        let response = undefined\\n        if (url.length > 1) {\\n            $ui.menu({\\n                items: url,\\n                handler: async (title, index) => {\\n                    response = await this.downloadContent(url[index])\\n                }\\n            })\\n        } else if (url.length === 1) {\\n            response = await this.downloadContent(url[0])\\n        } else {\\n            $ui.warning(\\\"未检测到链接\\\")\\n            return\\n        }\\n        $share.sheet([{\\n            name: response.response.suggestedFilename,\\n            data: response.data\\n        }])\\n        return response\\n    }\\n}\\n\",\n            \"README.md\": \"## DownloadFromUrl\\n\\n从链接下载内容，如 js 文件内容等\"\n        },\n        \"OpenUrl\": {\n            \"config.json\": \"{\\n    \\\"icon\\\": \\\"link\\\",\\n    \\\"color\\\": \\\"#FF0099\\\",\\n    \\\"name\\\": \\\"打开链接\\\",\\n    \\\"description\\\": \\\"提取文本中的链接并打开\\\"\\n}\",\n            \"main.js\": \"class MyAction extends Action {\\n    openUrl(url) {\\n        $app.openURL(url.trim())\\n    }\\n\\n    do() {\\n        const regex = /(https?:\\\\/\\\\/)([\\\\da-z\\\\.-]+)\\\\.([a-z\\\\.]{2,6})([:0-9])*([\\\\/\\\\w\\\\#\\\\.\\\\-\\\\?\\\\=\\\\&])*\\\\s?/ig\\n        const text = this.text ?? \\\"\\\"\\n        const url = text.match(regex, text) ?? []\\n        if (url.length > 1) {\\n            $ui.menu({\\n                items: url,\\n                handler: (title, index) => {\\n                    this.openUrl(url[index])\\n                }\\n            })\\n        } else if (url.length === 1) {\\n            this.openUrl(url[0])\\n        } else {\\n            $ui.warning(\\\"未检测到链接\\\")\\n        }\\n    }\\n}\\n\",\n            \"README.md\": \"## OpenUrl\\n\\n提取文本中的URL并打开\"\n        },\n        \"Tokenize\": {\n            \"config.json\": \"{\\n    \\\"icon\\\": \\\"pencil.and.ellipsis.rectangle\\\",\\n    \\\"color\\\": \\\"#0099FF\\\",\\n    \\\"name\\\": \\\"分词复制\\\",\\n    \\\"description\\\": \\\"将文本分词处理后复制\\\"\\n}\",\n            \"main.js\": \"class MyAction extends Action {\\n    getView() {\\n        const color = {\\n            background: {\\n                normal: $color(\\\"#E7F2FF\\\", \\\"#E7F2FF\\\"),\\n                highlight: $color(\\\"##074FF\\\", \\\"#BBDAFF\\\")\\n            },\\n            text: {\\n                normal: $color(\\\"##074FF\\\", \\\"##074FF\\\"),\\n                highlight: $color(\\\"#FFFFFF\\\", \\\"#ADADAD\\\")\\n            }\\n        }\\n        const fontSize = 16\\n        const edges = 10\\n        return {\\n            type: \\\"matrix\\\",\\n            layout: $layout.fill,\\n            props: {\\n                spacing: edges,\\n                data: this.results.map(item => ({ label: { text: item } })),\\n                template: {\\n                    views: [{\\n                        type: \\\"label\\\",\\n                        props: {\\n                            id: \\\"label\\\",\\n                            align: $align.center,\\n                            cornerRadius: edges,\\n                            bgcolor: color.background.normal,\\n                            font: $font(fontSize),\\n                            textColor: color.text.normal\\n                        },\\n                        layout: $layout.fill\\n                    }]\\n                }\\n            },\\n            events: {\\n                highlighted: () => { },\\n                itemSize: (sender, indexPath) => {\\n                    const width = fontSize * this.results[indexPath.item].length + 1\\n                    if (this.maxtrixItemHeight === undefined)\\n                        this.maxtrixItemHeight = fontSize + edges * 2\\n                    return $size(width + edges * 2, this.maxtrixItemHeight)\\n                },\\n                didSelect: (sender, indexPath) => {\\n                    const index = this.selected.indexOf(indexPath.item)\\n                    const label = sender.cell(indexPath).get(\\\"label\\\")\\n                    if (index === -1) {\\n                        this.selected.push(indexPath.item)\\n                        label.bgcolor = color.background.highlight\\n                        label.textColor = color.text.highlight\\n                    } else {\\n                        this.selected.splice(index, 1)\\n                        label.bgcolor = color.background.normal\\n                        label.textColor = color.text.normal\\n                    }\\n                }\\n            }\\n        }\\n    }\\n    /**\\n     * 系统会调用 do() 方法\\n     */\\n    do() {\\n        this.selected = []\\n        this.results = []\\n        $text.tokenize({\\n            text: this.text,\\n            handler: results => {\\n                this.results = results\\n                this.pageSheet({\\n                    view: this.getView(),\\n                    done: () => {\\n                        const result = []\\n                        this.selected.sort().forEach(i => {\\n                            result.push(this.results[i])\\n                        })\\n                        if (result.length > 0) {\\n                            const text = result.join(\\\"\\\")\\n                            $clipboard.text = text\\n                            $ui.alert({\\n                                title: \\\"完成\\\",\\n                                message: `已复制内容：${text}`\\n                            })\\n                        }\\n                    }\\n                })\\n            }\\n        })\\n    }\\n}\\n\",\n            \"README.md\": \"## Tokenize\\n\\n> 将文本分词处理后复制\"\n        }\n    },\n    \"editor\": {\n        \"PreviewMarkdown\": {\n            \"config.json\": \"{\\n    \\\"icon\\\": \\\"book\\\",\\n    \\\"color\\\": \\\"#9900CC\\\",\\n    \\\"name\\\": \\\"预览Markdown\\\",\\n    \\\"description\\\": \\\"预览Markdown\\\"\\n}\",\n            \"main.js\": \"class MyAction extends Action {\\n    do() {\\n        this.pageSheet({\\n            view: {\\n                type: \\\"markdown\\\",\\n                props: { content: this.text },\\n                layout: $layout.fill\\n            }\\n        })\\n    }\\n}\\n\",\n            \"README.md\": \"## PreviewMarkdown\\n\\n> 预览Markdown\"\n        },\n        \"SelectedText\": {\n            \"config.json\": \"{\\n    \\\"icon\\\": \\\"crop\\\",\\n    \\\"color\\\": \\\"#6699CC\\\",\\n    \\\"name\\\": \\\"选中的文本\\\",\\n    \\\"description\\\": \\\"这是个测试 Action, 将在控制台输出当前选中的文本\\\"\\n}\",\n            \"main.js\": \"class MyAction extends Action {\\n    do() {\\n        const selectedText = this.selectedText\\n        $ui.alert(selectedText)\\n    }\\n}\\n\",\n            \"README.md\": \"## SelectedText\\n\\n> 显示选中的文本\"\n        }\n    },\n    \"uncategorized\": {\n        \"DisplayClipboard\": {\n            \"config.json\": \"{\\n    \\\"icon\\\": \\\"option\\\",\\n    \\\"color\\\": \\\"#FF6633\\\",\\n    \\\"name\\\": \\\"显示剪切板\\\",\\n    \\\"description\\\": \\\"显示剪切板内容\\\"\\n}\",\n            \"main.js\": \"class MyAction extends Action {\\n    /**\\n     * 系统会调用 do() 方法\\n     */\\n    do() {\\n        this.pageSheet({\\n            view: {\\n                type: \\\"label\\\",\\n                props: {\\n                    text: this.text,\\n                    align: $align.center\\n                },\\n                layout: $layout.fill\\n            }\\n        })\\n    }\\n}\\n\",\n            \"README.md\": \"## DisplayClipboard\"\n        },\n        \"ExportAllContent\": {\n            \"config.json\": \"{\\n    \\\"icon\\\": \\\"square.and.arrow.up\\\",\\n    \\\"color\\\": \\\"#FF3300\\\",\\n    \\\"name\\\": \\\"导出数据\\\",\\n    \\\"description\\\": \\\"导出所有保存的数据\\\"\\n}\",\n            \"main.js\": \"class MyAction extends Action {\\n    do() {\\n        const data = this.getAllContent().join(\\\"\\\\n\\\")\\n        if (data) $share.sheet(data)\\n        else $ui.alert(\\\"无数据\\\")\\n    }\\n}\\n\",\n            \"README.md\": \"## ExportAllContent\\n\\n导出所有保存的数据\"\n        },\n        \"Replace\": {\n            \"config.json\": \"{\\n    \\\"icon\\\": \\\"square.and.arrow.up\\\",\\n    \\\"color\\\": \\\"#FF3300\\\",\\n    \\\"name\\\": \\\"查找替换\\\",\\n    \\\"description\\\": \\\"查找替换\\\"\\n}\",\n            \"main.js\": \"function HtmlTemplate(html) {\\n    return `\\n<html>\\n<head>\\n    <meta name=\\\"viewport\\\" content=\\\"width=device-width,initial-scale=1\\\">\\n</head>\\n<body>\\n${html}\\n</body>\\n</html>\\n`\\n}\\n\\nclass MyAction extends Action {\\n    do() {\\n        $ui.menu({\\n            items: [\\\"忽略大小写\\\", \\\"大小写敏感\\\", \\\"正则表达式\\\"],\\n            handler: async (title, idx) => {\\n                const patternText = await $input.text({\\n                    placeholder: \\\"查找内容\\\"\\n                })\\n                const replaceString = await $input.text({\\n                    placeholder: \\\"替换内容\\\"\\n                })\\n                let pattern = undefined\\n                if (idx === 0) {\\n                    pattern = new RegExp(`(${patternText})+`, \\\"gi\\\")\\n                } else if (idx === 1) {\\n                    pattern = new RegExp(`(${patternText})+`, \\\"g\\\")\\n                } else if (idx === 2) {\\n                    pattern = new RegExp(patternText, \\\"g\\\")\\n                }\\n\\n                const matchResultPreview = this.text.replace(pattern, `<font color=red>${replaceString}</font>`)\\n                const matchResult = this.text.replace(pattern, replaceString)\\n                this.pageSheet({\\n                    title: \\\"替换预览\\\",\\n                    doneText: \\\"替换\\\",\\n                    view: {\\n                        type: \\\"web\\\",\\n                        props: {\\n                            html: HtmlTemplate(matchResultPreview)\\n                        },\\n                        layout: $layout.fill\\n                    },\\n                    done: () => {\\n                        this.setContent(matchResult)\\n                    }\\n                })\\n            }\\n        })\\n        // this.setContent(\\\"Hello world!\\\")\\n    }\\n}\\n\",\n            \"README.md\": \"## Replace\\n\\n查找替换\"\n        }\n    }\n};\n\nvar $l35Ko = parcelRequire(\"l35Ko\");\n$l35Ko.run();\n\n})();\n"
                }
            }
        }
    ],
    "buildVersion": 1,
    "name": "CAIO",
    "clientMinVersion": 1,
    "summary": "",
    "icon": {
        "glyph": "icloud.and.arrow.up",
        "color": "#7881FA"
    },
    "clientVersion": 592
}